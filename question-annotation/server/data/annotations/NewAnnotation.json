{
  "questions": [
    {
      "id": "3",
      "title": "Überladene Methode",
      "text": "Was ist eine überladene Methode?",
      "type": "definition",
      "aspects": [
        {
          "text": "Methoden einer Klasse"
        },
        {
          "text": "mit demselben Namen"
        },
        {
          "text": "Die Signaturen der Methoden unterscheiden sich anhand unterschiedlicher Parameter"
        }
      ],
      "referenceAnswers": [{
        "text":
          "Das sind Methoden einer Klasse mit denselben Namen. Ihre Signaturen unterscheiden sich anhand unterschiedlicher Parameter.",
        "aspects": [
          {
            "text": "Das sind Methoden einer Klasse",
            "aIdx": 0,
            "elements": [[0, 30]],
            "label": 0
          },
          {
            "text": "Das sind Methoden ;; mit demselben Namen",
            "aIdx": 1,
            "elements": [[0, 17], [31, 50]],
            "label": 0
          },
          {
            "text": "Ihre Signaturen unterscheiden sich anhand unterschiedlicher Parameter",
            "aIdx": 2,
            "elements": [[52, 121]],
            "label": 0
          }
        ]
      }],
      "studentAnswers": [
        {
          "text":
            "Das sind Methoden mit denselben Namen aber unterschiedliche Signatur. Zum Beispiel: public double berechneZeitInStunden(int minuten){.....} public double berechneZeitInStunden(int sekunden){....} Rückgabewert ist egal. Hat den Vorteil das es Benutzerfreundlicher ist.",
          "id": "1",
          "correctionOrComment":
            "Das sind Methoden mit denselben Namen aber unterschiedlicher Signatur. Der Rückgabewert ist egal. Es hat den Vorteil, dass es benutzerfreundlicher ist."
        },
        {
          "text":
            "eine überladene Methode ist, wenn man mehrere Konstruktoren mit unterschiedlichen Parametern definiert.",
          "id": "2",
          "correctionOrComment":
            "Eine Methode ist überladen, wenn man mehrere Konstruktoren mit unterschiedlichen Parametern definiert."
        },
        {
          "text":
            "eine überladene Methode wurde mehr als einmal in einer Klasse implementiert, jedoch müssen die Parameter-Übergaben verschieden einzigartig sein, der rückgabetype kann \"\"belibig sein\"\" der methoden-name muss gleich sein. Ein Beispiel: public class Test { public int getOutput() { return 0; } //überladene Methode public int getOutput(int mode){ return 0; } //auch überladen public String getOutput(int mode, String prefix){ return prefix+mode; } }",
          "id": "3",
          "correctionOrComment":
            "Eine überladene Methode wurde mehr als einmal in einer Klasse implementiert, jedoch müssen die Parameterübergaben verschieden einzigartig sein. Der Rückgabetype kann belibig sein. Der Methodenname muss gleich sein."
        },
        {
          "text": "-",
          "id": "4",
          "correctionOrComment": "-"
        },
        {
          "text":
            "Man überlädt eine Methode damit der Rückgabe wert eine schöne lesbare Zahl ist und nicht irgendein code den man nicht entziffern kann.",
          "id": "5",
          "correctionOrComment":
            "Man überlädt eine Methode, damit der Rückgabewert eine schöne, lesbare Zahl ist und nicht irgendein Code, den man nicht entziffern kann."
        },
        {
          "text": "eine methode die die auf alle objekte zugreift",
          "id": "6",
          "correctionOrComment": "Das ist eine Methode, die auf alle Objekte zugreift."
        },
        {
          "text":
            "eine Methode aus die von mehreren klassen benutzt wird und somit immer wieder überschrieben wird",
          "id": "7",
          "correctionOrComment":
            "Das ist eine Methode, die von mehreren Klassen benutzt wird und somit immer wieder überschrieben wird."
        },
        {
          "text": "es ist eine methode die false ausgibt",
          "id": "8",
          "correctionOrComment": "Es ist eine Methode, die 'false' ausgibt."
        },
        {
          "text":
            "Eine Methode, die in der Basisklasse sowie in abgeleiteten Klassen gleichnamig auftritt und unterschiedliche Rückgabewerte liefert.",
          "id": "9",
          "correctionOrComment":
            "Das ist eine Methode, die in der Basisklasse sowie in abgeleiteten Klassen gleichnamig auftritt und unterschiedliche Rückgabewerte liefert."
        },
        {
          "text":
            "Zwei Methoden mit dem selben namen bezeichnet man als Überladen. Deshalb müssen sie sich immer in der Signatur (Parameterliste, Typen) unterscheiden.",
          "id": "10",
          "correctionOrComment":
            "Zwei Methoden mit dem selben Namen bezeichnet man als überladen. Deshalb müssen sie sich immer in der Signatur (Parameterliste, Typen) unterscheiden."
        },
        {
          "text": "Wenn der Speicher der Methoden nicht ausreicht.",
          "id": "11",
          "correctionOrComment":
            "Wenn der Speicher der Methoden nicht ausreicht, sind sie überladen."
        },
        {
          "text": "die mit parametern überladen ist",
          "id": "12",
          "correctionOrComment": "Das ist ein Methode, die mit Parametern überladen ist."
        },
        {
          "text": "wenn zuviele variablen deklariert sind, aber nicht alles benutzt werden",
          "id": "13",
          "correctionOrComment":
            "Das ist, wenn zu viele Variablen deklariert sind, aber nicht alle benutzt werden."
        },
        {
          "text": "heist, das sich signatur, Parameterzahl bzw. die typen sich unterscheiden.",
          "id": "14",
          "correctionOrComment":
            "Es bedeutet, dass die Signatur und Parameterzahl (bzw. die Typen) sich unterscheiden."
        },
        {
          "text": "-",
          "id": "15",
          "correctionOrComment": "-"
        },
        {
          "text": "-",
          "id": "16",
          "correctionOrComment": "-"
        },
        {
          "text":
            "eine überladene Methode hat denselben Namen wie eine andere Methode, jedoch andere Parameter. Z.B. bei Konstruktoren: Klasse(){} Klasse(Obj o){} Klasse(Person p, int alter){} durch die Überladung kann sich der \"\"User\"\" aussuchen, welche Methode er nutzen will (z.B. Klasse k = new Klasse(); oder Klasse k2 = new Klasse(anton);",
          "id": "17",
          "correctionOrComment":
            "Eine überladene Methode hat denselben Namen wie eine andere Methode, jedoch andere Parameter. Durch die Überladung kann sich der 'User' aussuchen, welche Methode er nutzen will."
        },
        {
          "text": "Eine Methode die zu viele Methoden implementiert hat und unübersichtlich ist.",
          "id": "18",
          "correctionOrComment":
            "Das ist eine Methode, die zu viele Methoden implementiert hat und unübersichtlich ist."
        },
        {
          "text":
            "Eine überladene Methode ist wenn 2 Methoen den selben namen haben, sie müsen sich durch Parammeter-leiste und Signatur unerscheiden",
          "id": "19",
          "correctionOrComment":
            "Eine Methode ist überladen, wenn 2 Methoden den selben Namen haben. Sie müssen sich durch Parameterliste und Signatur unerscheiden."
        },
        {
          "text":
            "Eine überladene Methode ist eine definierte Methode, die durch eine neue Implementation der selben Methode eine neue Bedeutung bekommt. z.B. die vom Object definierte Methode toString(). Wird sie in einer Klasse neu geschrieben gilt sie als überladen.",
          "id": "20",
          "correctionOrComment":
            "Eine überladene Methode ist eine definierte Methode, die durch eine neue Implementation derselben Methode eine neue Bedeutung bekommt. Wird sie in einer Klasse neu geschrieben gilt sie als überladen."
        },
        {
          "text":
            "Eine überladene Methode ist eine Methode die sowohl in der Basisklasse als auch in der abgeleitenden Klasse initialisiert wird, dies bedeutet die Methode wird 2 x mit dem gleichen namen initialisiert kann aber einen anderen Inhalt besitzen. Man erkennt erst welche Methode man benutzt beim auslesen.",
          "id": "21",
          "correctionOrComment":
            "Eine überladene Methode ist eine Methode, die sowohl in der Basisklasse als auch in der abgeleitenden Klasse initialisiert wird. Dies bedeutet, die Methode wird 2 mal mit dem gleichen Namen initialisiert, kann aber einen anderen Inhalt besitzen. Man erkennt erst beim Auslesen, welche Methode man benutzt."
        },
        {
          "text":
            "Eine überladene Methode ist eine Methoe die eine Methode mit dem selben Namen an der momentanen Stelle ändert allerdings nicht die Methode mit dem selben Namen an der ursprünglichen Stelle.",
          "id": "22",
          "correctionOrComment":
            "Eine überladene Methode ist eine Methode, die eine Methode mit demselben Namen an der momentanen Stelle ändert, allerdings nicht die Methode mit dem selben Namen an der ursprünglichen Stelle."
        },
        {
          "text": "Wenn eine Methode sehr häufig wiederholt geschrieben wird.",
          "id": "23",
          "correctionOrComment":
            "Das ist, wenn eine Methode sehr häufig wiederholt geschrieben wird."
        },
        {
          "text":
            "wenn 2 methoden den selben Namen haben sind sie überladen. die methoden müssen sich jedoch durch die Parameter, typ undsignatur unterscheiden um zu funktionieren.",
          "id": "24",
          "correctionOrComment":
            "Wenn 2 Methoden denselben Namen haben, sind sie überladen. Die Methoden müssen sich jedoch durch die Parameter (Typ und Signatur) unterscheiden um zu funktionieren."
        },
        {
          "text":
            "Eine Methode die einen zu großen Wert aufnehmen muss für den sie nicht festgelegt ist.",
          "id": "25",
          "correctionOrComment":
            "Das ist eine Methode, die einen zu großen Wert aufnehmen muss, für den sie nicht festgelegt ist."
        },
        {
          "text": "Wenn zwei Methoden den selben Namen haben, aber unterschiedliche Parameter",
          "id": "26",
          "correctionOrComment":
            "Das ist, wenn zwei Methoden denselben Namen haben, aber unterschiedliche Parameter."
        },
        {
          "text":
            "Eine überladene Methode ist eine Methode, der beim Aufruf Parameter übergeben werden.",
          "id": "27",
          "correctionOrComment":
            "Eine überladene Methode ist eine Methode, der beim Aufruf Parameter übergeben werden."
        },
        {
          "text":
            "Eine uberladene methode ist eine Methode, die den Name von eine bereits existierende methode trägt",
          "id": "28",
          "correctionOrComment":
            "Eine überladene Methode ist eine Methode, die den Name von einer bereits existierenden Methode trägt."
        },
        {
          "text":
            "Eine überladene Methode ist wenn man z.B. eine abgeleitete Klasse einer Basisklasse hat, diese Methode der Basisklasse aber nicht für die Ableitung \"\"passt\"\", kann man eine weitere Methode schreiben, oder mehrere wenn man möchte!",
          "id": "29",
          "correctionOrComment":
            "Eine Methode ist überladen, wenn man beispielsweise eine abgeleitete Klasse einer Basisklasse hat. Wenn eine Methode der Basisklasse nicht für die Ableitung passt, kann man eine oder mehrere weitere Methode schreiben, wenn man möchte!"
        },
        {
          "text": "to string methode",
          "id": "30",
          "correctionOrComment": "to string methode"
        },
        {
          "text":
            "eine überladene Methode ist eine Methode die in einer anderen Klasse überschriben werden kann.",
          "id": "31",
          "correctionOrComment":
            "Eine überladene Methode ist eine Methode, die in einer anderen Klasse überschrieben werden kann."
        },
        {
          "text": "Ein Methode, die es mehrmals gibt.(Gleicher Name)",
          "id": "32",
          "correctionOrComment": "Ein Methode, die es mehrmals gibt (gleicher Name)."
        },
        {
          "text":
            "eine Methode wo der Standart Konstruktur durch einen/mehrere eigenen Konstruktor ersetzt wurde",
          "id": "33",
          "correctionOrComment":
            "Das ist eine Methode, in der der Standartkonstruktur durch einen oder mehrere eigene Konstruktoren ersetzt wurde."
        },
        {
          "text":
            "Eine Methode, die mehrmals verwende/aufgerufen wird, mit jeweils anderem Inhalt.",
          "id": "34",
          "correctionOrComment":
            "Das ist eine Methode, die mehrmals verwendet oder aufgerufen wird, mit jeweils anderem Inhalt."
        },
        {
          "text":
            "Überladene methoden sind zwei verschiedene methoden,, die aber mit verschiedenen Parameter und Typen defineirt sind. (2 verschiedene Methoden, aber verschiedene Parameter und Typen)",
          "id": "35",
          "correctionOrComment":
            "Überladene Methoden sind zwei verschiedene Methoden, die aber mit verschiedenen Parametern und Typen definiert sind."
        },
        {
          "text":
            "Wenn zwei verschiedene Methoden den selben Namen haben, heißen sie überladen. Sie müssen sich durch Parameterliste und - Typen) unterscheiden.",
          "id": "36",
          "correctionOrComment":
            "Wenn zwei verschiedene Methoden den selben Namen haben, heißen sie überladen. Sie müssen sich durch die Parameterliste und -typen unterscheiden."
        },
        {
          "text":
            "das die selbe Methode mehrfach in einer Klasse funktioniert, nur wenn die Parameterliste (Typen) sich unterscheiden.",
          "id": "37",
          "correctionOrComment":
            "Es bedeutet, dass dieselbe Methode nur dann mehrfach in einer Klasse funktioniert, wenn die Parameterliste und -typen sich unterscheiden."
        },
        {
          "text":
            "Eine überladene Methode ist eine bereits vorhandene Methode die vom Ersteller an das aktuelle Projekt angepasst wird.",
          "id": "38",
          "correctionOrComment":
            "Eine überladene Methode ist eine bereits vorhandene Methode, die vom Ersteller an das aktuelle Projekt angepasst wird."
        },
        {
          "text": "Eine Methode, welche mehrere verschiedene Werte übergeben kann",
          "id": "39",
          "correctionOrComment":
            "Das ist eine Methode, welche mehrere verschiedene Werte übergeben kann."
        },
        {
          "text":
            "Eine überladene Methode ist eine selbsterstellte Supermethode. Wie zum beispiel ein selbstgeschriebener Konstruktor der den Standart Konstruktor erstetzt.",
          "id": "40",
          "correctionOrComment":
            "Eine überladene Methode ist eine selbsterstellte Supermethode beispielsweise ein selbstgeschriebener Konstruktor, der den Standartkonstruktor erstetzt."
        },
        {
          "text":
            "Als überladen bezeichnet man eine Methode, die den selben Namen hat, wie eine andere, aber andere Parameter erwartet.",
          "id": "41",
          "correctionOrComment":
            "Als überladen bezeichnet man eine Methode, die den selben Namen hat, wie eine andere, aber andere Parameter erwartet."
        },
        {
          "text":
            "Das sind mehrere Methoden mit dem gleichen Namen der benutzt wird. Allerdings besitzen sie andere Ausgaben.",
          "id": "42",
          "correctionOrComment":
            "Das sind mehrere Methoden mit dem gleichen Namen, der benutzt wird. Allerdings besitzen sie andere Ausgaben."
        },
        {
          "text": "ist eine Methode, den selben namen und die selbe funktion hat",
          "id": "43",
          "correctionOrComment":
            "Das ist eine Methode, die den selben Namen und die selbe Funktion hat."
        },
        {
          "text": "Eine Methode die nichts zurückgeben kann.",
          "id": "44",
          "correctionOrComment": "Das ist eine Methode, die nichts zurückgeben kann."
        },
        {
          "text":
            "Haben zwei verschiedene Methoden denselben Namen heißen Sie überladen. Sie unterscheiden sich durch ihre Parameter. Sie sorgen für Benutzerfreundlichkeit.",
          "id": "45",
          "correctionOrComment":
            "Haben zwei verschiedene Methoden denselben Namen, heißen sie überladen. Sie unterscheiden sich durch ihre Parameter. Sie sorgen für Benutzerfreundlichkeit."
        },
        {
          "text":
            "Eine Methode, die sich nur ihrer Signatur (Parameterleiste und -typen) von einer anderen Methode unterscheidet, z.B. kann der Konstruktor einer Klasse überladen werden, indem er jeweils eine unterschiedliche Anzahl an Variablen und/oder verschiedene Typen entgegennimmt.",
          "id": "46",
          "correctionOrComment":
            "Das ist eine Methode, die sich nur anhand ihrer Signatur (Parameterliste und -typen) von einer anderen Methode unterscheidet. Beispielsweise kann der Konstruktor einer Klasse überladen werden, indem er jeweils eine unterschiedliche Anzahl an Variablen oder verschiedene Typen entgegennimmt."
        },
        {
          "text":
            "Eine überladene Methode ist eine Methode die den selben Namen hat wie eine oder mehrere Methoden und die je nach EIngabewert aufgerufen wird. So kann es sein das bei einer Eingabe eine andere Methode des selben Namens wie bei einer anderen Eingabe aufgerufen wird. So ist es möglich mit \"\"derselben\"\" Methode verschiedene EIngabetypen anzusprechen.",
          "id": "47",
          "correctionOrComment":
            "Eine überladene Methode ist eine Methode, die den selben Namen hat, wie eine oder mehrere Methoden und die je nach Eingabewert aufgerufen wird. So kann es sein, dass bei einer Eingabe eine andere Methode des selben Namens, wie bei einer anderen Eingabe aufgerufen wird. So ist es möglich mit derselben Methode verschiedene Eingabetypen anzusprechen."
        },
        {
          "text":
            "Eine Methode ist überladen, wenn mindestens eine weitere Methode mit dem selben Namen aber einer anderen Signatur vorliegt.",
          "id": "48",
          "correctionOrComment":
            "Eine Methode ist überladen, wenn mindestens eine weitere Methode mit dem selben Namen aber einer anderen Signatur vorliegt."
        },
        {
          "text": "Eine überladene Methode ist eine Methode die andere Methoden aufruft.",
          "id": "49",
          "correctionOrComment":
            "Eine überladene Methode ist eine Methode, die andere Methoden aufruft."
        },
        {
          "text": "-",
          "id": "50",
          "correctionOrComment": "-"
        },
        {
          "text":
            "Überlade Methoden sind Methoden die einander überschreiben können z.B. \"\"+\"\".",
          "id": "51",
          "correctionOrComment":
            "Überlade Methoden sind Methoden, die einander überschreiben können."
        },
        {
          "text":
            "Eine Methode die es schonmal gibt. Also mit dem gleichen Namen. Mit der Methode kann man dann mehrere Sachen machen (sie überschreiben sich nicht).",
          "id": "52",
          "correctionOrComment":
            "Das ist eine Methode, die es schonmal gibt, also mit dem gleichen Namen. Mit der Methode kann man dann mehrere Sachen machen. Sie überschreiben sich nicht."
        },
        {
          "text":
            "eine überladene methode ist eine methode die aus einer basisklasse abgeleitet ist und in der der abgeleitetetn klasse überschrieben wird beispiellsweise hat jede klasse die methode toString(), da alle klassen von Object abgeleitet sind, um eine lesbare ausgabe zu erhalten muss die methode toString in der abgeleiteten Klasse überschrieben werden und ist dann überladen",
          "id": "53",
          "correctionOrComment":
            "Eine überladene Methode ist eine Methode, die aus einer Basisklasse abgeleitet ist und in der abgeleiteten Klasse überschrieben wird. Beispielsweise hat jede Klasse die Methode 'toString()', da alle Klassen von 'Object' abgeleitet sind. Um eine lesbare Ausgabe zu erhalten muss die Methode 'toString' in der abgeleiteten Klasse überschrieben werden und ist dann überladen."
        },
        {
          "text":
            "Eine Methode, die das gleiche Schutzattribut, den gleichen Rückgabetyp und den gleichen Methodenname hat. Sie unterscheidet sich nur in den Übergabeparametern.",
          "id": "54",
          "correctionOrComment":
            "Das ist eine Methode, die das gleiche Schutzattribut, den gleichen Rückgabetyp und den gleichen Methodenname hat. Sie unterscheidet sich nur in den Übergabeparametern."
        },
        {
          "text":
            "Haben zwei verschieden Methoden derselben Namen heißen sie überladen. Überladen Methoiden müssen sich durch die Signatur(Parameterliste und -typen) unterscheiden, der Rückgabewert ist egal.",
          "id": "55",
          "correctionOrComment":
            "Haben zwei verschieden Methoden denselben Namen, heißen sie überladen. Überladene Methoden müssen sich durch die Signatur (Parameterliste und -typen) unterscheiden. Der Rückgabewert ist egal."
        },
        {
          "text":
            "wenn zwei verschiedene methoden denselben namen haben, heißen sie überladen. sie müssen sich durch die Signatur (Parameterliste und typen) unterscheiden,der Rrückgabe wert ist egal.",
          "id": "56",
          "correctionOrComment":
            "Wenn zwei verschiedene Methoden denselben Namen haben, heißen sie überladen. Sie müssen sich durch die Signatur (Parameterliste und -typen) unterscheiden. Der Rrückgabewert ist egal."
        },
        {
          "text": "eine Methode die",
          "id": "57",
          "correctionOrComment": "eine Methode die"
        },
        {
          "text":
            "wenn zwei Methoden denselben namen haben dann sind sie überladen sie müssen sich durch die signatur unterscheiden der rückgabewert ist egal",
          "id": "58",
          "correctionOrComment":
            "Wenn zwei Methoden denselben Namen haben, dann sind sie überladen. Sie müssen sich durch die Signatur unterscheiden. Der Rückgabewert ist egal."
        },
        {
          "text":
            "Wenn zwei verschiedene Methoden denselben Namen haben, dann heißen sie überladen. Überladene Methoden müssen sich durch die Parameterliste und -typen unterscheiden.",
          "id": "59",
          "correctionOrComment":
            "Wenn zwei verschiedene Methoden denselben Namen haben, dann heißen sie überladen. Überladene Methoden müssen sich durch die Parameterliste und -typen unterscheiden."
        },
        {
          "text": "-",
          "id": "60",
          "correctionOrComment": "-"
        },
        {
          "text":
            "Mehrere Methoden haben dieselben Namen, man kann sie durch ihre Eigenschaften entscheiden. Der Aufruf ist dabei egal.",
          "id": "61",
          "correctionOrComment":
            "Mehrere Methoden haben dieselben Namen. Man kann sie durch ihre Eigenschaften unterscheiden. Der Aufruf ist dabei egal."
        },
        {
          "text":
            "Wenn zwei verschiedene Methoden den selben Namen haben nennt man sie Überladen. Sie müssen sich durch die Signatur unterscheiden. Der Rückgabewert ist egal.",
          "id": "62",
          "correctionOrComment":
            "Wenn zwei verschiedene Methoden denselben Namen haben, nennt man sie überladen. Sie müssen sich durch die Signatur unterscheiden. Der Rückgabewert ist egal."
        },
        {
          "text":
            "Vererbte Methode/Konstruktor die mit Override überschrieben wurde. Beispiel: Überschreibung des Standartkonstruktors.",
          "id": "63",
          "correctionOrComment":
            "Das sind vererbte Methoden oder Konstruktoren, die mit 'Override' überschrieben wurde."
        },
        {
          "text":
            "Sind Methoden mit den selben Methodennamen, der unterschied besteht aber da drin, dass die Parameteranzahl bzw. Typen sich unterscheiden.",
          "id": "64",
          "correctionOrComment":
            "Das sind Methoden mit den selben Methodennamen. Der Unterschied besteht aber darin, dass die Parameteranzahl oder -typen sich unterscheiden."
        },
        {
          "text":
            "Haben zwei verschiedene Methoden denselben Namen heißen sie Überladen Überladene Methoden müssen sich durch die Signatur (Parameterliste und typen) unterscheiden.",
          "id": "65",
          "correctionOrComment":
            "Haben zwei verschiedene Methoden denselben Namen, heißen sie überladen. Überladene Methoden müssen sich durch die Signatur (Parameterliste und -typen) unterscheiden."
        },
        {
          "text":
            "Eine Methode ist überladen, wenn sie z.B. einen String erbt und diesen dann innerhalb der Methode mit einem neuen \"\"Wert\"\" überschreibt.",
          "id": "66",
          "correctionOrComment":
            "Eine Methode ist überladen, wenn sie beispielsweise einen String erbt und diesen dann innerhalb der Methode mit einem neuen Wert überschreibt."
        },
        {
          "text":
            "überladen ist eine Methode, wenn sie doppelt implementiert wurde, mit den gleichen Parametern. Die Variable wurde gleichnamig definiert.",
          "id": "67",
          "correctionOrComment":
            "Überladen ist eine Methode, wenn sie doppelt implementiert wurde, mit den gleichen Parametern. Die Variable wurde gleichnamig definiert."
        },
        {
          "text": "Eine Methode in der zu viel Quellcode steht.",
          "id": "68",
          "correctionOrComment": "Eine Methode in der zu viel Quellcode steht."
        },
        {
          "text":
            "Haben zwei verschiedene Methoden denselben Namen heißen sie überladen. Überladene Methoden müssen sich durch die Signatur (Parameterliste und -typen) unterscheiden den, der Rückgabewert ist egal.",
          "id": "69",
          "correctionOrComment":
            "Haben zwei verschiedene Methoden denselben Namen, heißen sie überladen. Überladene Methoden müssen sich durch die Signatur (Parameterliste und -typen) unterscheiden. Der Rückgabewert ist egal."
        },
        {
          "text":
            "Überladene Methoden haben zwei verschiedene Methoden den selben Namen heißen sie Überladen. Überladene Methoden müssen sich durch die Signatur (Parameterliste und -typen) unterscheiden.",
          "id": "70",
          "correctionOrComment":
            "Haben zwei verschiedene Methoden denselben Namen, heißen sie überladen. Überladene Methoden müssen sich durch die Signatur (Parameterliste und -typen) unterscheiden."
        },
        {
          "text":
            "Bedeutet dass derselbe Methodenname mehrfach in einer Klasse verwendet werden kann. Die Anzahl der Übergabeparameter ist unterschiedlich.",
          "id": "71",
          "correctionOrComment":
            "Es bedeutet, dass derselbe Methodenname mehrfach in einer Klasse verwendet werden kann. Die Anzahl der Übergabeparameter ist unterschiedlich."
        },
        {
          "text":
            "Eine vererbte Methode die überschrieben wird damit diese verändert werden kann für die Kindklasse. Diese werden konventionell mit @Override gekennzeichnet.",
          "id": "72",
          "correctionOrComment":
            "Das ist eine vererbte Methode, die überschrieben wird damit diese verändert werden kann für die Kindklasse. Diese werden konventionell mit '@Override' gekennzeichnet."
        },
        {
          "text":
            "Eine überladene Methode ist wenn die maximale Kapazität an methoden überladen wurde.",
          "id": "73",
          "correctionOrComment":
            "Eine Methode ist überladen, wenn die maximale Kapazität an Methoden überladen wurde."
        }
      ]
    },
    {
      "id": "4",
      "title": "Klassenattribute schätzen",
      "text":
        "Sie schreiben eine Klasse Beispielklasse mit einem Feld 'wert'. Wie erreichen Sie, dass 'wert' nur innerhalb von Beispielklasse schreibbar, aber von überall aus lesbar ist?",
      "type": "procedure",
      "aspects": [
        {
          "text": "Das Feld 'wert' muss mit dem Schutzattribute private deklariert werden"
        },
        {
          "text":
            "Die Klasse muss eine Methode bereitstellen, die das Auslesen des Feldes 'wert' ermöglicht"
        }
      ],
      "referenceAnswers": [{
        "text":
          "Das Feld 'wert' muss mit dem Schutzattribute private deklariert werden. Zusätzlich muss die Klasse eine Methode bereitstellen, die das Auslesen dieses Feldes ermöglicht.",
        "aspects": [
          {
            "text": "Das Feld 'wert' muss mit dem Schutzattribute private deklariert werden",
            "aIdx": 0,
            "elements": [[0, 72]],
            "label": 0
          },
          {
            "text":
              "Zusätzlich muss die Klasse eine Methode bereitstellen, die das Auslesen dieses Feldes ermöglicht",
            "aIdx": 1,
            "elements": [[74, 170]],
            "label": 0
          }
        ]
      }],
      "studentAnswers": [
        {
          "text":
            "Ich setze \"\"Wert\"\" auf private und schreibe in der Beispielklasse einen Getter. So kann \"\"Wert\"\" gelesen von überall gelesen werden udn bleibt schreibgeschützt.",
          "id": "1",
          "correctionOrComment":
            "Ich setze 'wert' auf 'private' und schreibe in der Beispielklasse einen 'Getter'. So kann 'wert' von überall gelesen werden und bleibt schreibgeschützt."
        },
        {
          "text":
            "indem man mit der sogenanneten Kapselung arbeitet: wert als Private definieren und mithilfe von Getter- und Setter-methoden den Zugrif ermöglichen.",
          "id": "2",
          "correctionOrComment":
            "Indem man mit der sogenanneten Kapselung arbeitet. Man muss 'wert' als 'private' definieren und mithilfe von Getter- und Settermethoden den Zugriff ermöglichen."
        },
        {
          "text":
            "Mit protect. Wemm man in der Beispielsklasse\"\" protect double wert\"\" schreibt ist sie für andere Klassen sichtbar aber nicht veränderbar.",
          "id": "3",
          "correctionOrComment":
            "Wenn man in der Beispielsklasse 'protected double wert' schreibt, ist sie für andere Klassen sichtbar aber nicht veränderbar."
        },
        {
          "text": "privat int wert und dann durch getter und setter aufrufen.",
          "id": "4",
          "correctionOrComment":
            "Es muss als 'private int wert' initialisiert werden und kann dann durch 'Getter' und 'Setter' aufrufen werden."
        },
        {
          "text": "man benutzt die protected um es schützen aber lesbar zu halten",
          "id": "5",
          "correctionOrComment": "Man benutzt 'protected' um es zu schützen aber lesbar zu halten."
        },
        {
          "text":
            "ich lege das schutzattribut von \"\"wert\"\" auf private fest und implementiere eine getter-methode sodass von überall auf den im Feld \"\"wert\"\" hinterlegten Wert über diese methode zugegriffen werden kann.",
          "id": "6",
          "correctionOrComment":
            "Ich lege das Schutzattribut von 'wert' auf 'private' fest und implementiere eine Gettermethode, sodass von überall auf den im Feld 'wert' hinterlegten Wert über diese Methode zugegriffen werden kann."
        },
        {
          "text":
            "durch eine vererbung. mit extends können dann die anderen klassen die werte übernehmen",
          "id": "7",
          "correctionOrComment":
            "Das geht durch eine Vererbung. Mit 'extends' können dann die anderen Klassen die Werte übernehmen."
        },
        {
          "text":
            "Indem man innerhalb der \"\"Beispielklasse\"\" nur einen Getter für \"\"wert\"\", aber keinen Setter verwendet.",
          "id": "8",
          "correctionOrComment":
            "Das geht, indem man innerhalb der Beispielklasse nur einen 'Getter' für 'wert' aber keinen 'Setter' verwendet."
        },
        {
          "text": "ich benutze vor wert den zustazt protected",
          "id": "9",
          "correctionOrComment": "Ich benutze vor 'wert' den Zusatz 'protected'."
        },
        {
          "text": "protected int wert;",
          "id": "10",
          "correctionOrComment": "Das geht mit 'protected int wert'."
        },
        {
          "text": "private Beispielklasse",
          "id": "11",
          "correctionOrComment": "Das geht mit 'private Beispielklasse'."
        },
        {
          "text":
            "private Typ wert; (Variable als private deklarieren, um direkten Zugriff zu vermeiden) public getWert(){return wert;} (auslesen, von überall möglich) private void setWert(Typ wert){this.wert = wert;} (schreiben, nur innerhalb der eigenen Klasse möglich)",
          "id": "12",
          "correctionOrComment":
            "Man muss die Variable als 'private' deklarieren, um direkten Zugriff zu vermeiden. Ein 'public' Getter macht das  Auslesen, von überall möglich. Ein 'private'  'Setter' macht das Schreiben, nur innerhalb der eigenen Klasse möglich."
        },
        {
          "text": "public static final string wert...",
          "id": "13",
          "correctionOrComment": "Das geht mit 'public static final string wert'."
        },
        {
          "text":
            "man muss Proteced benützen damit sie von übeall lesbar ist aber nur innerhalb von Beispielklasse schreibbar ist",
          "id": "14",
          "correctionOrComment":
            "Man muss 'proteced' benutzen, damit sie von übeall lesbar, aber nur innerhalb von Beispielklasse schreibbar ist"
        },
        {
          "text":
            "Zuerst muss die Variable wert als private deklariert werden. So ist sie von außen schreibgeschützt. Um nun wert von außen lesbar zu machen muss ein Getter implementiert werden. Durch den Methodenaufruf getWert() kann nun wert ausgelesen werden aber nicht verändert werden.",
          "id": "15",
          "correctionOrComment":
            "Zuerst muss die Variable 'wert' als 'private' deklariert werden. So ist sie von außen schreibgeschützt. Um nun 'wert' von außen lesbar zu machen muss ein 'Getter' implementiert werden. Durch den Methodenaufruf 'getWert()' kann nun 'wert' ausgelesen werden aber nicht verändert werden."
        },
        {
          "text":
            "Durch das Atrribut private, schützt man Datenfelder davor das sie nur innerhalb ihrer Klasse schreibbar und sichtbar sind. Durch eine getter Methode können alle Klassen, die private geschriebene Variable lesen.",
          "id": "16",
          "correctionOrComment":
            "Durch das Attribut 'private', schützt man Datenfelder davor, dass sie nur innerhalb ihrer Klasse schreibbar und sichtbar sind. Durch eine 'Getter' Methode können alle Klassen, die 'private' geschriebene Variable lesen."
        },
        {
          "text":
            "ich erreichr es in dem ich den wert auf private setze und demendsprechende getter mache also ptivate int wert ; public int getWert(){ return wert; }",
          "id": "17",
          "correctionOrComment":
            "Ich erreiche es, indem ich 'wert' auf 'private' setze und demendsprechende 'Getter' mache."
        },
        {
          "text":
            "Ich setze das Feld \"\"wert\"\" auf Private und benutze von den anderen Klassen aus Getter um den Wert des Feldes wert zu lesen.",
          "id": "18",
          "correctionOrComment":
            "Ich setze das Feld 'wert' auf 'private' und benutze von den anderen Klassen aus 'Getter' um den Wert des Feldes 'wert' zu lesen."
        },
        {
          "text": "protected",
          "id": "19",
          "correctionOrComment": "Das geht mit 'protected'."
        },
        {
          "text":
            "Damit sie nur schreibbar innerhalbder Klasse ist deklariert man sie mit private. Lesbar machen Kann man die Variable indem man sie in eine get-methode steckt und diese Methode public macht.",
          "id": "20",
          "correctionOrComment":
            "Damit sie nur schreibbar innerhalb der Klasse ist, deklariert man sie mit 'private'. Lesbar machen kann man die Variable, indem man sie in eine Gettermethode steckt und diese Methode 'public' macht."
        },
        {
          "text":
            "Diese feld soll mit Attribut private deklarieren werden und mit eine methode überall lesbar wird",
          "id": "21",
          "correctionOrComment":
            "Dieses Feld sollte mit dem Attribut 'private' deklariert werden und mit einer Gettermethode von überall lesbar gemacht werden."
        },
        {
          "text":
            "private (z.B. int) wert; Und erstelle dann eine Getter Methode. public int getWert() { return wert; }",
          "id": "22",
          "correctionOrComment":
            "Das geht mit 'private int wert'. Man erstelle dann eine 'public' Gettermethode."
        },
        {
          "text":
            "public class zahl; private int wert; public int getWert(){ return wert; mit private ermöglichen wir das man nur in der eigenen klasse zugriff hat und mit getter machen wir sie aber in den anderen klassen sichtbar.",
          "id": "23",
          "correctionOrComment":
            "Mit 'private' ermöglichen wir, dass man nur in der eigenen Klasse Zugriff hat und mit einem 'Getter' machen wir sie aber in den anderen Klassen sichtbar."
        },
        {
          "text":
            "public class Beispielklasse protected int wert; public String getWert(){ return this.wert;} Dadurch dass man nur mit dem Setter wert überschreiben kann es bzw scheibbar machen kann, benutz man hier nur einen getter.",
          "id": "24",
          "correctionOrComment":
            "Das geht mit 'protected int wert'. Dadurch dass man nur mit dem 'Setter' 'wert' überschreiben kann, benutz man hier nur einen 'Getter'."
        },
        {
          "text": "mit dem Präfix protected zb: protected int wert;",
          "id": "25",
          "correctionOrComment": "Das geht mit dem Präfix 'protected', also 'protected int wert'."
        },
        {
          "text": "public final wert",
          "id": "26",
          "correctionOrComment": "Das geht mit 'public final wert'."
        },
        {
          "text":
            "Wir definiert die Variable \"\"wert\"\" mit dem Zugriffatributt protected. - (protected int wert)",
          "id": "27",
          "correctionOrComment":
            "Wir definieren die Variable 'wert' mit dem Zugriffsattribut protected ('protected int wert')."
        },
        {
          "text":
            "public class Beispielklasse private int wert; Durch eine getter Methode! und der wert muss private gesetzt sein!",
          "id": "28",
          "correctionOrComment":
            "Durch eine Gettermethode und der Wert muss 'private' gesetzt sein!"
        },
        {
          "text": "indem ich die Klasse ableite mit extends",
          "id": "29",
          "correctionOrComment": "Das geht, indem ich die Klasse ableite mit extends."
        },
        {
          "text": "protected wert;",
          "id": "30",
          "correctionOrComment": "Das geht mit 'protected wert'."
        },
        {
          "text":
            "indem man den \"\"wert\"\" auf private setzt und ihn danach mit getter/setter aufruft. Dadurch kann man nur innerhalb der Beispielklasse den \"\"wert\"\" verändern.",
          "id": "31",
          "correctionOrComment":
            "Das geht, indem man den Wert auf 'private' setzt und ihn danach mit 'Getter' und 'Setter' aufruft. Dadurch kann man nur innerhalb der Beispielklasse den Wert verändern."
        },
        {
          "text":
            "indem man das Feld \"\"wert\"\" als private deglariert. man kann es dann über die getterMethode aufrufen!",
          "id": "32",
          "correctionOrComment":
            "Das geht, indem man das Feld 'wert' als 'private' deklariert. Man kann es dann über die Gettermethode aufrufen!"
        },
        {
          "text":
            "Das Feld wert ist auf private zu setzen. Durch einen getter für wert kann die Variable von außen ausgelesen werden. Das private verhindert jeden Schreibzugriff außer aus der eigenen Klasse.",
          "id": "33",
          "correctionOrComment":
            "Das Feld 'wert' ist auf 'private' zu setzen. Durch einen 'Getter' für 'wert' kann die Variable von außen ausgelesen werden. Das 'private' verhindert jeden Schreibzugriff außer aus der eigenen Klasse."
        },
        {
          "text":
            "Man nimmt sogenannte Schutzattribute zu Hilfe. In dem Beispiel nimmt man nicht public sondern private und protected.",
          "id": "34",
          "correctionOrComment":
            "Man nimmt sogenannte Schutzattribute zur Hilfe. In dem Beispiel nimmt man nicht 'public' sondern 'private' und 'protected'."
        },
        {
          "text":
            "mit der get Methode. Beispielklasse ist auf private gesezt kann aber von außerhalb mit der get Methode gelesen werden",
          "id": "35",
          "correctionOrComment":
            "Das geht mit der Gettermethode. Die Beispielklasse ist auf 'private' gesezt, kann aber von außerhalb mit der Gettermethode gelesen werden."
        },
        {
          "text":
            "Indem man den dazugehörigen getter definiert aber nicht den setter, der das schreiben erlauben würde.",
          "id": "36",
          "correctionOrComment":
            "Indem man den dazugehörigen 'Getter' definiert aber nicht den 'Setter', der das schreiben erlauben würde."
        },
        {
          "text":
            "class Beispielklasse { private int wert; public Beispielklasse (int wert) { this.wert = wert; } public int getWert () { return wert; } private void setWert (int i) { this.wert = i; } } Wennn nur eine private set-Methode für die private Variable wert definiert wird, kann der Wert von wert nicht von außen geändert werden, sondern nur innerhalb der Klasse. Eine public get-Methode ermöglicht jedoch, dass der Wert von überall aus gelesen werden kann.",
          "id": "37",
          "correctionOrComment":
            "Der Wert wird mit 'private int wert' deklariert. Wenn nur eine 'private' set-Methode für die 'private' Variable 'wert' definiert wird, kann der Wert von 'wert' nicht von außen geändert werden, sondern nur innerhalb der Klasse. Eine 'public' get-Methode ermöglicht jedoch, dass der Wert von überall aus gelesen werden kann."
        },
        {
          "text":
            "Es wird nur eine getter- und keine setter-Methode eingefügt. So kann zwar auf die getter-Methode zurückgegriffen und der Wert ausgelesen werden, jedoch kann nicht mithilfe der setter-Methode der Wert verändert werden.",
          "id": "38",
          "correctionOrComment":
            "Es wird nur eine getter- und keine setter-Methode eingefügt. So kann zwar auf die getter-Methode zurückgegriffen und der Wert ausgelesen werden, jedoch kann nicht mithilfe der setter-Methode der Wert verändert werden."
        },
        {
          "text":
            "Das Feld wert muss private und darf nicht final sein, es muss eine get-Methode und es darf keine set-Methode vorliegen.",
          "id": "39",
          "correctionOrComment":
            "Das Feld 'wert' muss 'private' und darf nicht 'final' sein. Ss muss eine get-Methode und es darf keine set-Methode vorliegen."
        },
        {
          "text":
            "wert wird als \"\"private\"\" deklariert. danach wird ein getter gesetzt um wert von überall aus lesbar zu machen.",
          "id": "40",
          "correctionOrComment":
            "'wert' wird als 'private' deklariert. Danach wird ein Getter gesetzt um 'wert' von überall aus lesbar zu machen."
        },
        {
          "text": "-",
          "id": "41",
          "correctionOrComment": "-"
        },
        {
          "text":
            "Falls Wert z.B.: als int. private int wert; public int getWert() { return wert; } //Methode zum Lesen kann von überall aufgerufen werden. private int setWert(int wert) { this.wert = wert;} //methode zum Schreiben kann nur innerhalb der Klasse verwendet werden.",
          "id": "42",
          "correctionOrComment":
            "Das Feld wird als 'private int wert' deklariert. Eine 'public' getter-Methode zum Lesen kann von überall aufgerufen werden. Eine private setter-Methode zum Schreiben kann nur innerhalb der Klasse verwendet werden."
        },
        {
          "text": "mit getter und setter",
          "id": "43",
          "correctionOrComment": "Das geht mit Getter und Setter."
        },
        {
          "text":
            "Feld wert wird mit private deklariert, so ist es nur innerhalb von Beispielklasse lesbar und schreibbar. um es von überall lesen zu können benötigt man noch einer getter methode : public getWert(){ return this.wert; }",
          "id": "44",
          "correctionOrComment":
            "Das Feld 'wert' wird mit 'private' deklariert. So ist es nur innerhalb der Beispielklasse lesbar und schreibbar. Um es von überall lesen zu können benötigt man noch eine getter-Methode."
        },
        {
          "text":
            "In der Beispielklasse die Getter-Methode mit Schutzattribut private schreiben. Die Setter-Methode in der gleichen Klasse mit public schreiben.",
          "id": "45",
          "correctionOrComment":
            "In der Beispielklasse die getter-Methode mit dem Schutzattribut 'private' schreiben. Die setter-Methode in der gleichen Klasse mit 'public' schreiben."
        },
        {
          "text":
            "wert ist schreibgeschutz d.h privarte. wir konnen eine getWert methode machen und dann diese methode von außen aufrufen.",
          "id": "46",
          "correctionOrComment":
            "Das Feld 'wert' ist schreibgeschutz mittels 'private'. Wir konnen eine 'getWert' Methode machen und dann diese Methode von außen aufrufen."
        },
        {
          "text":
            "private int wert --> dadurch ist sie nicht von außen zu ändern. public int getWert(){ return wert; die methode ist public, sodass man den wert von außen lesen kann",
          "id": "47",
          "correctionOrComment":
            "Durch 'private int wert' ist die Variable nicht von außen zu ändern. Man braucht eine 'public' 'getWert' Methode, sodass man den Wert von außen lesen kann."
        },
        {
          "text": "den Feld wert muss protected sein.",
          "id": "48",
          "correctionOrComment": "Das Feld 'wert' muss protected sein."
        },
        {
          "text": "wert final setzen und mit public getWert() für andere lesbar machen",
          "id": "49",
          "correctionOrComment":
            "Man muss 'wert' 'final' setzen und mit 'public' 'getWert()' für andere lesbar machen."
        },
        {
          "text":
            "Zu erst muss das Schutzatribut \"\"private\"\" sein. Dannach kann man mit setter die Variable innerhalb der Klasse schreiben und mit getter überall zu lesen.",
          "id": "50",
          "correctionOrComment":
            "Zuerst muss das Schutzattribut 'private' sein. Danach kann man mit einem Setter die Variable innerhalb der Klasse schreiben und mit einem Getter überall lesen."
        },
        {
          "text": "mit einem Getter und keinem Setter",
          "id": "51",
          "correctionOrComment": "Das geht mit einem Getter und keinem Setter."
        },
        {
          "text":
            "Man will, dass \"\"wert\"\" schreibgeschütz auf andere abgeleitete Klassen ist. Deswegen macht man einen Konstruktoir, womit man in der Basisklasse diese Variable benutzen kann. Außerdem braucht man eine getter-methode, damit sie in anderen Klassen lesbar ist. Da privat vor \"\"wert\"\" gesetzt wird, ist es nun nur lesbar aber abgeleitet Klassen können es nicht überscxhreiben. Esa ist das Prinzip der Kapselung/ Schutz vor Überschreibung.",
          "id": "52",
          "correctionOrComment":
            "Man will, dass 'wert' schreibgeschütz auf andere abgeleitete Klassen ist. Deswegen macht man einen Konstruktoir, womit man in der Basisklasse diese Variable benutzen kann. Außerdem braucht man eine getter-Methode, damit sie in anderen Klassen lesbar ist. Da 'private' vor 'wert' gesetzt wird, ist es nun nur lesbar aber abgeleitet Klassen können es nicht überschreiben. Es ist das Prinzip der Kapselung und dem Schutz vor Überschreibung."
        },
        {
          "text":
            "Ich setzen \"\"wert\"\" private, dadurch ist es nur für die Klassse Beispielklasse schreibbar. Durch eine Getter Methode ist es überall lesbar.",
          "id": "53",
          "correctionOrComment":
            "Ich setze 'wert' 'private'. Dadurch ist es nur für die Klassse Beispielklasse schreibbar. Durch eine getter-Methode ist es überall lesbar."
        },
        {
          "text": "Mit dem Schutzattribut protected",
          "id": "54",
          "correctionOrComment": "Das geht mit dem Schutzattribut 'protected'."
        },
        {
          "text": "protected",
          "id": "55",
          "correctionOrComment": "Das geht mit 'protected'."
        },
        {
          "text":
            "Indem ich wert auf die Sichtbarkeit private lese, aber zusätzlich eine Methode getWert() implementiere (welche public ist). getWert() gibt dann die variable wert zurück (mit return) damit jeder sie auslesen kann.",
          "id": "56",
          "correctionOrComment":
            "Das geht, indem ich 'wert' auf die Sichtbarkeit 'private' setze, aber zusätzlich eine Methode 'getWert()' implementiere, welche 'public' ist. 'getWert()' gibt dann die Variable 'wert' zurück, damit jeder sie auslesen kann."
        }
      ]
    },
    {
      "id": "5",
      "title": "Vererbung - Schnittstellen und abstrakte Klassen",
      "text":
        "Sie möchten eine als 'private' deklarierte Variable und mehrere implementierte Methoden vererben. Verwenden Sie eine Schnittstelle oder eine abstrakte Klasse? Begründen Sie Ihre Antwort.",
      "type": "reason",
      "aspects": [
        {
          "text": "eine abstrakte Klasse"
        },
        {
          "text": "Schnittstellen können keine implementierten Methoden bereitstellen"
        }
      ],
      "referenceAnswers": [{
        "text":
          "Man muss eine abstrakte Klasse verwenden, weil Schnittstellen keine implementierten Methoden bereitstellen können.",
        "aspects": [
          {
            "text": "Man muss eine abstrakte Klasse verwenden",
            "aIdx": 0,
            "elements": [[0, 40]],
            "label": 0
          },
          {
            "text": "weil Schnittstellen keine implementierten Methoden bereitstellen können",
            "aIdx": 1,
            "elements": [[42, 113]],
            "label": 0
          }
        ]
      }],
      "studentAnswers": [
        {
          "text":
            "Abstrakte Klassen Basisklassen vererben nur implemetierte Mehtoden, Schnittstellen stellen keine implementierten Methoden bereit Abstrakte klassen werden durch abstract class deklariert",
          "id": "1",
          "correctionOrComment":
            "Abstrakte Klassen vererben nur implemetierte Mehtoden. Schnittstellen stellen keine implementierten Methoden bereit. Abstrakte klassen werden durch 'abstract class' deklariert."
        },
        {
          "text":
            "Eine abstrakte Klasse, da Schnittstellen keine implemenierte Methoden bereit stellen.",
          "id": "2",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da Schnittstellen keine implemenierte Methoden bereitstellen."
        },
        {
          "text": "Eine Schnittstelle, da abstrakte Klasse keine Methoden weitergeben.",
          "id": "3",
          "correctionOrComment":
            "Man verwendet eine Schnittstelle, da abstrakte Klassen keine Methoden weitergeben."
        },
        {
          "text":
            "Schnittstellen vererben keine implementierten Methoden, doch abstrakte Klassen können, wenn sie vereerbt werden implementierte Methoden vererben. Normalerweise müssen sie immer später implementiert werden.",
          "id": "4",
          "correctionOrComment":
            "Schnittstellen vererben keine implementierten Methoden. Abstrakte Klassen können, wenn sie vereerbt werden, implementierte Methoden vererben. Normalerweise müssen sie immer später implementiert werden."
        },
        {
          "text":
            "Basisklassen vererben nur implementierte Methoden, Schnittstellen stellen keine implementierten Methoden bereit. manche Methoden brauchen eine Implementierung gleichzeitig können manche Methoden in der Basisklasse nicht implementiert sein. eine abstrakte Klasse kann unimplementierte Methoden enthalten markiert durch abstract. dacher würde ich eine abstrakte Kalsse wählen.",
          "id": "5",
          "correctionOrComment":
            "Basisklassen vererben nur implementierte Methoden. Schnittstellen stellen keine implementierten Methoden bereit. Manche Methoden brauchen eine Implementierung. Gleichzeitig können manche Methoden in der Basisklasse nicht implementiert sein. Eine abstrakte Klasse kann unimplementierte Methoden enthalten. Sie wird markiert durch 'abstract'. Daher würde ich eine abstrakte Klasse wählen."
        },
        {
          "text": "-",
          "id": "6",
          "correctionOrComment": "-"
        },
        {
          "text":
            "Abstrakte Klasse: da Schnittstellen keine implementierten Methoden bereitstellen.",
          "id": "7",
          "correctionOrComment":
            "Man verwendet abstrakte Klassen, da Schnittstellen keine implementierten Methoden bereitstellen."
        },
        {
          "text":
            "Abstrakte Klasse da Schnittstellen keine Implementierten Methoden bereit stellen.",
          "id": "8",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da Schnittstellen keine implementierten Methoden bereitstellen."
        },
        {
          "text":
            "ich verwende eine abstrakte Klasse weil aus schnittstelle kann ich keine implementierte Methoden vererben.",
          "id": "9",
          "correctionOrComment":
            "Ich verwende eine abstrakte Klasse, weil ich aus Schnittstellen keine implementierte Methoden vererben kann."
        },
        {
          "text": "eine schnittstelle, weil man die darin enthaltenen methoden vererben kann",
          "id": "10",
          "correctionOrComment":
            "Man verwendet eine Schnittstelle, weil man die darin enthaltenen methoden vererben kann."
        },
        {
          "text":
            "ich verwende eine abstakte Klasse, weil nur in einer abstrakte klasse darf man Variablen deklarieren.",
          "id": "11",
          "correctionOrComment":
            "Ich verwende eine abstakte Klasse, weil man nur in einer abstrakten Klasse Variablen deklarieren darf."
        },
        {
          "text": "",
          "id": "12",
          "correctionOrComment": ""
        },
        {
          "text":
            "eine abstrakte klasse, da in einer schnittstelle die methoden nicht implementiert sein dürfen",
          "id": "13",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da in einer Schnittstelle die Methoden nicht implementiert sein dürfen."
        },
        {
          "text": "abstrakte Klasse. Weil sie private ist und sonst nicht verwendet werden kann.",
          "id": "14",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, weil sie 'private' ist und sonst nicht verwendet werden kann."
        },
        {
          "text":
            "Bereits implementierte Methoden können nicht mit einer abstrakten Klasse vererbt werden. Daher Schnittstelle.",
          "id": "15",
          "correctionOrComment":
            "Bereits implementierte Methoden können nicht mit einer abstrakten Klasse vererbt werden. Daher verwendet man eine Schnittstelle."
        },
        {
          "text": "eine abstrakte Klasse, da Schnittstellen keine Datenfelder zurück geben.",
          "id": "16",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da Schnittstellen keine Datenfelder zurückgeben."
        },
        {
          "text":
            "Da Schnittstellen keine Methoden implementieren und deren private deklarierte Variablen nicht vererbt werden, verwende man eine abstrakte Klasse.",
          "id": "17",
          "correctionOrComment":
            "Da Schnittstellen keine Methoden implementieren und deren private deklarierte Variablen nicht vererbt werden, verwendet man eine abstrakte Klasse."
        },
        {
          "text":
            "Man verwendet eine abstrakte Klasse, da die Schnittstellen nur Konstanten bereitstellen können und die Methoden bei abstrakten Klassen sowohl implementiert, als auch unimplementiert sein können.",
          "id": "18",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da die Schnittstellen nur Konstanten bereitstellen können und die Methoden bei abstrakten Klassen sowohl implementiert, als auch unimplementiert sein können."
        },
        {
          "text": "Eine abstrakte Klasse, da nur diese Datenfelder vererben kann.",
          "id": "19",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da nur diese Datenfelder vererben kann."
        },
        {
          "text":
            "Es sollte eine abstrakte Klasse verwendet werden. Die abstrakte Klasse füllt die Lücke zwischen der Basisklasse und der Schnittstelle. Mit einer Schnittstelle lassen sich außerdem keine Variablen und auch keine implementierte Methoden vererben.",
          "id": "20",
          "correctionOrComment":
            "Es sollte eine abstrakte Klasse verwendet werden. Die abstrakte Klasse füllt die Lücke zwischen der Basisklasse und der Schnittstelle. Mit einer Schnittstelle lassen sich außerdem keine Variablen und auch keine implementierte Methoden vererben."
        },
        {
          "text": "Schnittstelle",
          "id": "21",
          "correctionOrComment": "Man verwendet ein Schnittstelle."
        },
        {
          "text":
            "Man verwendet eine Schnittstelle da abstrakte Klassen unimplementierte methoden enthalten können.",
          "id": "22",
          "correctionOrComment":
            "Man verwendet eine Schnittstelle, da abstrakte Klassen unimplementierte Methoden enthalten können."
        },
        {
          "text":
            "Die Verwendung einer abstrakten Klasse ist hier sinnvoller, da die bereits implementierten Methoden erhalten bleiben sollten, was bei einer Schnittstelle nicht möglich ist.",
          "id": "23",
          "correctionOrComment":
            "Die Verwendung einer abstrakten Klasse ist hier sinnvoller, da die bereits implementierten Methoden erhalten bleiben, was bei einer Schnittstelle nicht möglich ist."
        },
        {
          "text":
            "Ich verwende eine abstrakte Klasse, da man in einer Schnittstelle Methoden nur deklarieren kann und noch nicht implementieren. Außerdem kann man in einer Schnittstelle nur Konstanten verwenden.",
          "id": "24",
          "correctionOrComment":
            "Ich verwende eine abstrakte Klasse, da man in einer Schnittstelle Methoden nur deklarieren kann und noch nicht implementieren. Außerdem kann man in einer Schnittstelle nur Konstanten verwenden."
        },
        {
          "text":
            "eine abstrakte Klasse, da in einer Schnittstelle nur die Methoden deklariert werden und keine variablen.",
          "id": "25",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da in einer Schnittstelle nur die Methoden deklariert werden und keine Variablen."
        },
        {
          "text":
            "Ich verwende eine abstrakte Klasse, da mit dieser problemlos Datenfelder vererbt werden können die nicht konstant sind.",
          "id": "26",
          "correctionOrComment":
            "Ich verwende eine abstrakte Klasse, da mit dieser problemlos Datenfelder vererbt werden können, die nicht konstant sind."
        },
        {
          "text":
            "ich verwende eine abstrakte Klasse, da die abstrakte Klasse Datenfelder bereitstellen kann und Schnittstellen nur konstante. Die Abstrakte Klasse veerbt implementierte Methoden. Schnittstellen stellen keine implementierte Methoden bereit.",
          "id": "27",
          "correctionOrComment":
            "Ich verwende eine abstrakte Klasse, da die abstrakte Klasse Datenfelder bereitstellen kann und Schnittstellen nur Konstanten. Die Abstrakte Klasse vererbt implementierte Methoden. Schnittstellen stellen keine implementierten Methoden bereit."
        },
        {
          "text":
            "Abstrakte Klassen. Diese Klassen sind spezielle Klassen die viele abstrakte Methoden beinhalten. Entweder abgeleitete Klassen müssen abstract sein oder die abstrakte Methoden sind in dem Fall implementiert.",
          "id": "28",
          "correctionOrComment":
            "Man verwendet abstrakte Klassen. Diese Klassen sind spezielle Klassen, die viele abstrakte Methoden beinhalten. Entweder müssen abgeleitete Klassen 'abstract' sein oder die abstrakte Methoden sind in dem Fall implementiert."
        },
        {
          "text": "abstrakte Klasse",
          "id": "29",
          "correctionOrComment": "Man verwendet eine abstrakte Klasse."
        },
        {
          "text":
            "Man ver wendet eine abstrakte Klasse, weil Schnittstellen nur Konstanten breitstellen.",
          "id": "30",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, weil Schnittstellen nur Konstanten breitstellen."
        },
        {
          "text":
            "Eine Klasse kann nur eine Basisklasse haben, aber beliebige Schnittsctellen implementieren. Deshalb Schnittstelle.",
          "id": "31",
          "correctionOrComment":
            "Eine Klasse kann nur eine Basisklasse haben, aber beliebige Schnittstellen implementieren. Deshalb verwendet man eine Schnittstelle."
        },
        {
          "text":
            "eine anstrakte Klassse denn abtrakte Klassen können implementiere Methoden enthalten und wenn eine abtrakte Klasse abgeleitet wird, müssen die abtrakt markierten Methoden implementiert werden. um eine private deklarierte Variable zu vererben braucht man auf jeden fall getter und setter. Deshalb verwendet man eine abtrakte Klasse",
          "id": "32",
          "correctionOrComment":
            "Man verwendet eine anstrakte Klassse, denn abtrakte Klassen können implementiere Methoden enthalten und wenn eine abtrakte Klasse abgeleitet wird, müssen die abtrakt markierten Methoden implementiert werden. Um eine 'private' deklarierte Variable zu vererben braucht man auf jeden fall Getter und Setter. Deshalb verwendet man eine abtrakte Klasse."
        },
        {
          "text":
            "eine abstrakte weil die basis klassen können datenfelder bereitstellen aber die schnittstellen nur konstanten Baisklassen vererben nur implementierte methoden. PS man kann keine konkrete objekte erzeugen.",
          "id": "33",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, weil die Basisklassen Datenfelder bereitstellen können Schnittstellen aber  nur Konstanten. Baisklassen vererben nur implementierte Methoden."
        },
        {
          "text":
            "Ich verwende eine abstrakte Klasse: Impl. Methoden können verwendet werden. Bei Schnittstellen können Methoden nicht Impl.",
          "id": "34",
          "correctionOrComment":
            "Ich verwende eine abstrakte Klasse, weil dort implementierte Methoden verwendet werden können. Bei Schnittstellen können Methoden nicht implementiert vererbt werden."
        },
        {
          "text":
            "mit Schnittstelle werden wir \"\"Implement\"\"benutzen ,weil die schnittstelle alle benötige Informationen beihaltet. Mit Abstrakte Klassen auf grund der kapselung von Intanzen.",
          "id": "35",
          "correctionOrComment":
            "Wir werden Schnittstellen mit 'implements' benutzen, weil die Schnittstelle alle benötigten Informationen beinhaltet."
        },
        {
          "text":
            "Ich verwende eine abstrakte Klasse, da diese implementierte Methoden enthalten darf und private Variablen erlaubt sind. Selbst wenn manche Methoden mit abstract gekennzeichnet sind, ist es erlaubt, die abstrakte Klasse zu vererben, wenn alle mit abstact gekennzeichneten Methoden implementiert sind. Wenn es eine abstrakte Methode gibt, die nicht implementiert ist, muss die abgeleitete Klasse auch abstract sein, was in diesem Fall aber nicht so ist.",
          "id": "36",
          "correctionOrComment":
            "Ich verwende eine abstrakte Klasse, da diese implementierte Methoden enthalten darf und 'private' Variablen erlaubt sind. Selbst wenn manche Methoden mit 'abstract' gekennzeichnet sind, ist es erlaubt die abstrakte Klasse zu vererben, wenn alle mit 'abstract' gekennzeichneten Methoden implementiert sind. Wenn es eine abstrakte Methode gibt, die nicht implementiert ist, muss die abgeleitete Klasse auch 'abstract' sein, was in diesem Fall aber nicht so ist."
        },
        {
          "text":
            "ich verwende eine Abstrakte klasse, da ich ich Methoden Implementieren will und eine schnittstelle keine Implementierung erlaubt und die private variable ist auch ein hinweis darauf, da man auf sie mit einem Getter zugreifen muss",
          "id": "37",
          "correctionOrComment":
            "Ich verwende eine abstrakte Klasse, da ich Methoden implementieren will und eine Schnittstelle keine Implementierung erlaubt. Die 'private' Variable ist auch ein Hinweis darauf, dass man auf sie mit einem Getter zugreifen muss."
        },
        {
          "text":
            "Man verwendet dafür eine abstrakte Klasse. Da abstrakte Klassen nicht nur Mehtoden implementiern können sondern auch Datenfelder.",
          "id": "38",
          "correctionOrComment":
            "Man verwendet dafür eine abstrakte Klasse, da abstrakte Klassen nicht nur Mehtoden implementiern können sondern auch Datenfelder."
        },
        {
          "text":
            "Man verwendet eine abstrakte Klasse, da Schnittstellen keine implementierte Methoden bereitstellen.",
          "id": "39",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da Schnittstellen keine implementierten Methoden bereitstellen."
        },
        {
          "text":
            "eine abstrakte Klasse da Schnittstellen eher für das implementieren für Methoden zuständig sind.",
          "id": "40",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da Schnittstellen eher für das implementieren von Methoden zuständig sind."
        },
        {
          "text":
            "Man nimmt eine abstrakte Klasse, da Schnittstellen nur Konstanten vererben können.",
          "id": "41",
          "correctionOrComment":
            "Man nimmt eine abstrakte Klasse, da Schnittstellen nur Konstanten vererben können."
        },
        {
          "text": "Eine Schnittstelle, bei einer abstrakten Klasse darf man nicht inistanzieieren.",
          "id": "42",
          "correctionOrComment":
            "Man verwendet eine Schnittstelle, weil man bei einer abstrakten Klasse nicht instanziieren darf."
        },
        {
          "text":
            "Eine abstrakte Klasse, da Methoden in einer Schnittstelle nicht implementiert sein dürfen.",
          "id": "43",
          "correctionOrComment":
            "Man nimmt eine abstrakte Klasse, da Methoden in einer Schnittstelle nicht implementiert sein dürfen."
        },
        {
          "text":
            "Abstrakte Klassen, denn sie können bereits implementierte Methoden beinhalten, Schnittstellen sind nicht implementiert.",
          "id": "44",
          "correctionOrComment":
            "Man verwendet abstrakte Klassen, denn sie können bereits implementierte Methoden beinhalten. Methoden in Schnittstellen sind nicht implementiert."
        },
        {
          "text": "-",
          "id": "45",
          "correctionOrComment": "-"
        },
        {
          "text": "-",
          "id": "46",
          "correctionOrComment": "-"
        },
        {
          "text": "eine abstrakte klasse weil es um merere methoden geht die private seien sollen",
          "id": "47",
          "correctionOrComment":
            "Man nimmt eine abstrakte Klasse, weil es um mehrere Methoden geht die 'private' seien sollen."
        },
        {
          "text": "Schnittstelle",
          "id": "48",
          "correctionOrComment": "Man nimmt eine Schnittstelle."
        },
        {
          "text":
            "Eine Abstrakte Klasse, weil diese auch auf private deklarierte Variable und Methoden zugreifen kann.",
          "id": "49",
          "correctionOrComment":
            "Man nimmt eine abstrakte Klasse, weil diese auch auf 'private' deklarierte Variablen und Methoden zugreifen kann."
        },
        {
          "text":
            "Man verwendet eine abstrakte Klasse, da Schnittstellen keine implementierte Methoden zur Verfügung stellen.",
          "id": "50",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da Schnittstellen keine implementierten Methoden zur Verfügung stellen."
        },
        {
          "text": "-",
          "id": "51",
          "correctionOrComment": "-"
        },
        {
          "text": "eine abstrakte Klasse weil die Unterklassen von ihr erben.",
          "id": "52",
          "correctionOrComment":
            "Man nimmt eine abstrakte Klasse, weil die Unterklassen von ihr erben."
        },
        {
          "text": "Ich würde eine Schnittstelle benutzen.",
          "id": "53",
          "correctionOrComment": "Ich würde eine Schnittstelle benutzen."
        },
        {
          "text":
            "eine Abstrakte, da bei der Schnittstelle man ,nach der Vererbung, die Methoden noch implementieren muss.",
          "id": "54",
          "correctionOrComment":
            "Man nimmt eine abstrakte Klasse, da man bei der Schnittstelle die Methoden nach der Vererbung noch implementieren muss."
        },
        {
          "text": "Eine abstrake Klasse da die Methoden implementiert sein sollen.",
          "id": "55",
          "correctionOrComment": "Eine abstrake Klasse, da die Methoden implementiert sein sollen."
        },
        {
          "text":
            "Abstrakte Klasse: die privat deklarierte Variable ist nur in einer Klasse sichtbar.",
          "id": "56",
          "correctionOrComment":
            "Man nimmt eine abstrakte Klasse, da die privat deklarierte Variable nur in einer Klasse sichtbar ist."
        }
      ]
    },
    {
      "id": "13",
      "text": "Erklären Sie den Zusammenhang zwischen Klassen und Objekten.",
      "title": "Zusammenhang zwischen Klassen und Objekten",
      "type": "comparison",
      "aspects": [
        {
          "text": "Eine Klasse ist der Bauplan für ein Objekt"
        },
        {
          "text": "Ein Objekt ist eine konkrete Instanz einer Klasse"
        }
      ],
      "referenceAnswers": [{
        "text":
          "Eine Klasse ist der Bauplan für ein Objekt. Ein Objekt ist eine konkrete Instanz einer Klasse.",
        "aspects": [
          {
            "text": "Eine Klasse ist der Bauplan für ein Objekt",
            "aIdx": 0,
            "elements": [[0, 42]],
            "label": 0
          },
          {
            "text": "Ein Objekt ist eine konkrete Instanz einer Klasse",
            "aIdx": 1,
            "elements": [[44, 93]],
            "label": 0
          }
        ]
      }],
      "studentAnswers": [
        {
          "text":
            "Alle Objekte haben einen Bauplan und dieser Bauplan des Objektes ist die klasse. Objekte haben den Typ ihrer Klasse. Die Klasse eines Objekte ist wie bei uns Menschen die DNA. Die Klasse bestimmt Aussehen und Eigenschaften. Aber ist selber nicht das Objekt.",
          "id": "61",
          "correctionOrComment":
            "Alle Objekte haben einen Bauplan und dieser Bauplan des Objektes ist die Klasse. Objekte haben den Typ ihrer Klasse. Die Klasse eines Objekte ist wie bei uns Menschen die DNA. Die Klasse bestimmt Aussehen und Eigenschaften, aber ist selber nicht das Objekt."
        },
        {
          "text":
            "alle objekte entstehen durch einen Bauplan. Dieser Bauplan ist die Klasse des Objektes, das Objekt ist eine Instanz der Klasse. Objekte haben ihren typ in der klasse. Die Klasseeines objektes ist für das objekt ca das selbe wie die DNA für den menschen. -sie bestimmt aussehen und eigenschaft. ist aber selbst nicht das Objekt.",
          "id": "62",
          "correctionOrComment":
            "Alle Objekte entstehen durch einen Bauplan. Dieser Bauplan ist die Klasse des Objektes. Das Objekt ist eine Instanz der Klasse. Objekte haben ihren Typ in der Klasse. Die Klasse eines Objektes ist für das Objekt ungefähr dasselbe, wie die DNA für den Menschen. Sie bestimmt Aussehen und Eigenschaften sind aber nicht selbst das Objekt."
        },
        {
          "text":
            "objekt ist zum bsp ein bauplan und der Bauplan wäre in dem fall eine Klasse. Klassen sind bestimmte themen berreiche bsp auch Autos und objekt wäre in dem fall ein",
          "id": "63",
          "correctionOrComment":
            "Ein Objekt ist zum Beispiel ein Bauplan und der Bauplan wäre in dem Fall eine Klasse. Klassen sind bestimmte Themenbereiche."
        },
        {
          "text":
            "Die Klassen sind der Bauplan von Objekten. Objekte kann man sich selber zulegen indem man sie mit \"\"new\"\" neu definiert.",
          "id": "64",
          "correctionOrComment":
            "Die Klassen sind der Bauplan von Objekten. Objekte kann man sich selber zulegen, indem man sie mit 'new' neu definiert."
        },
        {
          "text":
            "Die Klasse ist der Bauplan für das Objekt, heißt das Objekt ist eine Instanz der Klasse. In der Klasse wird das Gerüst aufgebaut auf das sich das Objekt bezieht und hier die Fähigkeiten definiert werden bzw. Objekte haben den Typ ihrer Klasse",
          "id": "65",
          "correctionOrComment":
            "Die Klasse ist der Bauplan für das Objekt. Das heißt, das Objekt ist eine Instanz der Klasse. In der Klasse wird das Gerüst aufgebaut auf das sich das Objekt bezieht und die Fähigkeiten werden definiert. Objekte haben den Typ ihrer Klasse."
        },
        {
          "text":
            "Objekt wird durch seine Klasse definiert. Die Klasse ist der Bauplan für das Objekt. Bauplan = Klasse des Objektes und Objekt = Instanz der Klasse. Objekte haben die Typen der Klasse Code der klasse legt die Eigenschaften der Objekte fest",
          "id": "66",
          "correctionOrComment":
            "Ein Objekt wird durch seine Klasse definiert. Die Klasse ist der Bauplan für das Objekt. Der Bauplan ist die Klasse des Objektes und das Objekt ist die Instanz der Klasse. Objekte haben die Typen der Klasse. Der Code der Klasse legt die Eigenschaften der Objekte fest."
        },
        {
          "text":
            "Die Klasse eines Objektes ist für das Objekt wie die DNA für den Menschen: Klasse bestimmt aussehen und Eigenschaften aber ist nicht selbst das Objekt. Objekte entstehen durch eine Art Bauplan. Der Bauplan ist die Klasse eines Objekts",
          "id": "67",
          "correctionOrComment":
            "Die Klasse eines Objektes ist für das Objekt wie die DNA für den Menschen. Die Klasse bestimmt Aussehen und Eigenschaften aber ist nicht selbst das Objekt. Objekte entstehen durch eine Art Bauplan. Der Bauplan ist die Klasse eines Objekts."
        },
        {
          "text": "Klassen sind der Bauplan von Objekten. Objekte entstehen mit new.",
          "id": "68",
          "correctionOrComment":
            "Klassen sind der Bauplan von Objekten. Objekte entstehen mit 'new'."
        },
        {
          "text":
            "Die Klasse des Objektes ist für das Objekt in etwa wie die DNA beim Menschen. Sie bestimmt Aussehen und Eigenschaften des Objekts, aber die Klasse ist nicht das Objekt selbst, von jeder Klasse kann auch ein Objekt erstellt werden.",
          "id": "69",
          "correctionOrComment":
            "Die Klasse des Objektes ist für das Objekt in etwa wie die DNA beim Menschen. Sie bestimmt Aussehen und Eigenschaften des Objekts, aber die Klasse ist nicht das Objekt selbst. Von jeder Klasse kann auch ein Objekt erstellt werden."
        },
        {
          "text":
            "Eine Klasse ist wie eine Art Bauplan für den Objekt . Ein Objekt ist ein Instanz der Klasse und enthält die Element wie in der Klasse",
          "id": "70",
          "correctionOrComment":
            "Eine Klasse ist wie eine Art Bauplan für ein Objekt . Ein Objekt ist eine Instanz der Klasse und enthält die Elemente wie in der Klasse."
        },
        {
          "text":
            "eine klasee ist wie baustein fuer die objektealle Faehigkeiten des objektes werden durch die Klasse definiert.",
          "id": "71",
          "correctionOrComment":
            "Eine Klasse ist wie ein Baustein für die Objekte. Alle Fähigkeiten des Objektes werden durch die Klasse definiert."
        },
        {
          "text":
            "Alle Objekte entstehen durch einen Bauplan Dieser Bauplan ist die Klasse des Objektes, das Objekt ist eine Instanz der Klasse. Objekte haben den Typ ihrer Klasse Die Klasse eines Objektes ist für das Objekt in etwa dasselbe wie die DNA für den Menschen Sie besto,,t aussehen und eigenschaften ABER SIE selbst ist nicht das objekt",
          "id": "72",
          "correctionOrComment":
            "Alle Objekte entstehen durch einen Bauplan. Dieser Bauplan ist die Klasse des Objektes. Das Objekt ist eine Instanz der Klasse. Objekte haben den Typ ihrer Klasse. Die Klasse eines Objektes ist für das Objekt in etwa dasselbe wie die DNA für den Menschen. Sie bestimmt aussehen und Eigenschaften, aber sie selbst ist nicht das Objekt."
        },
        {
          "text":
            "Die Klasse ist übergeordnet. zum beispiel ist ein objekt eine instanz 7 eine eigenschaft der klasse.",
          "id": "73",
          "correctionOrComment":
            "Die Klasse ist übergeordnet. Ein Objekt ist zum Beispiel eine Instanz. 7 ist eine Eigenschaft der Klasse."
        },
        {
          "text":
            "In der Klasse wird der Code generiert und koppelt die Daten und die Funktion im Objekt. Somit ist die Klasse der Bauplan vom Objekt.",
          "id": "74",
          "correctionOrComment":
            "In der Klasse wird der Code generiert und koppelt die Daten und die Funktionen im Objekt. Somit ist die Klasse der Bauplan vom Objekt."
        },
        {
          "text":
            "Eine Klasse ist ein Bauplan für dessen Objekte. Über den Klassennamen wird das Objekt instanziiert, z.B. Auto auto = new Auto() SEMICOLON Innerhalb der runden Klammern kann man nun, sofern im Konstruktor der Klasse Auto angelegt, schon Attribute übergeben, z.B. Auto auto = new Auto(\"\"Ferrari\"\") SEMICOLON Die Klasse legt also die Eigenschaften eines Objektes fest. (Bei Frage 2 wusste ich nicht ob auf oder absteigend, da die Zeilennummern anders herum da stehen. Ich habe in Zeile 3 den ersten Schritt geschrieben, Zeile 2 den zweiten und Zeile 1 den letzten)",
          "id": "75",
          "correctionOrComment":
            "Eine Klasse ist ein Bauplan für dessen Objekte. Über den Klassennamen wird das Objekt instanziiert. Innerhalb der runden Klammern kann man nun sofern im Konstruktor der Klasse angelegt, schon Attribute übergeben. Die Klasse legt also die Eigenschaften eines Objektes fest."
        },
        {
          "text":
            "Klasse ist der Bauplan für ein Objekt. Das Objekt ist eine Instanz. Die Klasse enthält die wichtigsten \"\"Oberbegriffe\"\" für ein Objekt. Damit kann man viele Klassen anlegen und diese in einer Main-Methode zusammenfügen.",
          "id": "76",
          "correctionOrComment":
            "Die Klasse ist der Bauplan für ein Objekt. Das Objekt ist eine Instanz. Die Klasse enthält die wichtigsten Oberbegriffe für ein Objekt. Damit kann man viele Klassen anlegen und diese in einer 'main' Methode zusammenfügen."
        },
        {
          "text":
            "Die Klasse ist der Bauplan des Objektes. Sie enthält die Attribute/Eigenschaften des Objektes. Ein Beispiel in der realen Welt für eine Klasse wäre die DNA des Objektes Mensch.",
          "id": "77",
          "correctionOrComment":
            "Die Klasse ist der Bauplan des Objektes. Sie enthält die Attribute und Eigenschaften des Objektes. Ein Beispiel in der realen Welt für eine Klasse wäre die DNA des Objektes Mensch."
        },
        {
          "text":
            "Eine Klasse kann in mehreren Objekten sein, andersrum jedoch nicht.Verschiedene Klassen ergeben/definieren ein Objekt.",
          "id": "78",
          "correctionOrComment":
            "Eine Klasse kann in mehreren Objekten sein, andersrum jedoch nicht. Verschiedene Klassen ergeben und definieren ein Objekt."
        },
        {
          "text":
            "Klassen bilden eine Anleitung für Objekte. Ein Objekt ist eine Instanz einer Klasse. Eine Klasse beschreibt die Methoden die auf ein Objekt angewendet werden können.",
          "id": "79",
          "correctionOrComment":
            "Klassen bilden eine Anleitung für Objekte. Ein Objekt ist eine Instanz einer Klasse. Eine Klasse beschreibt die Methoden, die auf ein Objekt angewendet werden können."
        },
        {
          "text": "Die Klasse eines Objektes ist wie die DNA eines Menschen.",
          "id": "80",
          "correctionOrComment": "Die Klasse eines Objektes ist wie die DNA eines Menschen."
        },
        {
          "text": "Der Code einer Klasse legt die Eigenschaft der Objekte fest",
          "id": "81",
          "correctionOrComment": "Der Code einer Klasse legt die Eigenschaft der Objekte fest."
        },
        {
          "text":
            "Klassen sind der Bauplan von Objekten. In Klassen werden die Attribute von Objekten beschrieben",
          "id": "82",
          "correctionOrComment":
            "Klassen sind der Bauplan von Objekten. In Klassen werden die Attribute von Objekten beschrieben."
        },
        {
          "text":
            "Die Objekte sind Baupläne für das Programm. Die Klassen beinhalten diese Objekte und verwenden sie.",
          "id": "83",
          "correctionOrComment":
            "Die Objekte sind Baupläne für das Programm. Die Klassen beinhalten diese Objekte und verwenden sie."
        },
        {
          "text":
            "Die Klasse ist der \"\"Plan\"\" für das Projekt, dort steht was mit den erstellten Projekten \"\"gemacht\"\" wird. Das heißt Sie beinhalten die Objekte und verwenden sie. Die Objekte werden erzeugt, um für eine Art mehrere Eigenschaften zu speichern, die dann in der Klasse aufgerufen werden können.",
          "id": "84",
          "correctionOrComment":
            "Die Klasse ist der Plan für das Projekt. Dort steht was mit den erstellten Projekten gemacht wird. Das heißt, sie beinhalten die Objekte und verwenden sie. Die Objekte werden erzeugt, um für eine Art mehrere Eigenschaften zu speichern, die dann in der Klasse aufgerufen werden können."
        },
        {
          "text":
            "Objekte sind Baupläne für das Programm. Die Klassen sind deren Inhalte und werden von Objekten verwendet",
          "id": "85",
          "correctionOrComment":
            "Objekte sind Baupläne für das Programm. Die Klassen sind deren Inhalte und werden von Objekten verwendet."
        },
        {
          "text": "Klassen sind vordefinierte Objekte",
          "id": "86",
          "correctionOrComment": "Klassen sind vordefinierte Objekte."
        },
        {
          "text":
            "Objekte haben den typ ihrer klasse alle Objekte haben einen Bauplan dieser Bauplan ist die klasse des objektes das objekt ist das Instanz einer klasse",
          "id": "87",
          "correctionOrComment":
            "Objekte haben den Typ ihrer Klasse. Alle Objekte haben einen Bauplan. Dieser Bauplan ist die Klasse des Objektes. Das Objekt ist die Instanz einer Klasse."
        },
        {
          "text":
            "Die Klasse ist das Bauplan für das Objekt. Objekt ist das instanz der Klasse . Klasse bestimmt Eigenschaften des Objekts aber sie ist nicht das Objekt.",
          "id": "88",
          "correctionOrComment":
            "Die Klasse ist der Bauplan für das Objekt. Das Objekt ist die Instanz der Klasse. Eine Klasse bestimmt die Eigenschaften des Objekts, aber sie ist nicht das Objekt."
        },
        {
          "text":
            "Klasse ist ein Bauplan für Objekt Klasse definiert den Typ des Objektes Objekt ist ein Ausprägung",
          "id": "89",
          "correctionOrComment":
            "Die Klasse ist ein Bauplan für das Objekt. Eine Klasse definiert den Typ des Objektes. Das Objekt ist ein Ausprägung."
        },
        {
          "text":
            "Objekte werden von Klassen definiert. Eine Klasse beschreibt die Variablen, Eigenschaften .... eines Objekts. Objekte sind Instanzen von Klassen. Die klasse wird zu Verwendung von Objekten erstellt, daher sind Objekten Plätzchen.",
          "id": "90",
          "correctionOrComment":
            "Objekte werden von Klassen definiert. Eine Klasse beschreibt die Variablen und Eigenschaften eines Objekts. Objekte sind Instanzen von Klassen. Die Klasse wird zur Verwendung von Objekten erstellt."
        },
        {
          "text":
            "Die Klasse ist der \"\"Bauplan\"\" für das Objekt, sie definiert u.a. die Fähigkeiten des Objekts und regelt den Zugriff auf das Objekt",
          "id": "91",
          "correctionOrComment":
            "Die Klasse ist der Bauplan für das Objekt. Sie definiert unter anderem die Fähigkeiten des Objekts und regelt den Zugriff auf das Objekt."
        },
        {
          "text": "-",
          "id": "92",
          "correctionOrComment": "-"
        }
      ]
    },
    {
      "id": "14",
      "text": "Was unterscheidet in JAVA Klassenvariablen von Instanzvariablen?",
      "title": "Klassen- und Instanzvariable",
      "type": "comparison",
      "aspects": [
        {
          "text": "Klassenvariablen existieren einmal pro Klasse"
        },
        {
          "text": "Klassenvariablen existieren auch ohne eine konkrete Instanz"
        },
        {
          "text": "Instanzvariable existiert einmal pro Objekt"
        }
      ],
      "referenceAnswers": [{
        "text":
          "Klassenvariablen existieren einmal pro Klasse, auch ohne eine konkrete Instanz. Instanzvariable existiert einmal pro Objekt.",
        "aspects": [
          {
            "text": "Klassenvariablen existieren einmal pro Klasse",
            "aIdx": 0,
            "elements": [[0, 45]],
            "label": 0
          },
          {
            "text": "Klassenvariablen existieren ;; auch ohne eine konkrete Instanz",
            "aIdx": 1,
            "elements": [[0, 37], [47, 78]],
            "label": 0
          },
          {
            "text": "Instanzvariable existiert einmal pro Objekt",
            "aIdx": 2,
            "elements": [[80, 123]],
            "label": 0
          }
        ]
      }],
      "studentAnswers": [
        {
          "text":
            "Klassenvariable ist für die ganze klasse bestimmte variable und die Instanzvariable ist für den jeweiligen Bereich.",
          "id": "93",
          "correctionOrComment":
            "Eine Klassenvariable ist eine für die ganze Klasse bestimmte Variable und die Instanzvariable ist für den jeweiligen Bereich gedacht."
        },
        {
          "text":
            "klassenvariablen sind in der klasse sichtbar und Instanzvariablen sind in dem Konstruktor in Parameterleiste",
          "id": "94",
          "correctionOrComment":
            "Klassenvariablen sind in der Klasse sichtbar und Instanzvariablen sind in dem Konstruktor in der Parameterliste."
        },
        {
          "text": "-",
          "id": "95",
          "correctionOrComment": "-"
        },
        {
          "text": "öffentlich",
          "id": "96",
          "correctionOrComment": "öffentlich"
        },
        {
          "text": "Klassenvariable ist mit static und eine instanzvariable ist ohne static",
          "id": "97",
          "correctionOrComment":
            "Eine Klassenvariable wird mit 'static' definiert und eine instanzvariable ohne 'static'."
        },
        {
          "text":
            "Klassenvariablen sind für die gesamte Klasse angelegt, Instatzvariablen für das Objekt das welches erzeugt wird",
          "id": "98",
          "correctionOrComment":
            "Klassenvariablen sind für die gesamte Klasse angelegt und Instanzvariablen nur für das Objekt, welches erzeugt wird."
        },
        {
          "text":
            "klassenvariablen sind innerhald einer klasse deklariert und in der ganzen klasse sichtbar und instanzvarialblen sind in einer methode deklariert und nur in dieser methode sichtbar",
          "id": "99",
          "correctionOrComment":
            "Klassenvariablen sind innerhalb einer Klasse deklariert und in der ganzen Klasse sichtbar. Instanzvarialblen sind in einer Methode deklariert und nur in dieser Methode sichtbar."
        },
        {
          "text": "-",
          "id": "100",
          "correctionOrComment": "-"
        },
        {
          "text": "Klassenvariable nur in der Klasse, Instanzvariablen in mehreren Klassen",
          "id": "101",
          "correctionOrComment":
            "Eine Klassenvariable gibt es nur in der Klasse und Instanzvariablen in mehreren Klassen."
        },
        {
          "text": "-",
          "id": "102",
          "correctionOrComment": "-"
        },
        {
          "text": "klassenvariablen sind public und instanzvariablen private",
          "id": "103",
          "correctionOrComment": "Klassenvariablen sind 'public' und Instanzvariablen 'private'."
        },
        {
          "text":
            "Klassenvariablen definieren eine Klasse , Instanzvariablen definieren eine Methode",
          "id": "104",
          "correctionOrComment":
            "Klassenvariablen definieren eine Klasse und Instanzvariablen definieren eine Methode."
        },
        {
          "text":
            "Klassenvariablen werden nur innerhalb der Klasse ohne modifikatoren sichtbar und benutzbar. Instanzvariablen können in mehrere Klassen benutzt werden.",
          "id": "105",
          "correctionOrComment":
            "Klassenvariablen werden nur innerhalb der Klasse ohne Modifikatoren sichtbar und benutzbar. Instanzvariablen können in mehrere Klassen benutzt werden."
        },
        {
          "text":
            "Instanzvariablen gehören zu den Objekt und statischen Variablen gehören zu der Klasse und nicht zu einzelne Objekt",
          "id": "106",
          "correctionOrComment":
            "Instanzvariablen gehören zu den Objekten und statische Variablen gehören zu der Klasse und nicht zum einzelnen Objekt."
        },
        {
          "text": "this",
          "id": "107",
          "correctionOrComment": "this"
        },
        {
          "text": "instanz variable sind normale strings. klassen variablen haben ein public oder",
          "id": "108",
          "correctionOrComment":
            "Instanzvariablen sind normale 'Strings'. Klassenvariablen haben ein 'public'."
        },
        {
          "text":
            "die Klassenvariablen sind für die ganze Klasse zugreifbar, instanzvariablen nur für die Objekten.",
          "id": "109",
          "correctionOrComment":
            "Die Klassenvariablen sind für die ganze Klasse zugreifbar, Instanzvariablen nur für die Objekte."
        },
        {
          "text": "Klassenvariablen sind nur innerhalb der Klasse sichtbar, Instanzvariablen nicht",
          "id": "110",
          "correctionOrComment":
            "Klassenvariablen sind nur innerhalb der Klasse sichtbar, Instanzvariablen nicht."
        },
        {
          "text":
            "Eine Java Klassen Variable beschreibt eine Variable, welche nur innerhalb einer Klasse gültig ist. DIe Instanzvariable gilt für ein Objekt einer Klasse.",
          "id": "111",
          "correctionOrComment":
            "Eine Java Klassenvariable beschreibt eine Variable, welche nur innerhalb einer Klasse gültig ist. DIe Instanzvariable gilt für ein Objekt einer Klasse."
        },
        {
          "text":
            "Die Instanzvariable x wird innerhalb des Konstruktors durch den Parameter x verdeckt, daher erfolgt im ersten Konstruktor der Zugriff auf die Instanzvariable durch this.x",
          "id": "112",
          "correctionOrComment":
            "Die Instanzvariable 'x' wird innerhalb des Konstruktors durch den Parameter 'x' verdeckt. Daher erfolgt im ersten Konstruktor der Zugriff auf die Instanzvariable durch 'this.x'."
        },
        {
          "text":
            "Bei Klassenvariablen ist die definition in einer Klasse mit der schlüsselwort static, aber bei Instanzvariablen ohne der schlüsselwort static",
          "id": "113",
          "correctionOrComment":
            "Bei Klassenvariablen erfolg die Definition in einer Klasse mit dem Schlüsselwort 'static', aber bei Instanzvariablen ohne das Schlüsselwort 'static'."
        },
        {
          "text":
            "Klassenvariablen sind in der Klasse sichtbar, während Instanzvariablen Objekte der Klasse sind",
          "id": "114",
          "correctionOrComment":
            "Klassenvariablen sind in der Klasse sichtbar, während Instanzvariablen Objekte der Klasse sind."
        },
        {
          "text":
            "Instanzen werden immer mit \"\"new Text ()\"\" definiert. Und Klassenvariablen werden mit \"\"Text ()\"\" aufgerufen",
          "id": "115",
          "correctionOrComment":
            "Instanzen werden immer mit 'new' definiert und Klassenvariablen werden mit 'Text ()' aufgerufen."
        },
        {
          "text":
            "Klassenvariablen definieren eine Klasse und Instanzvariablen sind die in einer Klasse definiert",
          "id": "116",
          "correctionOrComment":
            "Klassenvariablen definieren eine Klasse und Instanzvariablen sind in einer Klasse definiert."
        },
        {
          "text":
            "Intanzvariablen können für jedes Objekt unterschiedlich sein, Klassenvariablen sind für jedes Objekt gleich.",
          "id": "117",
          "correctionOrComment":
            "Intanzvariablen können für jedes Objekt unterschiedlich sein, Klassenvariablen sind für jedes Objekt gleich."
        },
        {
          "text":
            "Klassenvariablen sind mit static und innerhalb der ganzen Klasse sichtbar. Instanzvariablen nur innerhalb der Methode.",
          "id": "118",
          "correctionOrComment":
            "Klassenvariablen sind mit 'static' und innerhalb der ganzen Klasse sichtbar, Instanzvariablen nur innerhalb der Methode."
        },
        {
          "text":
            "Klassenvariablen sind nicht initialisert (Bauplan-Variablen). Instanzvariablen sind die Attribute eines Objekts. Klassenvariablen werden somit zu Instanzvariablen",
          "id": "119",
          "correctionOrComment":
            "Klassenvariablen sind nicht initialisert. Instanzvariablen sind die Attribute eines Objekts. Klassenvariablen werden somit zu Instanzvariablen"
        },
        {
          "text": "-",
          "id": "120",
          "correctionOrComment": "-"
        },
        {
          "text": "klassenvariablen sind public und instanzvariablen sind private",
          "id": "121",
          "correctionOrComment":
            "Klassenvariablen sind 'public' und Instanzvariablen sind 'private'."
        },
        {
          "text":
            "Instanzvariablen sind auch in anderen Klassen sichtbar. Klassenvariablen nur in der eigenen Klasse.",
          "id": "122",
          "correctionOrComment":
            "Instanzvariablen sind auch in anderen Klassen sichtbar. Klassenvariablen nur in der eigenen Klasse."
        },
        {
          "text":
            "Instanzvariablen sind bereits initialisiert. Instanzvariablen gehören zu einem spObjekt. Bei Klassenvariablen muss dies nich der Fall sein.",
          "id": "123",
          "correctionOrComment":
            "Instanzvariablen sind bereits initialisiert. Instanzvariablen gehören zu einem Objekt. Bei Klassenvariablen muss dies nicht der Fall sein."
        },
        {
          "text":
            "Die beiden unterscheiden sich durch \"\"this\"\". Insatanzvariablen werden durch \"\"this\"\" definiert.",
          "id": "124",
          "correctionOrComment":
            "Die beiden unterscheiden sich durch 'this'. Insatanzvariablen werden durch 'this' definiert."
        },
        {
          "text":
            "Klassenvariablen nur in der eigenen Klasse genutzt, Instanzvariable in mehrern Klassen.",
          "id": "125",
          "correctionOrComment":
            "Klassenvariablen werden nur in der eigenen Klasse genutzt, Instanzvariablen in mehreren Klassen."
        },
        {
          "text":
            "Instanzvariablen werden den Objekten übergeben und gehören den Objekten. Die Klassenvariablen gehören der ganzen Klasse",
          "id": "126",
          "correctionOrComment":
            "Instanzvariablen werden den Objekten übergeben und gehören den Objekten. Die Klassenvariablen gehören der ganzen Klasse."
        },
        {
          "text":
            "Jedes object hat seine eigene Instanzvariable unabhängig von anderen Objekten die von der selben klasse codiert wurden. klassenvariablen sind an die eigenen Klassen gebunden, die Objekte sehen die selben klassenvariablen",
          "id": "127",
          "correctionOrComment":
            "Jedes Objekt hat seine eigene Instanzvariable unabhängig von anderen Objekten, die von derselben Klasse codiert wurden. Klassenvariablen sind an die eigenen Klassen gebunden. Die Objekte sehen die selben Klassenvariablen."
        },
        {
          "text":
            "Instanzvariablen sind in einer Klasse definiert und man kann durch get und set zugreifen",
          "id": "128",
          "correctionOrComment":
            "Instanzvariablen sind in einer Klasse definiert und man kann durch 'get' und 'set' auf sie zugreifen."
        },
        {
          "text":
            "Klassenvariablen sind in der Klasse überalle sichtbar. Instanzvariablen sind für die gegebene Instanz aufgerufen und danach werden sie von der garbage collection eingesammelt",
          "id": "129",
          "correctionOrComment":
            "Klassenvariablen sind in der Klasse überall sichtbar. Instanzvariablen sind für die gegebene Instanz aufgerufen und danach werden sie von dem 'garbage collector' eingesammelt."
        },
        {
          "text": "-",
          "id": "130",
          "correctionOrComment": "-"
        },
        {
          "text": "-",
          "id": "131",
          "correctionOrComment": "-"
        },
        {
          "text":
            "Instanzvariablen können nur von einzelnen Methoden genutzt werden. Klassenvaroiablen von der ganzen Klasse.",
          "id": "132",
          "correctionOrComment":
            "Instanzvariablen können nur von einzelnen Methoden genutzt werden, Klassenvariablen von der ganzen Klasse."
        },
        {
          "text": "instanzvariablengehören zu den objekten werden objekten übergeben",
          "id": "133",
          "correctionOrComment":
            "Instanzvariablen gehören zu den Objekten. Sie werden Objekten übergeben."
        },
        {
          "text": "Klassenvariablen sind in der Klasse sichtbar und Instanzvariablen sind",
          "id": "134",
          "correctionOrComment": "Klassenvariablen sind in der Klasse sichtbar."
        },
        {
          "text": "Insstanzvariblen sind bereits initialisiert.",
          "id": "135",
          "correctionOrComment": "Instanzvariablen sind bereits initialisiert."
        },
        {
          "text": "Instanzvariable gehören zu den Objekt und statischen variable Klassen variable",
          "id": "136",
          "correctionOrComment":
            "Instanzvariablen gehören zu dem Objekt und statische Variablen sind Klassenvariablen."
        },
        {
          "text":
            "Instanzvariablen gehören zu den Objekten werden den Objekten übergeben. Klassenvariablen hingegen nicht sie gehrlen einer klase",
          "id": "137",
          "correctionOrComment":
            "Instanzvariablen gehören zu den Objekten und werden den Objekten übergeben. Klassenvariablen hingegen nicht, sie gehören einer Klasse."
        },
        {
          "text":
            "Klasse definiert in einem Block und Instanzvariable wird in der Klasse definiert",
          "id": "138",
          "correctionOrComment":
            "Eine Klasse definiert in einem Block und eine Instanzvariable wird in der Klasse definiert."
        },
        {
          "text":
            "Klassenvariablen sind nur in der Klasse sichtbar, Instanzvariablen in mehreren Klassen",
          "id": "139",
          "correctionOrComment":
            "Klassenvariablen sind nur in der Klasse sichtbar, Instanzvariablen in mehreren Klassen."
        },
        {
          "text":
            "Klassenvariablen werden in der Main Methode deklariert. Instanzvariablen in Konstruktoren.",
          "id": "140",
          "correctionOrComment":
            "Klassenvariablen werden in der 'main' Methode deklariert, Instanzvariablen in Konstruktoren."
        },
        {
          "text":
            "Klassenvariablen sind in einer Klasse deklarierte und gegebenfalls initialisierte Variablen, dagegen sind Instanzvariablen in einem Objekt deklarierte und ggf Varibalen",
          "id": "141",
          "correctionOrComment":
            "Klassenvariablen sind in einer Klasse deklarierte und gegebenfalls initialisierte Variablen. Dagegen sind Instanzvariablen in einem Objekt deklarierte und gegebenenfalls Variablen."
        },
        {
          "text":
            "Instanzvariablen sind Objekte sozusagen und Klassenvariiable sind Variable die in defr klasse sichtbar sind",
          "id": "142",
          "correctionOrComment":
            "Instanzvariablen sind sozusagen Objekte und Klassenvariablen sind Variablen die in der Klasse sichtbar sind."
        },
        {
          "text":
            "instanzsvariablen sind zb einfach public String, public int, und klassenvariablen computer (int variable){",
          "id": "143",
          "correctionOrComment":
            "Instanzsvariablen sind zum Beispiel einfach 'public String' oder 'public int', und Klassenvariablen Parameter."
        },
        {
          "text": "this",
          "id": "144",
          "correctionOrComment": "this"
        }
      ]
    }
  ]
}
