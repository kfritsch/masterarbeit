{
  "questions": [
    {
      "id": "3",
      "title": "\u00dcberladene Methode",
      "text": "Was ist eine \u00fcberladene Methode?",
      "type": "definition",
      "referenceAnswer": {
        "text":
          "Das sind Methoden einer Klasse mit denselben Namen. Ihre Signaturen unterscheiden sich anhand unterschiedlicher Parameter.",
        "answerCategory": "correct",
        "assignedWeights": {
          "Klasse": 0.2,
          "denselb": 0.9,
          "Name": 0.9,
          "Signatur": 0.3,
          "unterscheiden": 0.3,
          "unterschiedlich": 0.7,
          "Parameter": 0.7
        }
      },
      "answersAnnotation": [
        {
          "text":
            "Das sind Methoden mit denselben Namen aber unterschiedliche Signatur. Zum Beispiel: public double berechneZeitInStunden(int minuten){.....} public double berechneZeitInStunden(int sekunden){....} R\u00fcckgabewert ist egal. Hat den Vorteil das es Benutzerfreundlicher ist.",
          "aspects": [],
          "id": "1",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Das sind Methoden mit denselben Namen aber unterschiedlicher Signatur. Der R\u00fcckgabewert ist egal. Es hat den Vorteil, dass es benutzerfreundlicher ist."
        },
        {
          "text":
            "eine \u00fcberladene Methode ist, wenn man mehrere Konstruktoren mit unterschiedlichen Parametern definiert.",
          "aspects": [],
          "id": "2",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Eine Methode ist \u00fcberladen, wenn man mehrere Konstruktoren mit unterschiedlichen Parametern definiert."
        },
        {
          "text":
            "eine \u00fcberladene Methode wurde mehr als einmal in einer Klasse implementiert, jedoch m\u00fcssen die Parameter-\u00dcbergaben verschieden einzigartig sein, der r\u00fcckgabetype kann \"\"belibig sein\"\" der methoden-name muss gleich sein. Ein Beispiel: public class Test { public int getOutput() { return 0; } //\u00fcberladene Methode public int getOutput(int mode){ return 0; } //auch \u00fcberladen public String getOutput(int mode, String prefix){ return prefix+mode; } }",
          "aspects": [],
          "id": "3",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Eine \u00fcberladene Methode wurde mehr als einmal in einer Klasse implementiert, jedoch m\u00fcssen die Parameter\u00fcbergaben verschieden einzigartig sein. Der R\u00fcckgabetype kann belibig sein. Der Methodenname muss gleich sein."
        },
        {
          "text": "-",
          "aspects": [],
          "id": "4",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        },
        {
          "text":
            "Man \u00fcberl\u00e4dt eine Methode damit der R\u00fcckgabe wert eine sch\u00f6ne lesbare Zahl ist und nicht irgendein code den man nicht entziffern kann.",
          "aspects": [],
          "id": "5",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment":
            "Man \u00fcberl\u00e4dt eine Methode, damit der R\u00fcckgabewert eine sch\u00f6ne, lesbare Zahl ist und nicht irgendein Code, den man nicht entziffern kann."
        },
        {
          "text": "eine methode die die auf alle objekte zugreift",
          "aspects": [],
          "id": "6",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment": "Das ist eine Methode, die auf alle Objekte zugreift."
        },
        {
          "text":
            "eine Methode aus die von mehreren klassen benutzt wird und somit immer wieder \u00fcberschrieben wird",
          "aspects": [],
          "id": "7",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment":
            "Das ist eine Methode, die von mehreren Klassen benutzt wird und somit immer wieder \u00fcberschrieben wird."
        },
        {
          "text": "es ist eine methode die false ausgibt",
          "aspects": [],
          "id": "8",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment": "Es ist eine Methode, die false ausgibt."
        },
        {
          "text":
            "Eine Methode, die in der Basisklasse sowie in abgeleiteten Klassen gleichnamig auftritt und unterschiedliche R\u00fcckgabewerte liefert.",
          "aspects": [],
          "id": "9",
          "points": 0,
          "answerCategory": "concept_mix-up",
          "correctionOrComment":
            "Das ist eine Methode, die in der Basisklasse sowie in abgeleiteten Klassen gleichnamig auftritt und unterschiedliche R\u00fcckgabewerte liefert."
        },
        {
          "text":
            "Zwei Methoden mit dem selben namen bezeichnet man als \u00dcberladen. Deshalb m\u00fcssen sie sich immer in der Signatur (Parameterliste, Typen) unterscheiden.",
          "aspects": [],
          "id": "10",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Zwei Methoden mit dem selben Namen bezeichnet man als \u00fcberladen. Deshalb m\u00fcssen sie sich immer in der Signatur (Parameterliste, Typen) unterscheiden."
        },
        {
          "text": "Wenn der Speicher der Methoden nicht ausreicht.",
          "aspects": [],
          "id": "11",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment":
            "Wenn der Speicher der Methoden nicht ausreicht, sind sie \u00fcberladen."
        },
        {
          "text": "die mit parametern \u00fcberladen ist",
          "aspects": [],
          "id": "12",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment": "Das ist ein Methode, die mit Parametern \u00fcberladen ist."
        },
        {
          "text": "wenn zuviele variablen deklariert sind, aber nicht alles benutzt werden",
          "aspects": [],
          "id": "13",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment":
            "Das ist, wenn zu viele Variablen deklariert sind, aber nicht alle benutzt werden."
        },
        {
          "text": "heist, das sich signatur, Parameterzahl bzw. die typen sich unterscheiden.",
          "aspects": [],
          "id": "14",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Es bedeutet, dass die Signatur und Parameterzahl (bzw. die Typen) sich unterscheiden."
        },
        {
          "text": "-",
          "aspects": [],
          "id": "15",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        },
        {
          "text": "-",
          "aspects": [],
          "id": "16",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        },
        {
          "text":
            "eine \u00fcberladene Methode hat denselben Namen wie eine andere Methode, jedoch andere Parameter. Z.B. bei Konstruktoren: Klasse(){} Klasse(Obj o){} Klasse(Person p, int alter){} durch die \u00dcberladung kann sich der \"\"User\"\" aussuchen, welche Methode er nutzen will (z.B. Klasse k = new Klasse(); oder Klasse k2 = new Klasse(anton);",
          "aspects": [],
          "id": "17",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Eine \u00fcberladene Methode hat denselben Namen wie eine andere Methode, jedoch andere Parameter. Durch die \u00dcberladung kann sich der User aussuchen, welche Methode er nutzen will."
        },
        {
          "text":
            "Eine Methode die zu viele Methoden implementiert hat und un\u00fcbersichtlich ist.",
          "aspects": [],
          "id": "18",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment":
            "Das ist eine Methode, die zu viele Methoden implementiert hat und un\u00fcbersichtlich ist."
        },
        {
          "text":
            "Eine \u00fcberladene Methode ist wenn 2 Methoen den selben namen haben, sie m\u00fcsen sich durch Parammeter-leiste und Signatur unerscheiden",
          "aspects": [],
          "id": "19",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Eine Methode ist \u00fcberladen, wenn 2 Methoden den selben Namen haben. Sie m\u00fcssen sich durch Parameterliste und Signatur unerscheiden."
        },
        {
          "text":
            "Eine \u00fcberladene Methode ist eine definierte Methode, die durch eine neue Implementation der selben Methode eine neue Bedeutung bekommt. z.B. die vom Object definierte Methode toString(). Wird sie in einer Klasse neu geschrieben gilt sie als \u00fcberladen.",
          "aspects": [],
          "id": "20",
          "points": 0,
          "answerCategory": "concept_mix-up",
          "correctionOrComment":
            "Eine \u00fcberladene Methode ist eine definierte Methode, die durch eine neue Implementation derselben Methode eine neue Bedeutung bekommt. Wird sie in einer Klasse neu geschrieben gilt sie als \u00fcberladen."
        },
        {
          "text":
            "Eine \u00fcberladene Methode ist eine Methode die sowohl in der Basisklasse als auch in der abgeleitenden Klasse initialisiert wird, dies bedeutet die Methode wird 2 x mit dem gleichen namen initialisiert kann aber einen anderen Inhalt besitzen. Man erkennt erst welche Methode man benutzt beim auslesen.",
          "aspects": [],
          "id": "21",
          "points": 0,
          "answerCategory": "concept_mix-up",
          "correctionOrComment":
            "Eine \u00fcberladene Methode ist eine Methode, die sowohl in der Basisklasse als auch in der abgeleitenden Klasse initialisiert wird. Dies bedeutet, die Methode wird 2 mal mit dem gleichen Namen initialisiert, kann aber einen anderen Inhalt besitzen. Man erkennt erst beim Auslesen, welche Methode man benutzt."
        },
        {
          "text":
            "Eine \u00fcberladene Methode ist eine Methoe die eine Methode mit dem selben Namen an der momentanen Stelle \u00e4ndert allerdings nicht die Methode mit dem selben Namen an der urspr\u00fcnglichen Stelle.",
          "aspects": [],
          "id": "22",
          "points": 0,
          "answerCategory": "concept_mix-up",
          "correctionOrComment":
            "Eine \u00fcberladene Methode ist eine Methode, die eine Methode mit demselben Namen an der momentanen Stelle \u00e4ndert, allerdings nicht die Methode mit dem selben Namen an der urspr\u00fcnglichen Stelle."
        },
        {
          "text": "Wenn eine Methode sehr h\u00e4ufig wiederholt geschrieben wird.",
          "aspects": [],
          "id": "23",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment":
            "Das ist, wenn eine Methode sehr h\u00e4ufig wiederholt geschrieben wird."
        },
        {
          "text":
            "wenn 2 methoden den selben Namen haben sind sie \u00fcberladen. die methoden m\u00fcssen sich jedoch durch die Parameter, typ undsignatur unterscheiden um zu funktionieren.",
          "aspects": [],
          "id": "24",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Wenn 2 Methoden denselben Namen haben, sind sie \u00fcberladen. Die Methoden m\u00fcssen sich jedoch durch die Parameter (Typ und Signatur) unterscheiden um zu funktionieren."
        },
        {
          "text":
            "Eine Methode die einen zu gro\u00dfen Wert aufnehmen muss f\u00fcr den sie nicht festgelegt ist.",
          "aspects": [],
          "id": "25",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment":
            "Das ist eine Methode, die einen zu gro\u00dfen Wert aufnehmen muss, f\u00fcr den sie nicht festgelegt ist."
        },
        {
          "text": "Wenn zwei Methoden den selben Namen haben, aber unterschiedliche Parameter",
          "aspects": [],
          "id": "26",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Das ist, wenn zwei Methoden denselben Namen haben, aber unterschiedliche Parameter."
        },
        {
          "text":
            "Eine \u00fcberladene Methode ist eine Methode, der beim Aufruf Parameter \u00fcbergeben werden.",
          "aspects": [],
          "id": "27",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment":
            "Eine \u00fcberladene Methode ist eine Methode, der beim Aufruf Parameter \u00fcbergeben werden."
        },
        {
          "text":
            "Eine uberladene methode ist eine Methode, die den Name von eine bereits existierende methode tr\u00e4gt",
          "aspects": [],
          "id": "28",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Eine \u00fcberladene Methode ist eine Methode, die den Name von einer bereits existierenden Methode tr\u00e4gt."
        },
        {
          "text":
            "Eine \u00fcberladene Methode ist wenn man z.B. eine abgeleitete Klasse einer Basisklasse hat, diese Methode der Basisklasse aber nicht f\u00fcr die Ableitung \"\"passt\"\", kann man eine weitere Methode schreiben, oder mehrere wenn man m\u00f6chte!",
          "aspects": [],
          "id": "29",
          "points": 0,
          "answerCategory": "concept_mix-up",
          "correctionOrComment":
            "Eine Methode ist \u00fcberladen, wenn man beispielsweise eine abgeleitete Klasse einer Basisklasse hat. Wenn eine Methode der Basisklasse nicht f\u00fcr die Ableitung passt, kann man eine oder mehrere weitere Methode schreiben, wenn man m\u00f6chte!"
        },
        {
          "text": "to string methode",
          "aspects": [],
          "id": "30",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "to string methode"
        },
        {
          "text":
            "eine \u00fcberladene Methode ist eine Methode die in einer anderen Klasse \u00fcberschriben werden kann.",
          "aspects": [],
          "id": "31",
          "points": 0,
          "answerCategory": "concept_mix-up",
          "correctionOrComment":
            "Eine \u00fcberladene Methode ist eine Methode, die in einer anderen Klasse \u00fcberschrieben werden kann."
        },
        {
          "text": "Ein Methode, die es mehrmals gibt.(Gleicher Name)",
          "aspects": [],
          "id": "32",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment": "Ein Methode, die es mehrmals gibt (gleicher Name)."
        },
        {
          "text":
            "eine Methode wo der Standart Konstruktur durch einen/mehrere eigenen Konstruktor ersetzt wurde",
          "aspects": [],
          "id": "33",
          "points": 0,
          "answerCategory": "concept_mix-up",
          "correctionOrComment":
            "Das ist eine Methode, in der der Standartkonstruktur durch einen oder mehrere eigene Konstruktoren ersetzt wurde."
        },
        {
          "text":
            "Eine Methode, die mehrmals verwende/aufgerufen wird, mit jeweils anderem Inhalt.",
          "aspects": [],
          "id": "34",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Das ist eine Methode, die mehrmals verwendet oder aufgerufen wird, mit jeweils anderem Inhalt."
        },
        {
          "text":
            "\u00dcberladene methoden sind zwei verschiedene methoden,, die aber mit verschiedenen Parameter und Typen defineirt sind. (2 verschiedene Methoden, aber verschiedene Parameter und Typen)",
          "aspects": [],
          "id": "35",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "\u00dcberladene Methoden sind zwei verschiedene Methoden, die aber mit verschiedenen Parametern und Typen definiert sind."
        },
        {
          "text":
            "Wenn zwei verschiedene Methoden den selben Namen haben, hei\u00dfen sie \u00fcberladen. Sie m\u00fcssen sich durch Parameterliste und - Typen) unterscheiden.",
          "aspects": [],
          "id": "36",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Wenn zwei verschiedene Methoden den selben Namen haben, hei\u00dfen sie \u00fcberladen. Sie m\u00fcssen sich durch die Parameterliste und -typen unterscheiden."
        },
        {
          "text":
            "das die selbe Methode mehrfach in einer Klasse funktioniert, nur wenn die Parameterliste (Typen) sich unterscheiden.",
          "aspects": [],
          "id": "37",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Es bedeutet, dass dieselbe Methode nur dann mehrfach in einer Klasse funktioniert, wenn die Parameterliste und -typen sich unterscheiden."
        },
        {
          "text":
            "Eine \u00fcberladene Methode ist eine bereits vorhandene Methode die vom Ersteller an das aktuelle Projekt angepasst wird.",
          "aspects": [],
          "id": "38",
          "points": 0,
          "answerCategory": "concept_mix-up",
          "correctionOrComment":
            "Eine \u00fcberladene Methode ist eine bereits vorhandene Methode, die vom Ersteller an das aktuelle Projekt angepasst wird."
        },
        {
          "text": "Eine Methode, welche mehrere verschiedene Werte \u00fcbergeben kann",
          "aspects": [],
          "id": "39",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Das ist eine Methode, welche mehrere verschiedene Werte \u00fcbergeben kann."
        },
        {
          "text":
            "Eine \u00fcberladene Methode ist eine selbsterstellte Supermethode. Wie zum beispiel ein selbstgeschriebener Konstruktor der den Standart Konstruktor erstetzt.",
          "aspects": [],
          "id": "40",
          "points": 0,
          "answerCategory": "concept_mix-up",
          "correctionOrComment":
            "Eine \u00fcberladene Methode ist eine selbsterstellte Supermethode beispielsweise ein selbstgeschriebener Konstruktor, der den Standartkonstruktor erstetzt."
        },
        {
          "text":
            "Als \u00fcberladen bezeichnet man eine Methode, die den selben Namen hat, wie eine andere, aber andere Parameter erwartet.",
          "aspects": [],
          "id": "41",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Als \u00fcberladen bezeichnet man eine Methode, die den selben Namen hat, wie eine andere, aber andere Parameter erwartet."
        },
        {
          "text":
            "Das sind mehrere Methoden mit dem gleichen Namen der benutzt wird. Allerdings besitzen sie andere Ausgaben.",
          "aspects": [],
          "id": "42",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Das sind mehrere Methoden mit dem gleichen Namen, der benutzt wird. Allerdings besitzen sie andere Ausgaben."
        },
        {
          "text": "ist eine Methode, den selben namen und die selbe funktion hat",
          "aspects": [],
          "id": "43",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Das ist eine Methode, die den selben Namen und die selbe Funktion hat."
        },
        {
          "text": "Eine Methode die nichts zur\u00fcckgeben kann.",
          "aspects": [],
          "id": "44",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment": "Das ist eine Methode, die nichts zur\u00fcckgeben kann."
        },
        {
          "text":
            "Haben zwei verschiedene Methoden denselben Namen hei\u00dfen Sie \u00fcberladen. Sie unterscheiden sich durch ihre Parameter. Sie sorgen f\u00fcr Benutzerfreundlichkeit.",
          "aspects": [],
          "id": "45",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Haben zwei verschiedene Methoden denselben Namen, hei\u00dfen sie \u00fcberladen. Sie unterscheiden sich durch ihre Parameter. Sie sorgen f\u00fcr Benutzerfreundlichkeit."
        },
        {
          "text":
            "Eine Methode, die sich nur ihrer Signatur (Parameterleiste und -typen) von einer anderen Methode unterscheidet, z.B. kann der Konstruktor einer Klasse \u00fcberladen werden, indem er jeweils eine unterschiedliche Anzahl an Variablen und/oder verschiedene Typen entgegennimmt.",
          "aspects": [],
          "id": "46",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Das ist eine Methode, die sich nur anhand ihrer Signatur (Parameterliste und -typen) von einer anderen Methode unterscheidet. Beispielsweise kann der Konstruktor einer Klasse \u00fcberladen werden, indem er jeweils eine unterschiedliche Anzahl an Variablen oder verschiedene Typen entgegennimmt."
        },
        {
          "text":
            "Eine \u00fcberladene Methode ist eine Methode die den selben Namen hat wie eine oder mehrere Methoden und die je nach EIngabewert aufgerufen wird. So kann es sein das bei einer Eingabe eine andere Methode des selben Namens wie bei einer anderen Eingabe aufgerufen wird. So ist es m\u00f6glich mit \"\"derselben\"\" Methode verschiedene EIngabetypen anzusprechen.",
          "aspects": [],
          "id": "47",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Eine \u00fcberladene Methode ist eine Methode, die den selben Namen hat, wie eine oder mehrere Methoden und die je nach Eingabewert aufgerufen wird. So kann es sein, dass bei einer Eingabe eine andere Methode des selben Namens, wie bei einer anderen Eingabe aufgerufen wird. So ist es m\u00f6glich mit derselben Methode verschiedene Eingabetypen anzusprechen."
        },
        {
          "text":
            "Eine Methode ist \u00fcberladen, wenn mindestens eine weitere Methode mit dem selben Namen aber einer anderen Signatur vorliegt.",
          "aspects": [],
          "id": "48",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Eine Methode ist \u00fcberladen, wenn mindestens eine weitere Methode mit dem selben Namen aber einer anderen Signatur vorliegt."
        },
        {
          "text": "Eine \u00fcberladene Methode ist eine Methode die andere Methoden aufruft.",
          "aspects": [],
          "id": "49",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment":
            "Eine \u00fcberladene Methode ist eine Methode, die andere Methoden aufruft."
        },
        {
          "text": "-",
          "aspects": [],
          "id": "50",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        },
        {
          "text":
            "\u00dcberlade Methoden sind Methoden die einander \u00fcberschreiben k\u00f6nnen z.B. \"\"+\"\".",
          "aspects": [],
          "id": "51",
          "points": 0,
          "answerCategory": "concept_mix-up",
          "correctionOrComment":
            "\u00dcberlade Methoden sind Methoden, die einander \u00fcberschreiben k\u00f6nnen."
        },
        {
          "text":
            "Eine Methode die es schonmal gibt. Also mit dem gleichen Namen. Mit der Methode kann man dann mehrere Sachen machen (sie \u00fcberschreiben sich nicht).",
          "aspects": [],
          "id": "52",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Das ist eine Methode, die es schonmal gibt, also mit dem gleichen Namen. Mit der Methode kann man dann mehrere Sachen machen. Sie \u00fcberschreiben sich nicht."
        },
        {
          "text":
            "eine \u00fcberladene methode ist eine methode die aus einer basisklasse abgeleitet ist und in der der abgeleitetetn klasse \u00fcberschrieben wird beispiellsweise hat jede klasse die methode toString(), da alle klassen von Object abgeleitet sind, um eine lesbare ausgabe zu erhalten muss die methode toString in der abgeleiteten Klasse \u00fcberschrieben werden und ist dann \u00fcberladen",
          "aspects": [],
          "id": "53",
          "points": 0,
          "answerCategory": "concept_mix-up",
          "correctionOrComment":
            "Eine \u00fcberladene Methode ist eine Methode, die aus einer Basisklasse abgeleitet ist und in der abgeleiteten Klasse \u00fcberschrieben wird. Beispielsweise hat jede Klasse die Methode 'toString()', da alle Klassen von Object abgeleitet sind. Um eine lesbare Ausgabe zu erhalten muss die Methode 'toString' in der abgeleiteten Klasse \u00fcberschrieben werden und ist dann \u00fcberladen."
        },
        {
          "text":
            "Eine Methode, die das gleiche Schutzattribut, den gleichen R\u00fcckgabetyp und den gleichen Methodenname hat. Sie unterscheidet sich nur in den \u00dcbergabeparametern.",
          "aspects": [],
          "id": "54",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Das ist eine Methode, die das gleiche Schutzattribut, den gleichen R\u00fcckgabetyp und den gleichen Methodenname hat. Sie unterscheidet sich nur in den \u00dcbergabeparametern."
        },
        {
          "text":
            "Haben zwei verschieden Methoden derselben Namen hei\u00dfen sie \u00fcberladen. \u00dcberladen Methoiden m\u00fcssen sich durch die Signatur(Parameterliste und -typen) unterscheiden, der R\u00fcckgabewert ist egal.",
          "aspects": [],
          "id": "55",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Haben zwei verschieden Methoden denselben Namen, hei\u00dfen sie \u00fcberladen. \u00dcberladene Methoden m\u00fcssen sich durch die Signatur (Parameterliste und -typen) unterscheiden. Der R\u00fcckgabewert ist egal."
        },
        {
          "text":
            "wenn zwei verschiedene methoden denselben namen haben, hei\u00dfen sie \u00fcberladen. sie m\u00fcssen sich durch die Signatur (Parameterliste und typen) unterscheiden,der Rr\u00fcckgabe wert ist egal.",
          "aspects": [],
          "id": "56",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Wenn zwei verschiedene Methoden denselben Namen haben, hei\u00dfen sie \u00fcberladen. Sie m\u00fcssen sich durch die Signatur (Parameterliste und -typen) unterscheiden. Der Rr\u00fcckgabewert ist egal."
        },
        {
          "text": "eine Methode die",
          "aspects": [],
          "id": "57",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "eine Methode die"
        },
        {
          "text":
            "wenn zwei Methoden denselben namen haben dann sind sie \u00fcberladen sie m\u00fcssen sich durch die signatur unterscheiden der r\u00fcckgabewert ist egal",
          "aspects": [],
          "id": "58",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Wenn zwei Methoden denselben Namen haben, dann sind sie \u00fcberladen. Sie m\u00fcssen sich durch die Signatur unterscheiden. Der R\u00fcckgabewert ist egal."
        },
        {
          "text":
            "Wenn zwei verschiedene Methoden denselben Namen haben, dann hei\u00dfen sie \u00fcberladen. \u00dcberladene Methoden m\u00fcssen sich durch die Parameterliste und -typen unterscheiden.",
          "aspects": [],
          "id": "59",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Wenn zwei verschiedene Methoden denselben Namen haben, dann hei\u00dfen sie \u00fcberladen. \u00dcberladene Methoden m\u00fcssen sich durch die Parameterliste und -typen unterscheiden."
        },
        {
          "text": "-",
          "aspects": [],
          "id": "60",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        },
        {
          "text":
            "Mehrere Methoden haben dieselben Namen, man kann sie durch ihre Eigenschaften entscheiden. Der Aufruf ist dabei egal.",
          "aspects": [],
          "id": "61",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Mehrere Methoden haben dieselben Namen. Man kann sie durch ihre Eigenschaften unterscheiden. Der Aufruf ist dabei egal."
        },
        {
          "text":
            "Wenn zwei verschiedene Methoden den selben Namen haben nennt man sie \u00dcberladen. Sie m\u00fcssen sich durch die Signatur unterscheiden. Der R\u00fcckgabewert ist egal.",
          "aspects": [],
          "id": "62",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Wenn zwei verschiedene Methoden denselben Namen haben, nennt man sie \u00fcberladen. Sie m\u00fcssen sich durch die Signatur unterscheiden. Der R\u00fcckgabewert ist egal."
        },
        {
          "text":
            "Vererbte Methode/Konstruktor die mit Override \u00fcberschrieben wurde. Beispiel: \u00dcberschreibung des Standartkonstruktors.",
          "aspects": [],
          "id": "63",
          "points": 0,
          "answerCategory": "concept_mix-up",
          "correctionOrComment":
            "Das sind vererbte Methoden oder Konstruktoren, die mit Override \u00fcberschrieben wurde."
        },
        {
          "text":
            "Sind Methoden mit den selben Methodennamen, der unterschied besteht aber da drin, dass die Parameteranzahl bzw. Typen sich unterscheiden.",
          "aspects": [],
          "id": "64",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Das sind Methoden mit den selben Methodennamen. Der Unterschied besteht aber darin, dass die Parameteranzahl oder -typen sich unterscheiden."
        },
        {
          "text":
            "Haben zwei verschiedene Methoden denselben Namen hei\u00dfen sie \u00dcberladen \u00dcberladene Methoden m\u00fcssen sich durch die Signatur (Parameterliste und typen) unterscheiden.",
          "aspects": [],
          "id": "65",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Haben zwei verschiedene Methoden denselben Namen, hei\u00dfen sie \u00fcberladen. \u00dcberladene Methoden m\u00fcssen sich durch die Signatur (Parameterliste und -typen) unterscheiden."
        },
        {
          "text":
            "Eine Methode ist \u00fcberladen, wenn sie z.B. einen String erbt und diesen dann innerhalb der Methode mit einem neuen \"\"Wert\"\" \u00fcberschreibt.",
          "aspects": [],
          "id": "66",
          "points": 0,
          "answerCategory": "concept_mix-up",
          "correctionOrComment":
            "Eine Methode ist \u00fcberladen, wenn sie beispielsweise einen String erbt und diesen dann innerhalb der Methode mit einem neuen Wert \u00fcberschreibt."
        },
        {
          "text":
            "\u00fcberladen ist eine Methode, wenn sie doppelt implementiert wurde, mit den gleichen Parametern. Die Variable wurde gleichnamig definiert.",
          "aspects": [],
          "id": "67",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "\u00dcberladen ist eine Methode, wenn sie doppelt implementiert wurde, mit den gleichen Parametern. Die Variable wurde gleichnamig definiert."
        },
        {
          "text": "Eine Methode in der zu viel Quellcode steht.",
          "aspects": [],
          "id": "68",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment": "Eine Methode in der zu viel Quellcode steht."
        },
        {
          "text":
            "Haben zwei verschiedene Methoden denselben Namen hei\u00dfen sie \u00fcberladen. \u00dcberladene Methoden m\u00fcssen sich durch die Signatur (Parameterliste und -typen) unterscheiden den, der R\u00fcckgabewert ist egal.",
          "aspects": [],
          "id": "69",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Haben zwei verschiedene Methoden denselben Namen, hei\u00dfen sie \u00fcberladen. \u00dcberladene Methoden m\u00fcssen sich durch die Signatur (Parameterliste und -typen) unterscheiden. Der R\u00fcckgabewert ist egal."
        },
        {
          "text":
            "\u00dcberladene Methoden haben zwei verschiedene Methoden den selben Namen hei\u00dfen sie \u00dcberladen. \u00dcberladene Methoden m\u00fcssen sich durch die Signatur (Parameterliste und -typen) unterscheiden.",
          "aspects": [],
          "id": "70",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Haben zwei verschiedene Methoden denselben Namen, hei\u00dfen sie \u00fcberladen. \u00dcberladene Methoden m\u00fcssen sich durch die Signatur (Parameterliste und -typen) unterscheiden."
        },
        {
          "text":
            "Bedeutet dass derselbe Methodenname mehrfach in einer Klasse verwendet werden kann. Die Anzahl der \u00dcbergabeparameter ist unterschiedlich.",
          "aspects": [],
          "id": "71",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Es bedeutet, dass derselbe Methodenname mehrfach in einer Klasse verwendet werden kann. Die Anzahl der \u00dcbergabeparameter ist unterschiedlich."
        },
        {
          "text":
            "Eine vererbte Methode die \u00fcberschrieben wird damit diese ver\u00e4ndert werden kann f\u00fcr die Kindklasse. Diese werden konventionell mit @Override gekennzeichnet.",
          "aspects": [],
          "id": "72",
          "points": 0,
          "answerCategory": "concept_mix-up",
          "correctionOrComment":
            "Das ist eine vererbte Methode, die \u00fcberschrieben wird damit diese ver\u00e4ndert werden kann f\u00fcr die Kindklasse. Diese werden konventionell mit Override gekennzeichnet."
        },
        {
          "text":
            "Eine \u00fcberladene Methode ist wenn die maximale Kapazit\u00e4t an methoden \u00fcberladen wurde.",
          "aspects": [],
          "id": "73",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment":
            "Eine Methode ist \u00fcberladen, wenn die maximale Kapazit\u00e4t an Methoden \u00fcberladen wurde."
        }
      ]
    },
    {
      "id": "4",
      "title": "Klassenattribute Kapselung",
      "text":
        "Sie schreiben eine Klasse Beispielklasse mit einem Feld 'wert'. Wie erreichen Sie, dass 'wert' nur innerhalb von Beispielklasse schreibbar, aber von \u00fcberall aus lesbar ist?",
      "type": "procedure",
      "referenceAnswer": {
        "text":
          "Das Feld 'wert' muss mit dem Schutzattribute private deklariert werden und die Klasse muss einen Getter für dieses Feld bereitstellen.",
        "answerCategory": "correct",
        "assignedWeights": {
          "müssen": 0.7,
          "Schutzattribut": 0.2,
          "private": 1,
          "deklarieren": 0.2,
          "werden": 0.3,
          "und": 0.5,
          "Getter": 0.6,
          "bereitstellen": 0.1
        }
      },
      "answersAnnotation": [
        {
          "text":
            "Ich setze \"\"Wert\"\" auf private und schreibe in der Beispielklasse einen Getter. So kann \"\"Wert\"\" gelesen von \u00fcberall gelesen werden udn bleibt schreibgesch\u00fctzt.",
          "aspects": [],
          "id": "1",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Ich setze 'wert' auf private und schreibe in der Beispielklasse einen Getter. So kann 'wert' von \u00fcberall gelesen werden und bleibt schreibgesch\u00fctzt."
        },
        {
          "text":
            "indem man mit der sogenanneten Kapselung arbeitet: wert als Private definieren und mithilfe von Getter- und Setter-methoden den Zugrif erm\u00f6glichen.",
          "aspects": [],
          "id": "2",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Indem man mit der sogenanneten Kapselung arbeitet. Man muss 'wert' als private definieren und mithilfe von Getter- und Settermethoden den Zugriff erm\u00f6glichen."
        },
        {
          "text":
            "Mit protect. Wemm man in der Beispielsklasse\"\" protect double wert\"\" schreibt ist sie f\u00fcr andere Klassen sichtbar aber nicht ver\u00e4nderbar.",
          "aspects": [],
          "id": "3",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Wenn man in der Beispielsklasse protected double 'wert' schreibt, ist sie f\u00fcr andere Klassen sichtbar aber nicht ver\u00e4nderbar."
        },
        {
          "text": "privat int wert und dann durch getter und setter aufrufen.",
          "aspects": [],
          "id": "4",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Es muss als private int 'wert' initialisiert werden und kann dann durch Getter und Setter aufrufen werden."
        },
        {
          "text": "man benutzt die protected um es sch\u00fctzen aber lesbar zu halten",
          "aspects": [],
          "id": "5",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Man benutzt protected um es zu sch\u00fctzen aber lesbar zu halten."
        },
        {
          "text":
            "ich lege das schutzattribut von \"\"wert\"\" auf private fest und implementiere eine getter-methode sodass von \u00fcberall auf den im Feld \"\"wert\"\" hinterlegten Wert \u00fcber diese methode zugegriffen werden kann.",
          "aspects": [],
          "id": "6",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Ich lege das Schutzattribut von 'wert' auf private fest und implementiere eine Gettermethode, sodass von \u00fcberall auf den im Feld 'wert' hinterlegten Wert \u00fcber diese Methode zugegriffen werden kann."
        },
        {
          "text":
            "durch eine vererbung. mit extends k\u00f6nnen dann die anderen klassen die werte \u00fcbernehmen",
          "aspects": [],
          "id": "7",
          "points": 0,
          "answerCategory": "concept_mix-up",
          "correctionOrComment":
            "Das geht durch eine Vererbung. Mit extends k\u00f6nnen dann die anderen Klassen die Werte \u00fcbernehmen."
        },
        {
          "text":
            "Indem man innerhalb der \"\"Beispielklasse\"\" nur einen Getter f\u00fcr \"\"wert\"\", aber keinen Setter verwendet.",
          "aspects": [],
          "id": "8",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Das geht, indem man innerhalb der Beispielklasse nur einen Getter f\u00fcr 'wert' aber keinen Setter verwendet."
        },
        {
          "text": "ich benutze vor wert den zustazt protected",
          "aspects": [],
          "id": "9",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment": "Ich benutze vor 'wert' den Zusatz protected."
        },
        {
          "text": "protected int wert;",
          "aspects": [],
          "id": "10",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment": "Das geht mit protected int 'wert'."
        },
        {
          "text": "private Beispielklasse",
          "aspects": [],
          "id": "11",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment": "Das geht mit private Beispielklasse."
        },
        {
          "text":
            "private Typ wert; (Variable als private deklarieren, um direkten Zugriff zu vermeiden) public getWert(){return wert;} (auslesen, von \u00fcberall m\u00f6glich) private void setWert(Typ wert){this.wert = wert;} (schreiben, nur innerhalb der eigenen Klasse m\u00f6glich)",
          "aspects": [],
          "id": "12",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Man muss die Variable als private deklarieren, um direkten Zugriff zu vermeiden. Ein public Getter macht das Auslesen, von \u00fcberall m\u00f6glich. Ein private Setter macht das Schreiben, nur innerhalb der eigenen Klasse m\u00f6glich."
        },
        {
          "text": "public static final string wert...",
          "aspects": [],
          "id": "13",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment": "Das geht mit public static final string 'wert'."
        },
        {
          "text":
            "man muss Proteced ben\u00fctzen damit sie von \u00fcbeall lesbar ist aber nur innerhalb von Beispielklasse schreibbar ist",
          "aspects": [],
          "id": "14",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Man muss protected benutzen, damit sie von \u00fcbeall lesbar, aber nur innerhalb von Beispielklasse schreibbar ist"
        },
        {
          "text":
            "Zuerst muss die Variable wert als private deklariert werden. So ist sie von au\u00dfen schreibgesch\u00fctzt. Um nun wert von au\u00dfen lesbar zu machen muss ein Getter implementiert werden. Durch den Methodenaufruf getWert() kann nun wert ausgelesen werden aber nicht ver\u00e4ndert werden.",
          "aspects": [],
          "id": "15",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Zuerst muss die Variable 'wert' als private deklariert werden. So ist sie von au\u00dfen schreibgesch\u00fctzt. Um nun 'wert' von au\u00dfen lesbar zu machen muss ein Getter implementiert werden. Durch den Methodenaufruf 'getWert()' kann nun 'wert' ausgelesen werden aber nicht ver\u00e4ndert werden."
        },
        {
          "text":
            "Durch das Atrribut private, sch\u00fctzt man Datenfelder davor das sie nur innerhalb ihrer Klasse schreibbar und sichtbar sind. Durch eine getter Methode k\u00f6nnen alle Klassen, die private geschriebene Variable lesen.",
          "aspects": [],
          "id": "16",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Durch das Attribut private, sch\u00fctzt man Datenfelder davor, dass sie nur innerhalb ihrer Klasse schreibbar und sichtbar sind. Durch eine Getter Methode k\u00f6nnen alle Klassen, die private geschriebene Variable lesen."
        },
        {
          "text":
            "ich erreichr es in dem ich den wert auf private setze und demendsprechende getter mache also ptivate int wert ; public int getWert(){ return wert; }",
          "aspects": [],
          "id": "17",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Ich erreiche es, indem ich 'wert' auf private setze und dementsprechende Getter mache."
        },
        {
          "text":
            "Ich setze das Feld \"\"wert\"\" auf Private und benutze von den anderen Klassen aus Getter um den Wert des Feldes wert zu lesen.",
          "aspects": [],
          "id": "18",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Ich setze das Feld 'wert' auf private und benutze von den anderen Klassen aus Getter um den Wert des Feldes 'wert' zu lesen."
        },
        {
          "text": "protected",
          "aspects": [],
          "id": "19",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment": "Das geht mit protected."
        },
        {
          "text":
            "Damit sie nur schreibbar innerhalbder Klasse ist deklariert man sie mit private. Lesbar machen Kann man die Variable indem man sie in eine get-methode steckt und diese Methode public macht.",
          "aspects": [],
          "id": "20",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Damit sie nur schreibbar innerhalb der Klasse ist, deklariert man sie mit private. Lesbar machen kann man die Variable, indem man sie in eine Gettermethode steckt und diese Methode public macht."
        },
        {
          "text":
            "Diese feld soll mit Attribut private deklarieren werden und mit eine methode \u00fcberall lesbar wird",
          "aspects": [],
          "id": "21",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Dieses Feld sollte mit dem Attribut private deklariert werden und mit einer Gettermethode von \u00fcberall lesbar gemacht werden."
        },
        {
          "text":
            "private (z.B. int) wert; Und erstelle dann eine Getter Methode. public int getWert() { return wert; }",
          "aspects": [],
          "id": "22",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Das geht mit private int 'wert'. Man erstelle dann eine public Gettermethode."
        },
        {
          "text":
            "public class zahl; private int wert; public int getWert(){ return wert; mit private erm\u00f6glichen wir das man nur in der eigenen klasse zugriff hat und mit getter machen wir sie aber in den anderen klassen sichtbar.",
          "aspects": [],
          "id": "23",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Mit private erm\u00f6glichen wir, dass man nur in der eigenen Klasse Zugriff hat und mit einem Getter machen wir sie aber in den anderen Klassen sichtbar."
        },
        {
          "text":
            "public class Beispielklasse protected int wert; public String getWert(){ return this.wert;} Dadurch dass man nur mit dem Setter wert \u00fcberschreiben kann es bzw scheibbar machen kann, benutz man hier nur einen getter.",
          "aspects": [],
          "id": "24",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Das geht mit protected int 'wert'. Dadurch dass man nur mit dem Setter 'wert' \u00fcberschreiben kann, benutz man hier nur einen Getter."
        },
        {
          "text": "mit dem Pr\u00e4fix protected zb: protected int wert;",
          "aspects": [],
          "id": "25",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Das geht mit dem Pr\u00e4fix protected, also protected int 'wert'."
        },
        {
          "text": "public final wert",
          "aspects": [],
          "id": "26",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment": "Das geht mit public final 'wert'."
        },
        {
          "text":
            "Wir definiert die Variable \"\"wert\"\" mit dem Zugriffatributt protected. - (protected int wert)",
          "aspects": [],
          "id": "27",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Wir definieren die Variable 'wert' mit dem Zugriffsattribut protected (protected int 'wert')."
        },
        {
          "text":
            "public class Beispielklasse private int wert; Durch eine getter Methode! und der wert muss private gesetzt sein!",
          "aspects": [],
          "id": "28",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Durch eine Gettermethode und der Wert muss private gesetzt sein!"
        },
        {
          "text": "indem ich die Klasse ableite mit extends",
          "aspects": [],
          "id": "29",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment": "Das geht, indem ich die Klasse ableite mit extends."
        },
        {
          "text": "protected wert;",
          "aspects": [],
          "id": "30",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment": "Das geht mit protected 'wert'."
        },
        {
          "text":
            "indem man den \"\"wert\"\" auf private setzt und ihn danach mit getter/setter aufruft. Dadurch kann man nur innerhalb der Beispielklasse den \"\"wert\"\" ver\u00e4ndern.",
          "aspects": [],
          "id": "31",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Das geht, indem man den Wert auf private setzt und ihn danach mit Getter und Setter aufruft. Dadurch kann man nur innerhalb der Beispielklasse den Wert ver\u00e4ndern."
        },
        {
          "text":
            "indem man das Feld \"\"wert\"\" als private deglariert. man kann es dann \u00fcber die getterMethode aufrufen!",
          "aspects": [],
          "id": "32",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Das geht, indem man das Feld 'wert' als private deklariert. Man kann es dann \u00fcber die Gettermethode aufrufen!"
        },
        {
          "text":
            "Das Feld wert ist auf private zu setzen. Durch einen getter f\u00fcr wert kann die Variable von au\u00dfen ausgelesen werden. Das private verhindert jeden Schreibzugriff au\u00dfer aus der eigenen Klasse.",
          "aspects": [],
          "id": "33",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Das Feld 'wert' ist auf private zu setzen. Durch einen Getter f\u00fcr 'wert' kann die Variable von au\u00dfen ausgelesen werden. Das private verhindert jeden Schreibzugriff au\u00dfer aus der eigenen Klasse."
        },
        {
          "text":
            "Man nimmt sogenannte Schutzattribute zu Hilfe. In dem Beispiel nimmt man nicht public sondern private und protected.",
          "aspects": [],
          "id": "34",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Man nimmt sogenannte Schutzattribute zur Hilfe. In dem Beispiel nimmt man nicht public sondern private und protected."
        },
        {
          "text":
            "mit der get Methode. Beispielklasse ist auf private gesezt kann aber von au\u00dferhalb mit der get Methode gelesen werden",
          "aspects": [],
          "id": "35",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Das geht mit der Gettermethode. Die Beispielklasse ist auf private gesezt, kann aber von au\u00dferhalb mit der Gettermethode gelesen werden."
        },
        {
          "text":
            "Indem man den dazugeh\u00f6rigen getter definiert aber nicht den setter, der das schreiben erlauben w\u00fcrde.",
          "aspects": [],
          "id": "36",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Indem man den dazugeh\u00f6rigen Getter definiert aber nicht den Setter, der das schreiben erlauben w\u00fcrde."
        },
        {
          "text":
            "class Beispielklasse { private int wert; public Beispielklasse (int wert) { this.wert = wert; } public int getWert () { return wert; } private void setWert (int i) { this.wert = i; } } Wennn nur eine private set-Methode f\u00fcr die private Variable wert definiert wird, kann der Wert von wert nicht von au\u00dfen ge\u00e4ndert werden, sondern nur innerhalb der Klasse. Eine public get-Methode erm\u00f6glicht jedoch, dass der Wert von \u00fcberall aus gelesen werden kann.",
          "aspects": [],
          "id": "37",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Der Wert wird mit private int 'wert' deklariert. Wenn nur eine private set-Methode f\u00fcr die private Variable 'wert' definiert wird, kann der Wert von 'wert' nicht von au\u00dfen ge\u00e4ndert werden, sondern nur innerhalb der Klasse. Eine public get-Methode erm\u00f6glicht jedoch, dass der Wert von \u00fcberall aus gelesen werden kann."
        },
        {
          "text":
            "Es wird nur eine getter- und keine setter-Methode eingef\u00fcgt. So kann zwar auf die getter-Methode zur\u00fcckgegriffen und der Wert ausgelesen werden, jedoch kann nicht mithilfe der setter-Methode der Wert ver\u00e4ndert werden.",
          "aspects": [],
          "id": "38",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Es wird nur eine getter- und keine setter-Methode eingef\u00fcgt. So kann zwar auf die getter-Methode zur\u00fcckgegriffen und der Wert ausgelesen werden, jedoch kann nicht mithilfe der setter-Methode der Wert ver\u00e4ndert werden."
        },
        {
          "text":
            "Das Feld wert muss private und darf nicht final sein, es muss eine get-Methode und es darf keine set-Methode vorliegen.",
          "aspects": [],
          "id": "39",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Das Feld 'wert' muss private und darf nicht final sein. Ss muss eine get-Methode und es darf keine set-Methode vorliegen."
        },
        {
          "text":
            "wert wird als \"\"private\"\" deklariert. danach wird ein getter gesetzt um wert von \u00fcberall aus lesbar zu machen.",
          "aspects": [],
          "id": "40",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "'wert' wird als private deklariert. Danach wird ein Getter gesetzt um 'wert' von \u00fcberall aus lesbar zu machen."
        },
        {
          "text": "-",
          "aspects": [],
          "id": "41",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        },
        {
          "text":
            "Falls Wert z.B.: als int. private int wert; public int getWert() { return wert; } //Methode zum Lesen kann von \u00fcberall aufgerufen werden. private int setWert(int wert) { this.wert = wert;} //methode zum Schreiben kann nur innerhalb der Klasse verwendet werden.",
          "aspects": [],
          "id": "42",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Das Feld wird als private int 'wert' deklariert. Eine public getter-Methode zum Lesen kann von \u00fcberall aufgerufen werden. Eine private setter-Methode zum Schreiben kann nur innerhalb der Klasse verwendet werden."
        },
        {
          "text": "mit getter und setter",
          "aspects": [],
          "id": "43",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment": "Das geht mit Getter und Setter."
        },
        {
          "text":
            "Feld wert wird mit private deklariert, so ist es nur innerhalb von Beispielklasse lesbar und schreibbar. um es von \u00fcberall lesen zu k\u00f6nnen ben\u00f6tigt man noch einer getter methode : public getWert(){ return this.wert; }",
          "aspects": [],
          "id": "44",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Das Feld 'wert' wird mit private deklariert. So ist es nur innerhalb der Beispielklasse lesbar und schreibbar. Um es von \u00fcberall lesen zu k\u00f6nnen ben\u00f6tigt man noch eine getter-Methode."
        },
        {
          "text":
            "In der Beispielklasse die Getter-Methode mit Schutzattribut private schreiben. Die Setter-Methode in der gleichen Klasse mit public schreiben.",
          "aspects": [],
          "id": "45",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "In der Beispielklasse die getter-Methode mit dem Schutzattribut private schreiben. Die setter-Methode in der gleichen Klasse mit public schreiben."
        },
        {
          "text":
            "wert ist schreibgeschutz d.h privarte. wir konnen eine getWert methode machen und dann diese methode von au\u00dfen aufrufen.",
          "aspects": [],
          "id": "46",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Das Feld 'wert' ist schreibgeschutz mittels private. Wir konnen eine 'getWert' Methode machen und dann diese Methode von au\u00dfen aufrufen."
        },
        {
          "text":
            "private int wert --> dadurch ist sie nicht von au\u00dfen zu \u00e4ndern. public int getWert(){ return wert; die methode ist public, sodass man den wert von au\u00dfen lesen kann",
          "aspects": [],
          "id": "47",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Durch private int 'wert' ist die Variable nicht von au\u00dfen zu \u00e4ndern. Man braucht eine public 'getWert' Methode, sodass man den Wert von au\u00dfen lesen kann."
        },
        {
          "text": "den Feld wert muss protected sein.",
          "aspects": [],
          "id": "48",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment": "Das Feld 'wert' muss protected sein."
        },
        {
          "text": "wert final setzen und mit public getWert() f\u00fcr andere lesbar machen",
          "aspects": [],
          "id": "49",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Man muss 'wert' final setzen und mit public 'getWert()' f\u00fcr andere lesbar machen."
        },
        {
          "text":
            "Zu erst muss das Schutzatribut \"\"private\"\" sein. Dannach kann man mit setter die Variable innerhalb der Klasse schreiben und mit getter \u00fcberall zu lesen.",
          "aspects": [],
          "id": "50",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Zuerst muss das Schutzattribut private sein. Danach kann man mit einem Setter die Variable innerhalb der Klasse schreiben und mit einem Getter \u00fcberall lesen."
        },
        {
          "text": "mit einem Getter und keinem Setter",
          "aspects": [],
          "id": "51",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment": "Das geht mit einem Getter und keinem Setter."
        },
        {
          "text":
            "Man will, dass \"\"wert\"\" schreibgesch\u00fctz auf andere abgeleitete Klassen ist. Deswegen macht man einen Konstruktoir, womit man in der Basisklasse diese Variable benutzen kann. Au\u00dferdem braucht man eine getter-methode, damit sie in anderen Klassen lesbar ist. Da privat vor \"\"wert\"\" gesetzt wird, ist es nun nur lesbar aber abgeleitet Klassen k\u00f6nnen es nicht \u00fcberscxhreiben. Esa ist das Prinzip der Kapselung/ Schutz vor \u00dcberschreibung.",
          "aspects": [],
          "id": "52",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Man will, dass 'wert' schreibgesch\u00fctz auf andere abgeleitete Klassen ist. Deswegen macht man einen Konstruktoir, womit man in der Basisklasse diese Variable benutzen kann. Au\u00dferdem braucht man eine getter-Methode, damit sie in anderen Klassen lesbar ist. Da private vor 'wert' gesetzt wird, ist es nun nur lesbar aber abgeleitet Klassen k\u00f6nnen es nicht \u00fcberschreiben. Es ist das Prinzip der Kapselung und dem Schutz vor \u00dcberschreibung."
        },
        {
          "text":
            "Ich setzen \"\"wert\"\" private, dadurch ist es nur f\u00fcr die Klassse Beispielklasse schreibbar. Durch eine Getter Methode ist es \u00fcberall lesbar.",
          "aspects": [],
          "id": "53",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Ich setze 'wert' private. Dadurch ist es nur f\u00fcr die Klassse Beispielklasse schreibbar. Durch eine getter-Methode ist es \u00fcberall lesbar."
        },
        {
          "text": "Mit dem Schutzattribut protected",
          "aspects": [],
          "id": "54",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment": "Das geht mit dem Schutzattribut protected."
        },
        {
          "text": "protected",
          "aspects": [],
          "id": "55",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment": "Das geht mit protected."
        },
        {
          "text":
            "Indem ich wert auf die Sichtbarkeit private lese, aber zus\u00e4tzlich eine Methode getWert() implementiere (welche public ist). getWert() gibt dann die variable wert zur\u00fcck (mit return) damit jeder sie auslesen kann.",
          "aspects": [],
          "id": "56",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Das geht, indem ich 'wert' auf die Sichtbarkeit private setze, aber zus\u00e4tzlich eine Methode 'getWert()' implementiere, welche public ist. 'getWert()' gibt dann die Variable 'wert' zur\u00fcck, damit jeder sie auslesen kann."
        }
      ]
    },
    {
      "id": "5",
      "title": "Vererbung - Schnittstellen und abstrakte Klassen",
      "text":
        "Sie m\u00f6chten eine als private deklarierte Variable und mehrere implementierte Methoden vererben. Verwenden Sie eine Schnittstelle oder eine abstrakte Klasse? Begr\u00fcnden Sie Ihre Antwort.",
      "type": "reason",
      "stopwordExceptions": ["abstrakt", "Klasse", "Schnittstelle", "implementieren", "Methode"],
      "referenceAnswer": {
        "text":
          "Man muss eine abstrakte Klasse verwenden, weil Schnittstellen keine implementierten Methoden bereitstellen k\u00f6nnen.",
        "answerCategory": "correct",
        "assignedWeights": {
          "müssen": 0.4,
          "abstrakt": 1,
          "Klasse": 1,
          "weil": 1,
          "Schnittstelle": 0.8,
          "keine": 0.8,
          "implementieren": 0.8,
          "Methode": 0.8,
          "bereitstellen": 0.1,
          "können": 0.6
        }
      },
      "answersAnnotation": [
        {
          "text":
            "Abstrakte Klassen Basisklassen vererben nur implemetierte Mehtoden, Schnittstellen stellen keine implementierten Methoden bereit Abstrakte klassen werden durch abstract class deklariert",
          "aspects": [],
          "id": "1",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Abstrakte Klassen vererben nur implemetierte Mehtoden. Schnittstellen stellen keine implementierten Methoden bereit. Abstrakte klassen werden durch abstract class deklariert."
        },
        {
          "text":
            "Eine abstrakte Klasse, da Schnittstellen keine implemenierte Methoden bereit stellen.",
          "aspects": [],
          "id": "2",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da Schnittstellen keine implemenierte Methoden bereitstellen."
        },
        {
          "text": "Eine Schnittstelle, da abstrakte Klasse keine Methoden weitergeben.",
          "aspects": [],
          "id": "3",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Man verwendet eine Schnittstelle, da abstrakte Klassen keine Methoden weitergeben."
        },
        {
          "text":
            "Schnittstellen vererben keine implementierten Methoden, doch abstrakte Klassen k\u00f6nnen, wenn sie vereerbt werden implementierte Methoden vererben. Normalerweise m\u00fcssen sie immer sp\u00e4ter implementiert werden.",
          "aspects": [],
          "id": "4",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Schnittstellen vererben keine implementierten Methoden. Abstrakte Klassen k\u00f6nnen, wenn sie vereerbt werden, implementierte Methoden vererben. Normalerweise m\u00fcssen sie immer sp\u00e4ter implementiert werden."
        },
        {
          "text":
            "Basisklassen vererben nur implementierte Methoden, Schnittstellen stellen keine implementierten Methoden bereit. manche Methoden brauchen eine Implementierung gleichzeitig k\u00f6nnen manche Methoden in der Basisklasse nicht implementiert sein. eine abstrakte Klasse kann unimplementierte Methoden enthalten markiert durch abstract. dacher w\u00fcrde ich eine abstrakte Kalsse w\u00e4hlen.",
          "aspects": [],
          "id": "5",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Basisklassen vererben nur implementierte Methoden. Schnittstellen stellen keine implementierten Methoden bereit. Manche Methoden brauchen eine Implementierung. Gleichzeitig k\u00f6nnen manche Methoden in der Basisklasse nicht implementiert sein. Eine abstrakte Klasse kann unimplementierte Methoden enthalten. Sie wird markiert durch abstract. Daher w\u00fcrde ich eine abstrakte Klasse w\u00e4hlen."
        },
        {
          "text": "-",
          "aspects": [],
          "id": "6",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        },
        {
          "text":
            "Abstrakte Klasse: da Schnittstellen keine implementierten Methoden bereitstellen.",
          "aspects": [],
          "id": "7",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Man verwendet abstrakte Klassen, da Schnittstellen keine implementierten Methoden bereitstellen."
        },
        {
          "text":
            "Abstrakte Klasse da Schnittstellen keine Implementierten Methoden bereit stellen.",
          "aspects": [],
          "id": "8",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da Schnittstellen keine implementierten Methoden bereitstellen."
        },
        {
          "text":
            "ich verwende eine abstrakte Klasse weil aus schnittstelle kann ich keine implementierte Methoden vererben.",
          "aspects": [],
          "id": "9",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Ich verwende eine abstrakte Klasse, weil ich aus Schnittstellen keine implementierte Methoden vererben kann."
        },
        {
          "text": "eine schnittstelle, weil man die darin enthaltenen methoden vererben kann",
          "aspects": [],
          "id": "10",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Man verwendet eine Schnittstelle, weil man die darin enthaltenen methoden vererben kann."
        },
        {
          "text":
            "ich verwende eine abstakte Klasse, weil nur in einer abstrakte klasse darf man Variablen deklarieren.",
          "aspects": [],
          "id": "11",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Ich verwende eine abstakte Klasse, weil man nur in einer abstrakten Klasse Variablen deklarieren darf."
        },
        {
          "text": "",
          "aspects": [],
          "id": "12",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": ""
        },
        {
          "text":
            "eine abstrakte klasse, da in einer schnittstelle die methoden nicht implementiert sein d\u00fcrfen",
          "aspects": [],
          "id": "13",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da in einer Schnittstelle die Methoden nicht implementiert sein d\u00fcrfen."
        },
        {
          "text": "abstrakte Klasse. Weil sie private ist und sonst nicht verwendet werden kann.",
          "aspects": [],
          "id": "14",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, weil sie private ist und sonst nicht verwendet werden kann."
        },
        {
          "text":
            "Bereits implementierte Methoden k\u00f6nnen nicht mit einer abstrakten Klasse vererbt werden. Daher Schnittstelle.",
          "aspects": [],
          "id": "15",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Bereits implementierte Methoden k\u00f6nnen nicht mit einer abstrakten Klasse vererbt werden. Daher verwendet man eine Schnittstelle."
        },
        {
          "text": "eine abstrakte Klasse, da Schnittstellen keine Datenfelder zur\u00fcck geben.",
          "aspects": [],
          "id": "16",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da Schnittstellen keine Datenfelder zur\u00fcckgeben."
        },
        {
          "text":
            "Da Schnittstellen keine Methoden implementieren und deren private deklarierte Variablen nicht vererbt werden, verwende man eine abstrakte Klasse.",
          "aspects": [],
          "id": "17",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Da Schnittstellen keine Methoden implementieren und deren private deklarierte Variablen nicht vererbt werden, verwendet man eine abstrakte Klasse."
        },
        {
          "text":
            "Man verwendet eine abstrakte Klasse, da die Schnittstellen nur Konstanten bereitstellen k\u00f6nnen und die Methoden bei abstrakten Klassen sowohl implementiert, als auch unimplementiert sein k\u00f6nnen.",
          "aspects": [],
          "id": "18",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da die Schnittstellen nur Konstanten bereitstellen k\u00f6nnen und die Methoden bei abstrakten Klassen sowohl implementiert, als auch unimplementiert sein k\u00f6nnen."
        },
        {
          "text": "Eine abstrakte Klasse, da nur diese Datenfelder vererben kann.",
          "aspects": [],
          "id": "19",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da nur diese Datenfelder vererben kann."
        },
        {
          "text":
            "Es sollte eine abstrakte Klasse verwendet werden. Die abstrakte Klasse f\u00fcllt die L\u00fccke zwischen der Basisklasse und der Schnittstelle. Mit einer Schnittstelle lassen sich au\u00dferdem keine Variablen und auch keine implementierte Methoden vererben.",
          "aspects": [],
          "id": "20",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Es sollte eine abstrakte Klasse verwendet werden. Die abstrakte Klasse f\u00fcllt die L\u00fccke zwischen der Basisklasse und der Schnittstelle. Mit einer Schnittstelle lassen sich au\u00dferdem keine Variablen und auch keine implementierte Methoden vererben."
        },
        {
          "text": "Schnittstelle",
          "aspects": [],
          "id": "21",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment": "Man verwendet ein Schnittstelle."
        },
        {
          "text":
            "Man verwendet eine Schnittstelle da abstrakte Klassen unimplementierte methoden enthalten k\u00f6nnen.",
          "aspects": [],
          "id": "22",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Man verwendet eine Schnittstelle, da abstrakte Klassen unimplementierte Methoden enthalten k\u00f6nnen."
        },
        {
          "text":
            "Die Verwendung einer abstrakten Klasse ist hier sinnvoller, da die bereits implementierten Methoden erhalten bleiben sollten, was bei einer Schnittstelle nicht m\u00f6glich ist.",
          "aspects": [],
          "id": "23",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Die Verwendung einer abstrakten Klasse ist hier sinnvoller, da die bereits implementierten Methoden erhalten bleiben, was bei einer Schnittstelle nicht m\u00f6glich ist."
        },
        {
          "text":
            "Ich verwende eine abstrakte Klasse, da man in einer Schnittstelle Methoden nur deklarieren kann und noch nicht implementieren. Au\u00dferdem kann man in einer Schnittstelle nur Konstanten verwenden.",
          "aspects": [],
          "id": "24",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Ich verwende eine abstrakte Klasse, da man in einer Schnittstelle Methoden nur deklarieren kann und noch nicht implementieren. Au\u00dferdem kann man in einer Schnittstelle nur Konstanten verwenden."
        },
        {
          "text":
            "eine abstrakte Klasse, da in einer Schnittstelle nur die Methoden deklariert werden und keine variablen.",
          "aspects": [],
          "id": "25",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da in einer Schnittstelle nur die Methoden deklariert werden und keine Variablen."
        },
        {
          "text":
            "Ich verwende eine abstrakte Klasse, da mit dieser problemlos Datenfelder vererbt werden k\u00f6nnen die nicht konstant sind.",
          "aspects": [],
          "id": "26",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Ich verwende eine abstrakte Klasse, da mit dieser problemlos Datenfelder vererbt werden k\u00f6nnen, die nicht konstant sind."
        },
        {
          "text":
            "ich verwende eine abstrakte Klasse, da die abstrakte Klasse Datenfelder bereitstellen kann und Schnittstellen nur konstante. Die Abstrakte Klasse veerbt implementierte Methoden. Schnittstellen stellen keine implementierte Methoden bereit.",
          "aspects": [],
          "id": "27",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Ich verwende eine abstrakte Klasse, da die abstrakte Klasse Datenfelder bereitstellen kann und Schnittstellen nur Konstanten. Die Abstrakte Klasse vererbt implementierte Methoden. Schnittstellen stellen keine implementierten Methoden bereit."
        },
        {
          "text":
            "Abstrakte Klassen. Diese Klassen sind spezielle Klassen die viele abstrakte Methoden beinhalten. Entweder abgeleitete Klassen m\u00fcssen abstract sein oder die abstrakte Methoden sind in dem Fall implementiert.",
          "aspects": [],
          "id": "28",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Man verwendet abstrakte Klassen. Diese Klassen sind spezielle Klassen, die viele abstrakte Methoden beinhalten. Entweder m\u00fcssen abgeleitete Klassen abstract sein oder die abstrakte Methoden sind in dem Fall implementiert."
        },
        {
          "text": "abstrakte Klasse",
          "aspects": [],
          "id": "29",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment": "Man verwendet eine abstrakte Klasse."
        },
        {
          "text":
            "Man ver wendet eine abstrakte Klasse, weil Schnittstellen nur Konstanten breitstellen.",
          "aspects": [],
          "id": "30",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, weil Schnittstellen nur Konstanten breitstellen."
        },
        {
          "text":
            "Eine Klasse kann nur eine Basisklasse haben, aber beliebige Schnittsctellen implementieren. Deshalb Schnittstelle.",
          "aspects": [],
          "id": "31",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Eine Klasse kann nur eine Basisklasse haben, aber beliebige Schnittstellen implementieren. Deshalb verwendet man eine Schnittstelle."
        },
        {
          "text":
            "eine anstrakte Klassse denn abtrakte Klassen k\u00f6nnen implementiere Methoden enthalten und wenn eine abtrakte Klasse abgeleitet wird, m\u00fcssen die abtrakt markierten Methoden implementiert werden. um eine private deklarierte Variable zu vererben braucht man auf jeden fall getter und setter. Deshalb verwendet man eine abtrakte Klasse",
          "aspects": [],
          "id": "32",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Man verwendet eine anstrakte Klassse, denn abtrakte Klassen k\u00f6nnen implementiere Methoden enthalten und wenn eine abtrakte Klasse abgeleitet wird, m\u00fcssen die abtrakt markierten Methoden implementiert werden. Um eine private deklarierte Variable zu vererben braucht man auf jeden fall Getter und Setter. Deshalb verwendet man eine abtrakte Klasse."
        },
        {
          "text":
            "eine abstrakte weil die basis klassen k\u00f6nnen datenfelder bereitstellen aber die schnittstellen nur konstanten Baisklassen vererben nur implementierte methoden. PS man kann keine konkrete objekte erzeugen.",
          "aspects": [],
          "id": "33",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, weil die Basisklassen Datenfelder bereitstellen k\u00f6nnen Schnittstellen aber  nur Konstanten. Baisklassen vererben nur implementierte Methoden."
        },
        {
          "text":
            "Ich verwende eine abstrakte Klasse: Impl. Methoden k\u00f6nnen verwendet werden. Bei Schnittstellen k\u00f6nnen Methoden nicht Impl.",
          "aspects": [],
          "id": "34",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Ich verwende eine abstrakte Klasse, weil dort implementierte Methoden verwendet werden k\u00f6nnen. Bei Schnittstellen k\u00f6nnen Methoden nicht implementiert vererbt werden."
        },
        {
          "text":
            "mit Schnittstelle werden wir \"\"Implement\"\"benutzen ,weil die schnittstelle alle ben\u00f6tige Informationen beihaltet. Mit Abstrakte Klassen auf grund der kapselung von Intanzen.",
          "aspects": [],
          "id": "35",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Wir werden Schnittstellen mit implements benutzen, weil die Schnittstelle alle ben\u00f6tigten Informationen beinhaltet."
        },
        {
          "text":
            "Ich verwende eine abstrakte Klasse, da diese implementierte Methoden enthalten darf und private Variablen erlaubt sind. Selbst wenn manche Methoden mit abstract gekennzeichnet sind, ist es erlaubt, die abstrakte Klasse zu vererben, wenn alle mit abstact gekennzeichneten Methoden implementiert sind. Wenn es eine abstrakte Methode gibt, die nicht implementiert ist, muss die abgeleitete Klasse auch abstract sein, was in diesem Fall aber nicht so ist.",
          "aspects": [],
          "id": "36",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Ich verwende eine abstrakte Klasse, da diese implementierte Methoden enthalten darf und private Variablen erlaubt sind. Selbst wenn manche Methoden mit abstract gekennzeichnet sind, ist es erlaubt die abstrakte Klasse zu vererben, wenn alle mit abstract gekennzeichneten Methoden implementiert sind. Wenn es eine abstrakte Methode gibt, die nicht implementiert ist, muss die abgeleitete Klasse auch abstract sein, was in diesem Fall aber nicht so ist."
        },
        {
          "text":
            "ich verwende eine Abstrakte klasse, da ich ich Methoden Implementieren will und eine schnittstelle keine Implementierung erlaubt und die private variable ist auch ein hinweis darauf, da man auf sie mit einem Getter zugreifen muss",
          "aspects": [],
          "id": "37",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Ich verwende eine abstrakte Klasse, da ich Methoden implementieren will und eine Schnittstelle keine Implementierung erlaubt. Die private Variable ist auch ein Hinweis darauf, dass man auf sie mit einem Getter zugreifen muss."
        },
        {
          "text":
            "Man verwendet daf\u00fcr eine abstrakte Klasse. Da abstrakte Klassen nicht nur Mehtoden implementiern k\u00f6nnen sondern auch Datenfelder.",
          "aspects": [],
          "id": "38",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Man verwendet daf\u00fcr eine abstrakte Klasse, da abstrakte Klassen nicht nur Mehtoden implementiern k\u00f6nnen sondern auch Datenfelder."
        },
        {
          "text":
            "Man verwendet eine abstrakte Klasse, da Schnittstellen keine implementierte Methoden bereitstellen.",
          "aspects": [],
          "id": "39",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da Schnittstellen keine implementierten Methoden bereitstellen."
        },
        {
          "text":
            "eine abstrakte Klasse da Schnittstellen eher f\u00fcr das implementieren f\u00fcr Methoden zust\u00e4ndig sind.",
          "aspects": [],
          "id": "40",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da Schnittstellen eher f\u00fcr das implementieren von Methoden zust\u00e4ndig sind."
        },
        {
          "text":
            "Man nimmt eine abstrakte Klasse, da Schnittstellen nur Konstanten vererben k\u00f6nnen.",
          "aspects": [],
          "id": "41",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Man nimmt eine abstrakte Klasse, da Schnittstellen nur Konstanten vererben k\u00f6nnen."
        },
        {
          "text": "Eine Schnittstelle, bei einer abstrakten Klasse darf man nicht inistanzieieren.",
          "aspects": [],
          "id": "42",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Man verwendet eine Schnittstelle, weil man bei einer abstrakten Klasse nicht instanziieren darf."
        },
        {
          "text":
            "Eine abstrakte Klasse, da Methoden in einer Schnittstelle nicht implementiert sein d\u00fcrfen.",
          "aspects": [],
          "id": "43",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Man nimmt eine abstrakte Klasse, da Methoden in einer Schnittstelle nicht implementiert sein d\u00fcrfen."
        },
        {
          "text":
            "Abstrakte Klassen, denn sie k\u00f6nnen bereits implementierte Methoden beinhalten, Schnittstellen sind nicht implementiert.",
          "aspects": [],
          "id": "44",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Man verwendet abstrakte Klassen, denn sie k\u00f6nnen bereits implementierte Methoden beinhalten. Methoden in Schnittstellen sind nicht implementiert."
        },
        {
          "text": "-",
          "aspects": [],
          "id": "45",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        },
        {
          "text": "-",
          "aspects": [],
          "id": "46",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        },
        {
          "text": "eine abstrakte klasse weil es um merere methoden geht die private seien sollen",
          "aspects": [],
          "id": "47",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Man nimmt eine abstrakte Klasse, weil es um mehrere Methoden geht die private seien sollen."
        },
        {
          "text": "Schnittstelle",
          "aspects": [],
          "id": "48",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment": "Man nimmt eine Schnittstelle."
        },
        {
          "text":
            "Eine Abstrakte Klasse, weil diese auch auf private deklarierte Variable und Methoden zugreifen kann.",
          "aspects": [],
          "id": "49",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Man nimmt eine abstrakte Klasse, weil diese auch auf private deklarierte Variablen und Methoden zugreifen kann."
        },
        {
          "text":
            "Man verwendet eine abstrakte Klasse, da Schnittstellen keine implementierte Methoden zur Verf\u00fcgung stellen.",
          "aspects": [],
          "id": "50",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Man verwendet eine abstrakte Klasse, da Schnittstellen keine implementierten Methoden zur Verf\u00fcgung stellen."
        },
        {
          "text": "-",
          "aspects": [],
          "id": "51",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        },
        {
          "text": "eine abstrakte Klasse weil die Unterklassen von ihr erben.",
          "aspects": [],
          "id": "52",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Man nimmt eine abstrakte Klasse, weil die Unterklassen von ihr erben."
        },
        {
          "text": "Ich w\u00fcrde eine Schnittstelle benutzen.",
          "aspects": [],
          "id": "53",
          "points": 0,
          "answerCategory": "guessing",
          "correctionOrComment": "Ich w\u00fcrde eine Schnittstelle benutzen."
        },
        {
          "text":
            "eine Abstrakte, da bei der Schnittstelle man ,nach der Vererbung, die Methoden noch implementieren muss.",
          "aspects": [],
          "id": "54",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Man nimmt eine abstrakte Klasse, da man bei der Schnittstelle die Methoden nach der Vererbung noch implementieren muss."
        },
        {
          "text": "Eine abstrake Klasse da die Methoden implementiert sein sollen.",
          "aspects": [],
          "id": "55",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment": "Eine abstrake Klasse, da die Methoden implementiert sein sollen."
        },
        {
          "text":
            "Abstrakte Klasse: die privat deklarierte Variable ist nur in einer Klasse sichtbar.",
          "aspects": [],
          "id": "56",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Man nimmt eine abstrakte Klasse, da die privat deklarierte Variable nur in einer Klasse sichtbar ist."
        }
      ]
    },
    {
      "id": "7",
      "title": "While-Schleife",
      "text":
        "Wie sorgen Sie daf\u00fcr, dass Ihre while-Schleife nicht endlos l\u00e4uft? Nennen Sie mindestens eine M\u00f6glichkeit.",
      "type": "procedure",
      "referenceAnswer": {
        "text":
          "Man kann sicherstellen, dass die Bedingung der while-Schleife durch Ver\u00e4nderungen im Schleifenrumpf false wird, die Schleifenausf\u00fchrung mittels break abbrechen oder die aktuell ausgef\u00fchrte Methode mit return beenden.",
        "answerCategory": "correct",
        "assignedWeights": {
          "können": 0.4,
          "sicherstellen": 0.1,
          "Bedingung": 0.3,
          "Veränderung": 0.3,
          "Schleifenrumpf": 0.3,
          "false": 0.3,
          "werden": 0.3,
          "Schleifenausführung": 0.1,
          "mittels": 0.1,
          "break": 0.6,
          "abbrechen": 0.4,
          "oder": 0.5,
          "aktuell": 0.1,
          "ausgeführt": 0.2,
          "Methode": 0.1,
          "return": 0.6,
          "beenden": 0.3
        }
      },
      "answersAnnotation": [
        {
          "text":
            "man k\u00f6nnte die while schleife mit \"\"break\"\" unterbrechen und mit return weiterf\u00fchren.",
          "aspects": [],
          "id": "1",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Man k\u00f6nnte die while-Schleife mit break unterbrechen und mit return weiterf\u00fchren."
        },
        {
          "text": "Die Schleife kann mit \"\"break\"\" unterbrochen werden.",
          "aspects": [],
          "id": "2",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Die Schleife kann mit break unterbrochen werden."
        },
        {
          "text":
            "return : beendet aktuelle Methode break : verl\u00e4sst Schleife an dieser Stelle continue : Programm springt zjm Schleifenkopf",
          "aspects": [],
          "id": "3",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "return beendet die aktuelle Methode. break verl\u00e4sst Schleife an dieser Stelle. Bei continue springt das Programm zum Schleifenkopf."
        },
        {
          "text": "break;",
          "aspects": [],
          "id": "4",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Mit break kann die Schleife unterbrochen werden."
        },
        {
          "text":
            "Mit einem break return oder continue, damit sie entweder zum Anfang zur\u00fcckgeht(break) zur Fragestellung zur\u00fcckgeht (continue) oder abbricht (return).",
          "aspects": [],
          "id": "5",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Mit einem break, return oder continue, damit sie entweder zum Anfang zur\u00fcckgeht (break), zur Fragestellung zur\u00fcckgeht (continue) oder abbricht (return)."
        },
        {
          "text":
            "In der while schleife soll die Bedingung nich immer true ergeben dann ist sichergestellt dass wenn sie false dass man aus dem Block rauskommt Oder am Ende des Blocks ein break setzen dann kommt man automatisch aus der schleife raus.",
          "aspects": [],
          "id": "6",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "In der while-Schleife soll die Bedingung nich immer true ergeben. Dann ist sichergestellt dass wenn sie false wird, dass man aus dem Block rauskommt. Oder man kann am Ende des Blocks ein break setzen. Dann kommt man automatisch aus der Schleife raus."
        },
        {
          "text":
            "Zum Beispiel mit einer Abfrage(Bedingung) wenn zum beispiel die Schleife 3 mal durchlaufen soll. Dann benutzt man einfach break um die Schleife zu beenden bzw. rauszuspringen.",
          "aspects": [],
          "id": "7",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Das geht mit einer Abfrage (Bedingung), wenn  die Schleife zum Beispiel 3 mal durchlaufen soll. Dann benutzt man einfach break um die Schleife zu beenden."
        },
        {
          "text":
            "- Schleife verlassen mit break - Bedingung wird durch increment Operator erf\u00fcllt",
          "aspects": [],
          "id": "8",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Die Schleife kann man verlassen mit break. Die Bedingung wird durch den Inkrement Operator erf\u00fcllt."
        },
        {
          "text": "return break continue",
          "aspects": [],
          "id": "9",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment": "Das geht mit return, break und continue."
        },
        {
          "text":
            "return, beendet sie Schleife. break bringt die Schleife wieder ganz nach vorne. continue bringt die Schleife wieder zur\u00fcck zu der Frage.",
          "aspects": [],
          "id": "10",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "return beendet die Schleife. break bringt die Schleife wieder ganz nach vorne. continue bringt die Schleife wieder zur\u00fcck zu der Frage."
        },
        {
          "text": "Break oder return",
          "aspects": [],
          "id": "11",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Das geht mit break oder return."
        },
        {
          "text": "Die while-Schleife kann mit \"\"break\"\" unterbrochen werden.",
          "aspects": [],
          "id": "12",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Die while-Schleife kann mit break unterbrochen werden."
        },
        {
          "text": "verlassen durch break",
          "aspects": [],
          "id": "13",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Das verlassen ist durch break m\u00f6glich."
        },
        {
          "text":
            "wir k\u00f6nnen am ende \"\"Break\"\" des while schleife blocks \"\"break\"\" schreiben.",
          "aspects": [],
          "id": "14",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Wir k\u00f6nnen am ende des while-Schleife Blocks break schreiben."
        },
        {
          "text": "Mit break kann man eine while-Schleife unterbrechen",
          "aspects": [],
          "id": "15",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Mit break kann man eine while-Schleife unterbrechen."
        },
        {
          "text": "Es kann mit break unterbrochen werden",
          "aspects": [],
          "id": "16",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Es kann mit break unterbrochen werden."
        },
        {
          "text":
            "aus der Schleife wird ausgebrochen: break; zum Schleifenkopf springen: continue;",
          "aspects": [],
          "id": "17",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Aus der Schleife wird mit break ausgebrochen. Mit continue kann man zum Schleifenkopf springen."
        },
        {
          "text":
            "Um eine while-Schleife zu beenden verwendet man den Befehl break, sobald der Befehl break ausgef\u00fchrt wird springt das Programm aus der while-Schleife. Alternativ k\u00f6nnte man auch den Befehl return verwenden, um die Schleife zu beenden m\u00fcsste jedoch hinter dem reurn nichts stehen, so dass nichts ausgegeben wird",
          "aspects": [],
          "id": "18",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Um eine while-Schleife zu beenden verwendet man den Befehl break. Sobald der Befehl break ausgef\u00fchrt wird, springt das Programm aus der while-Schleife. Alternativ k\u00f6nnte man auch den Befehl return verwenden, um die Schleife zu beenden. Es m\u00fcsste jedoch hinter dem return nichts stehen, sodass nichts ausgegeben wird."
        },
        {
          "text": "break, return",
          "aspects": [],
          "id": "19",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Das geht mit break und return."
        },
        {
          "text":
            "wenn die Bedingung (boolean) false liefert wenn ein break / return spezifiziert ist",
          "aspects": [],
          "id": "20",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Sie wird beendet, wenn die Bedingung false liefert oder wenn ein break oder return spezifiziert ist."
        },
        {
          "text": "-",
          "aspects": [],
          "id": "21",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        },
        {
          "text": "break return",
          "aspects": [],
          "id": "22",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Das geht mit break oder return."
        },
        {
          "text":
            "Nach der Zeile mit der Methode, kann der befehl break eingef\u00fcgt werden. Unter diesen Umst\u00e4nden bricht die Schleife ab und das Programm wird nach der Schleife weiter ausgef\u00fchrt.",
          "aspects": [],
          "id": "23",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Nach der Zeile mit der Methode, kann der Befehl break eingef\u00fcgt werden. Unter diesen Umst\u00e4nden bricht die Schleife ab und das Programm wird nach der Schleife weiter ausgef\u00fchrt."
        },
        {
          "text":
            "Mithilfe des break-Befehls kann eine Endlosschleife verlassen werden. Auch mit dem return-Befehl ist dies m\u00f6glich.",
          "aspects": [],
          "id": "24",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Mithilfe des break Befehls kann eine Endlosschleife verlassen werden. Auch mit dem return Befehl ist dies m\u00f6glich."
        },
        {
          "text": "break Bedingung angeben z.B.(1<x) continue",
          "aspects": [],
          "id": "25",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment": "Das geht mittels break, einer Bedingung oder continue."
        },
        {
          "text":
            "indem man einen break hinzuf\u00fcgt, der ab einem bestimmten Punkt die Schleife unterbricht",
          "aspects": [],
          "id": "26",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Das geht, indem man einen break hinzuf\u00fcgt, der ab einem bestimmten Punkt die Schleife unterbricht."
        },
        {
          "text":
            "Indem man Return mit in die schleife einsetzt. Oder indem man Break mit in die Schleife einbaut.",
          "aspects": [],
          "id": "27",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Indem man return mit in die Schleife einsetzt oder indem man break mit in die Schleife einbaut."
        },
        {
          "text":
            "1. Durch eine Abbruchbedingung im Schleifenkopf 2. Durch ein break innerhalb der Schleife",
          "aspects": [],
          "id": "28",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Das geht durch eine Abbruchbedingung im Schleifenkopf, oder durch ein break innerhalb der Schleife."
        },
        {
          "text": "mit dem Befehl: break;",
          "aspects": [],
          "id": "29",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Das geht mit dem Befehl break."
        },
        {
          "text": "break oder return",
          "aspects": [],
          "id": "30",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Das geht mittels break oder return."
        },
        {
          "text":
            "mit break oder return return gibt ein Code zur\u00fcck dass die Schleife nicht mehr weiterlaufen l\u00e4sst",
          "aspects": [],
          "id": "31",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Mit den Befehlen break oder return gibt ein Code zur\u00fcck, sodass die Schleife nicht mehr weiterlaufen kann."
        },
        {
          "text": "die while schleife kann mit mit \"\"break\"\" unterbrechen.",
          "aspects": [],
          "id": "32",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Die while-Schleife kann mit mit break unterbrochen werden."
        },
        {
          "text": "Mit einem return oder break Anweisung stoppen.",
          "aspects": [],
          "id": "33",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Man kann sie mit einer return oder break Anweisung stoppen."
        },
        {
          "text":
            "return springt aus aktueller Methode bedingung wird in schleife selber ge\u00e4ndert",
          "aspects": [],
          "id": "34",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Mit return springt das Programm aus der aktuellen Methode. Die Bedingung wird in der Schleife selber ge\u00e4ndert."
        },
        {
          "text":
            "Um aus der Schleife zu springen benutzt man break, oder man kann auch return benutzen.",
          "aspects": [],
          "id": "35",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Um aus der Schleife zu springen benutzt man break, oder man kann auch return benutzen."
        },
        {
          "text":
            "In dem ich in die while-Schleife, (nach dem Schleifenrumpf) einen break- oder continue-Befehl eigebe.",
          "aspects": [],
          "id": "36",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Das geht, indem ich in die while-Schleife (nach dem Schleifenrumpf) einen break oder continue Befehl eingebe."
        },
        {
          "text":
            "mit break oder return da return ein wert zur\u00fcck gibt, wird der Code danach nicht mehr weiter gelesen und die Schleife wird beendet. zb return a;",
          "aspects": [],
          "id": "37",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Das geht mit break oder return. Da return einen Wert zur\u00fcckgibt, wird der Code danach nicht mehr weiter gelesen und die Schleife wird beendet."
        },
        {
          "text": "break",
          "aspects": [],
          "id": "38",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Das geht mit break."
        },
        {
          "text": "die schleiche kann man mit \"\"break\"\" etc. unterbrechen",
          "aspects": [],
          "id": "39",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Die Schleife kann man mit break unterbrechen."
        },
        {
          "text": "return, break, continue(continue springt an den Schleifenanfang)",
          "aspects": [],
          "id": "40",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Das geht mit return, break oder continue. Bei continue springt das Programm an den Schleifenanfang."
        },
        {
          "text": "Ich schlie\u00dfe die { } zu, und setze auch dazu ein break",
          "aspects": [],
          "id": "41",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment": "Ich schlie\u00dfe die Klammern zu, und setze dazu ein break."
        },
        {
          "text": "Indem ich break unten dazu schreibe.",
          "aspects": [],
          "id": "42",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment": "Das geht, indem ich break unten dazu schreibe."
        },
        {
          "text":
            "Die Variable , die in der while Schleife abgefragt wird, muss jedes mal hochgez\u00e4hlt werden. BSP: x++; Andere M\u00f6glichkeit w\u00e4re es mit dem Befehl break;",
          "aspects": [],
          "id": "43",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Die Variable, die in der while-Schleife abgefragt wird, muss jedes mal hochgez\u00e4hlt werden. Eine andere M\u00f6glichkeit w\u00e4re es die Schleife mit dem Befehl break zu beenden."
        },
        {
          "text": "break",
          "aspects": [],
          "id": "44",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Mit break kann man eine Schleife unterbrechen."
        },
        {
          "text": "Befehl break; benutzen",
          "aspects": [],
          "id": "45",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Das geht, indem man den Befehl break benutzt."
        },
        {
          "text":
            "Bei der \"\"while\"\" schleife den befehl \"\"break\"\" eingeben um die schleife zu unterbrechen",
          "aspects": [],
          "id": "46",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Man kann in die while-Schleife den Befehl break eingeben um die Schleife zu unterbrechen."
        },
        {
          "text":
            "ich nutze die break anweisung um aus der Methode zu kommen und continue um wieder reinzukommen oder die return anweisung.",
          "aspects": [],
          "id": "47",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Ich nutze die break Anweisung um aus der Methode zu kommen und continue um wieder reinzukommen. Es geht auch die return Anweisung."
        },
        {
          "text":
            "In der Methode \"\"while\"\" das Komando \"\"break\"\" angeben. Au\u00dferdem gibts auch die M\u00f6glichekit die Schleife bis zu einenm bestimmten Durchgang laufen zu lassen.",
          "aspects": [],
          "id": "48",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Man kann in der Methode while das Kommando break angeben. Au\u00dferdem gibt es auch die M\u00f6glichekit die Schleife bis zu einem bestimmten Durchgang laufen zu lassen."
        },
        {
          "text": "break;",
          "aspects": [],
          "id": "49",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Das geht mit break."
        },
        {
          "text": "break; return;",
          "aspects": [],
          "id": "50",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Das geht mit break oder return."
        },
        {
          "text":
            "In dem man unter der Schleife einen bestimmten Befehl ausgibt. Beispiele daf\u00fcr sind \"\"break;\"\" und \"\"continue;\"\"",
          "aspects": [],
          "id": "51",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Das geht, indem man unter der Schleife einen bestimmten Befehl ausgibt. Beispiele daf\u00fcr sind break und continue."
        },
        {
          "text":
            "Mit einer Bedingung wird break; oder continue; aktiviert und die while-schleife wird beendet(break;) oder an anderer stelle weitergef\u00fchrt(continue;)",
          "aspects": [],
          "id": "52",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Mit einer Bedingung wird break oder continue aktiviert und die while-Schleife wird beendet (break) oder an anderer Stelle weitergef\u00fchrt (continue)"
        },
        {
          "text": "Man kann es abrechen mit einer Bedingung der man ein Break zuweist",
          "aspects": [],
          "id": "53",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Man kann es mit einer Bedingung abbrechen, der man ein break zuweist."
        },
        {
          "text": "mit Break beendet man es",
          "aspects": [],
          "id": "54",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Mit break beendet man es."
        },
        {
          "text": "Um keine endlos Schleife zu haben sollte man mit \"\"break\"\" es stopen",
          "aspects": [],
          "id": "55",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Um keine Endlosschleife zu haben sollte man sie mit break stoppen."
        },
        {
          "text":
            "Indem man in der while Schleife einen ver\u00e4nderbaren boolean Wert zuteilt bzw eine ver\u00e4nderbare Abfrage (i<1) z.b.: boolean bol = true; while(bol){ tuwas(); bol = false; }",
          "aspects": [],
          "id": "56",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Das geht, indem man in der while-Schleife einen ver\u00e4nderbaren boolean Wert abfragt oder eine ver\u00e4nderbare Abfrage aufruft."
        },
        {
          "text":
            "1. einen counter vor der schleife iniziieren (int counter = 0;), am schleifenanfang eine abfrage einbauen (counter <= 10) und in der schleife hochz\u00e4hlen lassen (counter++;) 2. die schleife mit (true) auf endlos setzen. innerhalb der Schleife dann via if(){} eine inhaltlich korrekte abfrage starten. In der if-Verzweigung dann ein \"\"break;\"\" schreiben, um die Schleife zu beenden oder ein \"\"return\"\", um die komplette Methode (incl Schleife) zu beenden.",
          "aspects": [],
          "id": "57",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Man kann einen Counter vor der Schleife iniziieren. Am Schleifenanfang muss man dann eine Abfrage einbauen und den Counter in der Schleife hochz\u00e4hlen lassen. Man kann die Schleife auch mit true auf endlos setzen und dann innerhalb der Schleife in einer if-Verzweigung ein break schreiben, um die Schleife zu beenden oder ein return setzen, um die komplette Methode zu beenden."
        },
        {
          "text":
            "continue um reinzukommen oben am schleifenkopf anzufangen, break um rauszukommen.",
          "aspects": [],
          "id": "58",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Mit continue kann man neu oben am schleifenkopf anfangen oder mit break ganz rauszukommen."
        },
        {
          "text": "mit if und else mit for schleife",
          "aspects": [],
          "id": "59",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment": "Das geht mit if und else und mit einer for-Schleife."
        },
        {
          "text": "Mit einer Bedingung, welcher ich einen break oder continue zuweise.",
          "aspects": [],
          "id": "60",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Es geht mit einer Bedingung, welcher ich einen break oder continue zuweise."
        },
        {
          "text":
            "entweder durch eine abfrage im programm die schleife mit break beenden, oder einen, in der schleife ver\u00e4nderten wert, in die while abfrage einbauen die zum beispiel dann Abfrage++;",
          "aspects": [],
          "id": "61",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Das geht entweder durch eine Abfrage im Programm, in welcher die Schleife mit break beendet wird, oder einen in der Schleife ver\u00e4nderten Wert, der in der while Abfrage einbaut wird."
        },
        {
          "text": "man braucht eine Bedingung dazu f\u00fcgt man z.B ein break hinzu",
          "aspects": [],
          "id": "62",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Man braucht daf\u00fcr eine Bedingung und f\u00fcgt man ein break hinzu."
        },
        {
          "text": "return break / continue",
          "aspects": [],
          "id": "63",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment": "Das geht mit return, break oder continue."
        },
        {
          "text":
            "mann k\u00f6nnte die die schleife mit \"\" break\"\" unterbrechen und mit \"\"return\"\" weiterf\u00fchren.",
          "aspects": [],
          "id": "64",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Man k\u00f6nnte die Schleife mit break unterbrechen und mit return weiterf\u00fchren."
        },
        {
          "text": "man kann ein break befehl einbauen",
          "aspects": [],
          "id": "65",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Man kann einen break Befehl einbauen."
        },
        {
          "text":
            "mit continue kommen wir an den schleifenkopf, mit break beenden wir die schleife.",
          "aspects": [],
          "id": "66",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Mit continue kommen wir an den Schleifenkopf und mit break beenden wir die Schleife."
        },
        {
          "text": "break;",
          "aspects": [],
          "id": "67",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Das geht mit break."
        },
        {
          "text": "break",
          "aspects": [],
          "id": "68",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Das geht mit break."
        },
        {
          "text": "mit \"\"break\"\" beendet man die Schleife.",
          "aspects": [],
          "id": "69",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment": "Mit break beendet man die Schleife."
        },
        {
          "text":
            "Variable in der Bedingung, die im K\u00f6rper ver\u00e4ndert wird. Beenden durch Return.",
          "aspects": [],
          "id": "70",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Das geht mit einer Variablen in der Bedingung, die im K\u00f6rper ver\u00e4ndert wird. Man kann sie auch durch return beenden."
        },
        {
          "text":
            "Man kann in der Schleife eine zeile:\"\" break;\"\" einf\u00fcgen um die Schleife zu unterbrechen.",
          "aspects": [],
          "id": "71",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Man kann in der Schleife eine Zeile break einf\u00fcgen um die Schleife zu unterbrechen."
        },
        {
          "text": "-",
          "aspects": [],
          "id": "72",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        }
      ]
    },
    {
      "id": "13",
      "text": "Erkl\u00e4ren Sie den Zusammenhang zwischen Klassen und Objekten.",
      "title": "Zusammenhang zwischen Klassen und Objekten",
      "type": "comparison",
      "stopwordExceptions": ["Klasse", "Objekt"],
      "referenceAnswer": {
        "text":
          "Eine Klasse ist der Bauplan f\u00fcr ein Objekt. Ein Objekt ist eine konkrete Instanz einer Klasse.",
        "answerCategory": "correct",
        "assignedWeights": {
          "Klasse": 1,
          "sein": 1,
          "Bauplan": 1,
          "Objekt": 1,
          "konkret": 0.3,
          "Instanz": 1
        }
      },
      "answersAnnotation": [
        {
          "text":
            "Alle Objekte haben einen Bauplan und dieser Bauplan des Objektes ist die klasse. Objekte haben den Typ ihrer Klasse. Die Klasse eines Objekte ist wie bei uns Menschen die DNA. Die Klasse bestimmt Aussehen und Eigenschaften. Aber ist selber nicht das Objekt.",
          "aspects": [],
          "id": "61",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Alle Objekte haben einen Bauplan und dieser Bauplan des Objektes ist die Klasse. Objekte haben den Typ ihrer Klasse. Die Klasse eines Objekte ist wie bei uns Menschen die DNA. Die Klasse bestimmt Aussehen und Eigenschaften, aber ist selber nicht das Objekt."
        },
        {
          "text":
            "alle objekte entstehen durch einen Bauplan. Dieser Bauplan ist die Klasse des Objektes, das Objekt ist eine Instanz der Klasse. Objekte haben ihren typ in der klasse. Die Klasseeines objektes ist f\u00fcr das objekt ca das selbe wie die DNA f\u00fcr den menschen. -sie bestimmt aussehen und eigenschaft. ist aber selbst nicht das Objekt.",
          "aspects": [],
          "id": "62",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Alle Objekte entstehen durch einen Bauplan. Dieser Bauplan ist die Klasse des Objektes. Das Objekt ist eine Instanz der Klasse. Objekte haben ihren Typ in der Klasse. Die Klasse eines Objektes ist f\u00fcr das Objekt ungef\u00e4hr dasselbe, wie die DNA f\u00fcr den Menschen. Sie bestimmt Aussehen und Eigenschaften sind aber nicht selbst das Objekt."
        },
        {
          "text":
            "objekt ist zum bsp ein bauplan und der Bauplan w\u00e4re in dem fall eine Klasse. Klassen sind bestimmte themen berreiche bsp auch Autos und objekt w\u00e4re in dem fall ein",
          "aspects": [],
          "id": "63",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Ein Objekt ist zum Beispiel ein Bauplan und der Bauplan w\u00e4re in dem Fall eine Klasse. Klassen sind bestimmte Themenbereiche."
        },
        {
          "text":
            "Die Klassen sind der Bauplan von Objekten. Objekte kann man sich selber zulegen indem man sie mit \"\"new\"\" neu definiert.",
          "aspects": [],
          "id": "64",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Die Klassen sind der Bauplan von Objekten. Objekte kann man sich selber zulegen, indem man sie mit new neu definiert."
        },
        {
          "text":
            "Die Klasse ist der Bauplan f\u00fcr das Objekt, hei\u00dft das Objekt ist eine Instanz der Klasse. In der Klasse wird das Ger\u00fcst aufgebaut auf das sich das Objekt bezieht und hier die F\u00e4higkeiten definiert werden bzw. Objekte haben den Typ ihrer Klasse",
          "aspects": [],
          "id": "65",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Die Klasse ist der Bauplan f\u00fcr das Objekt. Das hei\u00dft, das Objekt ist eine Instanz der Klasse. In der Klasse wird das Ger\u00fcst aufgebaut auf das sich das Objekt bezieht und die F\u00e4higkeiten werden definiert. Objekte haben den Typ ihrer Klasse."
        },
        {
          "text":
            "Objekt wird durch seine Klasse definiert. Die Klasse ist der Bauplan f\u00fcr das Objekt. Bauplan = Klasse des Objektes und Objekt = Instanz der Klasse. Objekte haben die Typen der Klasse Code der klasse legt die Eigenschaften der Objekte fest",
          "aspects": [],
          "id": "66",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Ein Objekt wird durch seine Klasse definiert. Die Klasse ist der Bauplan f\u00fcr das Objekt. Der Bauplan ist die Klasse des Objektes und das Objekt ist die Instanz der Klasse. Objekte haben die Typen der Klasse. Der Code der Klasse legt die Eigenschaften der Objekte fest."
        },
        {
          "text":
            "Die Klasse eines Objektes ist f\u00fcr das Objekt wie die DNA f\u00fcr den Menschen: Klasse bestimmt aussehen und Eigenschaften aber ist nicht selbst das Objekt. Objekte entstehen durch eine Art Bauplan. Der Bauplan ist die Klasse eines Objekts",
          "aspects": [],
          "id": "67",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Die Klasse eines Objektes ist f\u00fcr das Objekt wie die DNA f\u00fcr den Menschen. Die Klasse bestimmt Aussehen und Eigenschaften aber ist nicht selbst das Objekt. Objekte entstehen durch eine Art Bauplan. Der Bauplan ist die Klasse eines Objekts."
        },
        {
          "text": "Klassen sind der Bauplan von Objekten. Objekte entstehen mit new.",
          "aspects": [],
          "id": "68",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment": "Klassen sind der Bauplan von Objekten. Objekte entstehen mit new."
        },
        {
          "text":
            "Die Klasse des Objektes ist f\u00fcr das Objekt in etwa wie die DNA beim Menschen. Sie bestimmt Aussehen und Eigenschaften des Objekts, aber die Klasse ist nicht das Objekt selbst, von jeder Klasse kann auch ein Objekt erstellt werden.",
          "aspects": [],
          "id": "69",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Die Klasse des Objektes ist f\u00fcr das Objekt in etwa wie die DNA beim Menschen. Sie bestimmt Aussehen und Eigenschaften des Objekts, aber die Klasse ist nicht das Objekt selbst. Von jeder Klasse kann auch ein Objekt erstellt werden."
        },
        {
          "text":
            "Eine Klasse ist wie eine Art Bauplan f\u00fcr den Objekt . Ein Objekt ist ein Instanz der Klasse und enth\u00e4lt die Element wie in der Klasse",
          "aspects": [],
          "id": "70",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Eine Klasse ist wie eine Art Bauplan f\u00fcr ein Objekt . Ein Objekt ist eine Instanz der Klasse und enth\u00e4lt die Elemente wie in der Klasse."
        },
        {
          "text":
            "eine klasee ist wie baustein fuer die objektealle Faehigkeiten des objektes werden durch die Klasse definiert.",
          "aspects": [],
          "id": "71",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Eine Klasse ist wie ein Baustein f\u00fcr die Objekte. Alle F\u00e4higkeiten des Objektes werden durch die Klasse definiert."
        },
        {
          "text":
            "Alle Objekte entstehen durch einen Bauplan Dieser Bauplan ist die Klasse des Objektes, das Objekt ist eine Instanz der Klasse. Objekte haben den Typ ihrer Klasse Die Klasse eines Objektes ist f\u00fcr das Objekt in etwa dasselbe wie die DNA f\u00fcr den Menschen Sie besto,,t aussehen und eigenschaften ABER SIE selbst ist nicht das objekt",
          "aspects": [],
          "id": "72",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Alle Objekte entstehen durch einen Bauplan. Dieser Bauplan ist die Klasse des Objektes. Das Objekt ist eine Instanz der Klasse. Objekte haben den Typ ihrer Klasse. Die Klasse eines Objektes ist f\u00fcr das Objekt in etwa dasselbe wie die DNA f\u00fcr den Menschen. Sie bestimmt aussehen und Eigenschaften, aber sie selbst ist nicht das Objekt."
        },
        {
          "text":
            "Die Klasse ist \u00fcbergeordnet. zum beispiel ist ein objekt eine instanz 7 eine eigenschaft der klasse.",
          "aspects": [],
          "id": "73",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Die Klasse ist \u00fcbergeordnet. Ein Objekt ist zum Beispiel eine Instanz. 7 ist eine Eigenschaft der Klasse."
        },
        {
          "text":
            "In der Klasse wird der Code generiert und koppelt die Daten und die Funktion im Objekt. Somit ist die Klasse der Bauplan vom Objekt.",
          "aspects": [],
          "id": "74",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "In der Klasse wird der Code generiert und koppelt die Daten und die Funktionen im Objekt. Somit ist die Klasse der Bauplan vom Objekt."
        },
        {
          "text":
            "Eine Klasse ist ein Bauplan f\u00fcr dessen Objekte. \u00dcber den Klassennamen wird das Objekt instanziiert, z.B. Auto auto = new Auto() SEMICOLON Innerhalb der runden Klammern kann man nun, sofern im Konstruktor der Klasse Auto angelegt, schon Attribute \u00fcbergeben, z.B. Auto auto = new Auto(\"\"Ferrari\"\") SEMICOLON Die Klasse legt also die Eigenschaften eines Objektes fest. (Bei Frage 2 wusste ich nicht ob auf oder absteigend, da die Zeilennummern anders herum da stehen. Ich habe in Zeile 3 den ersten Schritt geschrieben, Zeile 2 den zweiten und Zeile 1 den letzten)",
          "aspects": [],
          "id": "75",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Eine Klasse ist ein Bauplan f\u00fcr dessen Objekte. \u00dcber den Klassennamen wird das Objekt instanziiert. Innerhalb der runden Klammern kann man nun sofern im Konstruktor der Klasse angelegt, schon Attribute \u00fcbergeben. Die Klasse legt also die Eigenschaften eines Objektes fest."
        },
        {
          "text":
            "Klasse ist der Bauplan f\u00fcr ein Objekt. Das Objekt ist eine Instanz. Die Klasse enth\u00e4lt die wichtigsten \"\"Oberbegriffe\"\" f\u00fcr ein Objekt. Damit kann man viele Klassen anlegen und diese in einer Main-Methode zusammenf\u00fcgen.",
          "aspects": [],
          "id": "76",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Die Klasse ist der Bauplan f\u00fcr ein Objekt. Das Objekt ist eine Instanz. Die Klasse enth\u00e4lt die wichtigsten Oberbegriffe f\u00fcr ein Objekt. Damit kann man viele Klassen anlegen und diese in einer main Methode zusammenf\u00fcgen."
        },
        {
          "text":
            "Die Klasse ist der Bauplan des Objektes. Sie enth\u00e4lt die Attribute/Eigenschaften des Objektes. Ein Beispiel in der realen Welt f\u00fcr eine Klasse w\u00e4re die DNA des Objektes Mensch.",
          "aspects": [],
          "id": "77",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Die Klasse ist der Bauplan des Objektes. Sie enth\u00e4lt die Attribute und Eigenschaften des Objektes. Ein Beispiel in der realen Welt f\u00fcr eine Klasse w\u00e4re die DNA des Objektes Mensch."
        },
        {
          "text":
            "Eine Klasse kann in mehreren Objekten sein, andersrum jedoch nicht.Verschiedene Klassen ergeben/definieren ein Objekt.",
          "aspects": [],
          "id": "78",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Eine Klasse kann in mehreren Objekten sein, andersrum jedoch nicht. Verschiedene Klassen ergeben und definieren ein Objekt."
        },
        {
          "text":
            "Klassen bilden eine Anleitung f\u00fcr Objekte. Ein Objekt ist eine Instanz einer Klasse. Eine Klasse beschreibt die Methoden die auf ein Objekt angewendet werden k\u00f6nnen.",
          "aspects": [],
          "id": "79",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Klassen bilden eine Anleitung f\u00fcr Objekte. Ein Objekt ist eine Instanz einer Klasse. Eine Klasse beschreibt die Methoden, die auf ein Objekt angewendet werden k\u00f6nnen."
        },
        {
          "text": "Die Klasse eines Objektes ist wie die DNA eines Menschen.",
          "aspects": [],
          "id": "80",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment": "Die Klasse eines Objektes ist wie die DNA eines Menschen."
        },
        {
          "text": "Der Code einer Klasse legt die Eigenschaft der Objekte fest",
          "aspects": [],
          "id": "81",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment": "Der Code einer Klasse legt die Eigenschaft der Objekte fest."
        },
        {
          "text":
            "Klassen sind der Bauplan von Objekten. In Klassen werden die Attribute von Objekten beschrieben",
          "aspects": [],
          "id": "82",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Klassen sind der Bauplan von Objekten. In Klassen werden die Attribute von Objekten beschrieben."
        },
        {
          "text":
            "Die Objekte sind Baupl\u00e4ne f\u00fcr das Programm. Die Klassen beinhalten diese Objekte und verwenden sie.",
          "aspects": [],
          "id": "83",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Die Objekte sind Baupl\u00e4ne f\u00fcr das Programm. Die Klassen beinhalten diese Objekte und verwenden sie."
        },
        {
          "text":
            "Die Klasse ist der \"\"Plan\"\" f\u00fcr das Projekt, dort steht was mit den erstellten Projekten \"\"gemacht\"\" wird. Das hei\u00dft Sie beinhalten die Objekte und verwenden sie. Die Objekte werden erzeugt, um f\u00fcr eine Art mehrere Eigenschaften zu speichern, die dann in der Klasse aufgerufen werden k\u00f6nnen.",
          "aspects": [],
          "id": "84",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Die Klasse ist der Plan f\u00fcr das Projekt. Dort steht was mit den erstellten Projekten gemacht wird. Das hei\u00dft, sie beinhalten die Objekte und verwenden sie. Die Objekte werden erzeugt, um f\u00fcr eine Art mehrere Eigenschaften zu speichern, die dann in der Klasse aufgerufen werden k\u00f6nnen."
        },
        {
          "text":
            "Objekte sind Baupl\u00e4ne f\u00fcr das Programm. Die Klassen sind deren Inhalte und werden von Objekten verwendet",
          "aspects": [],
          "id": "85",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Objekte sind Baupl\u00e4ne f\u00fcr das Programm. Die Klassen sind deren Inhalte und werden von Objekten verwendet."
        },
        {
          "text": "Klassen sind vordefinierte Objekte",
          "aspects": [],
          "id": "86",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment": "Klassen sind vordefinierte Objekte."
        },
        {
          "text":
            "Objekte haben den typ ihrer klasse alle Objekte haben einen Bauplan dieser Bauplan ist die klasse des objektes das objekt ist das Instanz einer klasse",
          "aspects": [],
          "id": "87",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Objekte haben den Typ ihrer Klasse. Alle Objekte haben einen Bauplan. Dieser Bauplan ist die Klasse des Objektes. Das Objekt ist die Instanz einer Klasse."
        },
        {
          "text":
            "Die Klasse ist das Bauplan f\u00fcr das Objekt. Objekt ist das instanz der Klasse . Klasse bestimmt Eigenschaften des Objekts aber sie ist nicht das Objekt.",
          "aspects": [],
          "id": "88",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Die Klasse ist der Bauplan f\u00fcr das Objekt. Das Objekt ist die Instanz der Klasse. Eine Klasse bestimmt die Eigenschaften des Objekts, aber sie ist nicht das Objekt."
        },
        {
          "text":
            "Klasse ist ein Bauplan f\u00fcr Objekt Klasse definiert den Typ des Objektes Objekt ist ein Auspr\u00e4gung",
          "aspects": [],
          "id": "89",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Die Klasse ist ein Bauplan f\u00fcr das Objekt. Eine Klasse definiert den Typ des Objektes. Das Objekt ist ein Auspr\u00e4gung."
        },
        {
          "text":
            "Objekte werden von Klassen definiert. Eine Klasse beschreibt die Variablen, Eigenschaften .... eines Objekts. Objekte sind Instanzen von Klassen. Die klasse wird zu Verwendung von Objekten erstellt, daher sind Objekten Pl\u00e4tzchen.",
          "aspects": [],
          "id": "90",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Objekte werden von Klassen definiert. Eine Klasse beschreibt die Variablen und Eigenschaften eines Objekts. Objekte sind Instanzen von Klassen. Die Klasse wird zur Verwendung von Objekten erstellt."
        },
        {
          "text":
            "Die Klasse ist der \"\"Bauplan\"\" f\u00fcr das Objekt, sie definiert u.a. die F\u00e4higkeiten des Objekts und regelt den Zugriff auf das Objekt",
          "aspects": [],
          "id": "91",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Die Klasse ist der Bauplan f\u00fcr das Objekt. Sie definiert unter anderem die F\u00e4higkeiten des Objekts und regelt den Zugriff auf das Objekt."
        },
        {
          "text": "-",
          "aspects": [],
          "id": "92",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        }
      ]
    },
    {
      "id": "14",
      "text": "Was unterscheidet in JAVA Klassenvariablen von Instanzvariablen?",
      "title": "Klassen- und Instanzvariable",
      "type": "comparison",
      "stopwordExceptions": ["Klassenvariable", "Instanzvariable"],
      "referenceAnswer": {
        "text":
          "Klassenvariablen existieren einmal pro Klasse, auch ohne eine konkrete Instanz. Instanzvariablen existieren einmal pro Objekt.",
        "answerCategory": "correct",
        "assignedWeights": {
          "Klassenvariable": 1,
          "existieren": 0.7,
          "einmal": 0.8,
          "pro": 0.2,
          "Klasse": 1,
          "auch": 0.2,
          "ohne": 0.5,
          "konkret": 0.1,
          "Instanz": 1,
          "Instanzvariable": 1,
          "Objekt": 1
        }
      },
      "answersAnnotation": [
        {
          "text":
            "Klassenvariable ist f\u00fcr die ganze klasse bestimmte variable und die Instanzvariable ist f\u00fcr den jeweiligen Bereich.",
          "aspects": [],
          "id": "93",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Eine Klassenvariable ist eine f\u00fcr die ganze Klasse bestimmte Variable und die Instanzvariable ist f\u00fcr den jeweiligen Bereich gedacht."
        },
        {
          "text":
            "klassenvariablen sind in der klasse sichtbar und Instanzvariablen sind in dem Konstruktor in Parameterleiste",
          "aspects": [],
          "id": "94",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Klassenvariablen sind in der Klasse sichtbar und Instanzvariablen sind in dem Konstruktor in der Parameterliste."
        },
        {
          "text": "-",
          "aspects": [],
          "id": "95",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        },
        {
          "text": "\u00f6ffentlich",
          "aspects": [],
          "id": "96",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "\u00f6ffentlich"
        },
        {
          "text": "Klassenvariable ist mit static und eine instanzvariable ist ohne static",
          "aspects": [],
          "id": "97",
          "points": 0,
          "answerCategory": "concept_mix-up",
          "correctionOrComment":
            "Eine Klassenvariable wird mit static definiert und eine instanzvariable ohne static."
        },
        {
          "text":
            "Klassenvariablen sind f\u00fcr die gesamte Klasse angelegt, Instatzvariablen f\u00fcr das Objekt das welches erzeugt wird",
          "aspects": [],
          "id": "98",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Klassenvariablen sind f\u00fcr die gesamte Klasse angelegt und Instanzvariablen nur f\u00fcr das Objekt, welches erzeugt wird."
        },
        {
          "text":
            "klassenvariablen sind innerhald einer klasse deklariert und in der ganzen klasse sichtbar und instanzvarialblen sind in einer methode deklariert und nur in dieser methode sichtbar",
          "aspects": [],
          "id": "99",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Klassenvariablen sind innerhalb einer Klasse deklariert und in der ganzen Klasse sichtbar. Instanzvarialblen sind in einer Methode deklariert und nur in dieser Methode sichtbar."
        },
        {
          "text": "-",
          "aspects": [],
          "id": "100",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        },
        {
          "text": "Klassenvariable nur in der Klasse, Instanzvariablen in mehreren Klassen",
          "aspects": [],
          "id": "101",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Eine Klassenvariable gibt es nur in der Klasse und Instanzvariablen in mehreren Klassen."
        },
        {
          "text": "-",
          "aspects": [],
          "id": "102",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        },
        {
          "text": "klassenvariablen sind public und instanzvariablen private",
          "aspects": [],
          "id": "103",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment": "Klassenvariablen sind public und Instanzvariablen private."
        },
        {
          "text":
            "Klassenvariablen definieren eine Klasse , Instanzvariablen definieren eine Methode",
          "aspects": [],
          "id": "104",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Klassenvariablen definieren eine Klasse und Instanzvariablen definieren eine Methode."
        },
        {
          "text":
            "Klassenvariablen werden nur innerhalb der Klasse ohne modifikatoren sichtbar und benutzbar. Instanzvariablen k\u00f6nnen in mehrere Klassen benutzt werden.",
          "aspects": [],
          "id": "105",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Klassenvariablen werden nur innerhalb der Klasse ohne Modifikatoren sichtbar und benutzbar. Instanzvariablen k\u00f6nnen in mehrere Klassen benutzt werden."
        },
        {
          "text":
            "Instanzvariablen geh\u00f6ren zu den Objekt und statischen Variablen geh\u00f6ren zu der Klasse und nicht zu einzelne Objekt",
          "aspects": [],
          "id": "106",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Instanzvariablen geh\u00f6ren zu den Objekten und statische Variablen geh\u00f6ren zu der Klasse und nicht zum einzelnen Objekt."
        },
        {
          "text": "this",
          "aspects": [],
          "id": "107",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "this"
        },
        {
          "text": "instanz variable sind normale strings. klassen variablen haben ein public oder",
          "aspects": [],
          "id": "108",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Instanzvariablen sind normale Strings. Klassenvariablen haben ein public."
        },
        {
          "text":
            "die Klassenvariablen sind f\u00fcr die ganze Klasse zugreifbar, instanzvariablen nur f\u00fcr die Objekten.",
          "aspects": [],
          "id": "109",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Die Klassenvariablen sind f\u00fcr die ganze Klasse zugreifbar, Instanzvariablen nur f\u00fcr die Objekte."
        },
        {
          "text": "Klassenvariablen sind nur innerhalb der Klasse sichtbar, Instanzvariablen nicht",
          "aspects": [],
          "id": "110",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Klassenvariablen sind nur innerhalb der Klasse sichtbar, Instanzvariablen nicht."
        },
        {
          "text":
            "Eine Java Klassen Variable beschreibt eine Variable, welche nur innerhalb einer Klasse g\u00fcltig ist. DIe Instanzvariable gilt f\u00fcr ein Objekt einer Klasse.",
          "aspects": [],
          "id": "111",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Eine Java Klassenvariable beschreibt eine Variable, welche nur innerhalb einer Klasse g\u00fcltig ist. DIe Instanzvariable gilt f\u00fcr ein Objekt einer Klasse."
        },
        {
          "text":
            "Die Instanzvariable x wird innerhalb des Konstruktors durch den Parameter x verdeckt, daher erfolgt im ersten Konstruktor der Zugriff auf die Instanzvariable durch this.x",
          "aspects": [],
          "id": "112",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Die Instanzvariable 'x' wird innerhalb des Konstruktors durch den Parameter 'x' verdeckt. Daher erfolgt im ersten Konstruktor der Zugriff auf die Instanzvariable durch 'this.x'."
        },
        {
          "text":
            "Bei Klassenvariablen ist die definition in einer Klasse mit der schl\u00fcsselwort static, aber bei Instanzvariablen ohne der schl\u00fcsselwort static",
          "aspects": [],
          "id": "113",
          "points": 0,
          "answerCategory": "concept_mix-up",
          "correctionOrComment":
            "Bei Klassenvariablen erfolg die Definition in einer Klasse mit dem Schl\u00fcsselwort static, aber bei Instanzvariablen ohne das Schl\u00fcsselwort static."
        },
        {
          "text":
            "Klassenvariablen sind in der Klasse sichtbar, w\u00e4hrend Instanzvariablen Objekte der Klasse sind",
          "aspects": [],
          "id": "114",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Klassenvariablen sind in der Klasse sichtbar, w\u00e4hrend Instanzvariablen Objekte der Klasse sind."
        },
        {
          "text":
            "Instanzen werden immer mit \"\"new Text ()\"\" definiert. Und Klassenvariablen werden mit \"\"Text ()\"\" aufgerufen",
          "aspects": [],
          "id": "115",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Instanzen werden immer mit new definiert und Klassenvariablen werden mit 'Text()' aufgerufen."
        },
        {
          "text":
            "Klassenvariablen definieren eine Klasse und Instanzvariablen sind die in einer Klasse definiert",
          "aspects": [],
          "id": "116",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Klassenvariablen definieren eine Klasse und Instanzvariablen sind in einer Klasse definiert."
        },
        {
          "text":
            "Intanzvariablen k\u00f6nnen f\u00fcr jedes Objekt unterschiedlich sein, Klassenvariablen sind f\u00fcr jedes Objekt gleich.",
          "aspects": [],
          "id": "117",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Intanzvariablen k\u00f6nnen f\u00fcr jedes Objekt unterschiedlich sein, Klassenvariablen sind f\u00fcr jedes Objekt gleich."
        },
        {
          "text":
            "Klassenvariablen sind mit static und innerhalb der ganzen Klasse sichtbar. Instanzvariablen nur innerhalb der Methode.",
          "aspects": [],
          "id": "118",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Klassenvariablen sind mit static und innerhalb der ganzen Klasse sichtbar, Instanzvariablen nur innerhalb der Methode."
        },
        {
          "text":
            "Klassenvariablen sind nicht initialisert (Bauplan-Variablen). Instanzvariablen sind die Attribute eines Objekts. Klassenvariablen werden somit zu Instanzvariablen",
          "aspects": [],
          "id": "119",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Klassenvariablen sind nicht initialisert. Instanzvariablen sind die Attribute eines Objekts. Klassenvariablen werden somit zu Instanzvariablen"
        },
        {
          "text": "-",
          "aspects": [],
          "id": "120",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        },
        {
          "text": "klassenvariablen sind public und instanzvariablen sind private",
          "aspects": [],
          "id": "121",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment": "Klassenvariablen sind public und Instanzvariablen sind private."
        },
        {
          "text":
            "Instanzvariablen sind auch in anderen Klassen sichtbar. Klassenvariablen nur in der eigenen Klasse.",
          "aspects": [],
          "id": "122",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Instanzvariablen sind auch in anderen Klassen sichtbar. Klassenvariablen nur in der eigenen Klasse."
        },
        {
          "text":
            "Instanzvariablen sind bereits initialisiert. Instanzvariablen geh\u00f6ren zu einem spObjekt. Bei Klassenvariablen muss dies nich der Fall sein.",
          "aspects": [],
          "id": "123",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Instanzvariablen sind bereits initialisiert. Instanzvariablen geh\u00f6ren zu einem Objekt. Bei Klassenvariablen muss dies nicht der Fall sein."
        },
        {
          "text":
            "Die beiden unterscheiden sich durch \"\"this\"\". Insatanzvariablen werden durch \"\"this\"\" definiert.",
          "aspects": [],
          "id": "124",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Die beiden unterscheiden sich durch this. Insatanzvariablen werden durch this definiert."
        },
        {
          "text":
            "Klassenvariablen nur in der eigenen Klasse genutzt, Instanzvariable in mehrern Klassen.",
          "aspects": [],
          "id": "125",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Klassenvariablen werden nur in der eigenen Klasse genutzt, Instanzvariablen in mehreren Klassen."
        },
        {
          "text":
            "Instanzvariablen werden den Objekten \u00fcbergeben und geh\u00f6ren den Objekten. Die Klassenvariablen geh\u00f6ren der ganzen Klasse",
          "aspects": [],
          "id": "126",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Instanzvariablen werden den Objekten \u00fcbergeben und geh\u00f6ren den Objekten. Die Klassenvariablen geh\u00f6ren der ganzen Klasse."
        },
        {
          "text":
            "Jedes object hat seine eigene Instanzvariable unabh\u00e4ngig von anderen Objekten die von der selben klasse codiert wurden. klassenvariablen sind an die eigenen Klassen gebunden, die Objekte sehen die selben klassenvariablen",
          "aspects": [],
          "id": "127",
          "points": 0,
          "answerCategory": "correct",
          "correctionOrComment":
            "Jedes Objekt hat seine eigene Instanzvariable unabh\u00e4ngig von anderen Objekten, die von derselben Klasse codiert wurden. Klassenvariablen sind an die eigenen Klassen gebunden. Die Objekte sehen die selben Klassenvariablen."
        },
        {
          "text":
            "Instanzvariablen sind in einer Klasse definiert und man kann durch get und set zugreifen",
          "aspects": [],
          "id": "128",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Instanzvariablen sind in einer Klasse definiert und man kann durch get und set auf sie zugreifen."
        },
        {
          "text":
            "Klassenvariablen sind in der Klasse \u00fcberalle sichtbar. Instanzvariablen sind f\u00fcr die gegebene Instanz aufgerufen und danach werden sie von der garbage collection eingesammelt",
          "aspects": [],
          "id": "129",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Klassenvariablen sind in der Klasse \u00fcberall sichtbar. Instanzvariablen sind f\u00fcr die gegebene Instanz aufgerufen und danach werden sie von dem garbage collector eingesammelt."
        },
        {
          "text": "-",
          "aspects": [],
          "id": "130",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        },
        {
          "text": "-",
          "aspects": [],
          "id": "131",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "-"
        },
        {
          "text":
            "Instanzvariablen k\u00f6nnen nur von einzelnen Methoden genutzt werden. Klassenvaroiablen von der ganzen Klasse.",
          "aspects": [],
          "id": "132",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Instanzvariablen k\u00f6nnen nur von einzelnen Methoden genutzt werden, Klassenvariablen von der ganzen Klasse."
        },
        {
          "text": "instanzvariablengeh\u00f6ren zu den objekten werden objekten \u00fcbergeben",
          "aspects": [],
          "id": "133",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Instanzvariablen geh\u00f6ren zu den Objekten. Sie werden Objekten \u00fcbergeben."
        },
        {
          "text": "Klassenvariablen sind in der Klasse sichtbar und Instanzvariablen sind",
          "aspects": [],
          "id": "134",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment": "Klassenvariablen sind in der Klasse sichtbar."
        },
        {
          "text": "Insstanzvariblen sind bereits initialisiert.",
          "aspects": [],
          "id": "135",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment": "Instanzvariablen sind bereits initialisiert."
        },
        {
          "text":
            "Instanzvariable geh\u00f6ren zu den Objekt und statischen variable Klassen variable",
          "aspects": [],
          "id": "136",
          "points": 0,
          "answerCategory": "partially_correct",
          "correctionOrComment":
            "Instanzvariablen geh\u00f6ren zu dem Objekt und statische Variablen sind Klassenvariablen."
        },
        {
          "text":
            "Instanzvariablen geh\u00f6ren zu den Objekten werden den Objekten \u00fcbergeben. Klassenvariablen hingegen nicht sie gehrlen einer klase",
          "aspects": [],
          "id": "137",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Instanzvariablen geh\u00f6ren zu den Objekten und werden den Objekten \u00fcbergeben. Klassenvariablen hingegen nicht, sie geh\u00f6ren einer Klasse."
        },
        {
          "text":
            "Klasse definiert in einem Block und Instanzvariable wird in der Klasse definiert",
          "aspects": [],
          "id": "138",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Eine Klasse definiert in einem Block und eine Instanzvariable wird in der Klasse definiert."
        },
        {
          "text":
            "Klassenvariablen sind nur in der Klasse sichtbar, Instanzvariablen in mehreren Klassen",
          "aspects": [],
          "id": "139",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Klassenvariablen sind nur in der Klasse sichtbar, Instanzvariablen in mehreren Klassen."
        },
        {
          "text":
            "Klassenvariablen werden in der Main Methode deklariert. Instanzvariablen in Konstruktoren.",
          "aspects": [],
          "id": "140",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Klassenvariablen werden in der main Methode deklariert, Instanzvariablen in Konstruktoren."
        },
        {
          "text":
            "Klassenvariablen sind in einer Klasse deklarierte und gegebenfalls initialisierte Variablen, dagegen sind Instanzvariablen in einem Objekt deklarierte und ggf Varibalen",
          "aspects": [],
          "id": "141",
          "points": 0,
          "answerCategory": "binary_correct",
          "correctionOrComment":
            "Klassenvariablen sind in einer Klasse deklarierte und gegebenfalls initialisierte Variablen. Dagegen sind Instanzvariablen in einem Objekt deklarierte und gegebenenfalls Variablen."
        },
        {
          "text":
            "Instanzvariablen sind Objekte sozusagen und Klassenvariiable sind Variable die in defr klasse sichtbar sind",
          "aspects": [],
          "id": "142",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Instanzvariablen sind sozusagen Objekte und Klassenvariablen sind Variablen die in der Klasse sichtbar sind."
        },
        {
          "text":
            "instanzsvariablen sind zb einfach public String, public int, und klassenvariablen computer (int variable){",
          "aspects": [],
          "id": "143",
          "points": 0,
          "answerCategory": "missconception",
          "correctionOrComment":
            "Instanzsvariablen sind zum Beispiel einfach public String oder public int, und Klassenvariablen Parameter."
        },
        {
          "text": "this",
          "aspects": [],
          "id": "144",
          "points": 0,
          "answerCategory": "none",
          "correctionOrComment": "this"
        }
      ]
    }
  ]
}
