{
  "questions": [
    {
      "text": "Was ist die Funktion von Datentypen?",
      "id": 50712,
      "title": "Funktion von Datentypen",
      "referenceAnswer":
        "Datentypen dienen zur unterschiedlichen semantischen Interpretation von bin\u00e4ren Werten.",
      "answersAnnotation": [
        {
          "text": "besser mit den ben\u00f6tigten werten umgehen k\u00f6nnen Speicher sparen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Datentypen geben an, um was f\u00fcr Daten es sich handelt. Damit kann der Compiler die richtigen Schritte einleiten.",
          "id": "5f82823a8d8fedd07949feec6b79acdbe0c579a11711c76ef825e335"
        },
        {
          "text":
            "Datentypen bestimmen die Art von Daten, die in einer Variable gespeichert werden k\u00f6nnen. So speichert int ganzzahlige Werte (long auch, aber mit mehr Kapazit\u00e4t), float und double speichern auch Kommazahlen, letzterer hierbei wieder mit mehr Kapazit\u00e4t. char speichert Zeichen (englisch: character), wie beispielsweise Buchstaben. Einem boolean wird entweder der Wert true (wahr) oder false (falsch) zugewiesen. Ein String speichert eine Zeichenkette und ein Array eine Reihe von Zeichenketten.",
          "id": "8bbd52208353c14f154f1402cebf5829afb1708d06b5dc25064dff23"
        },
        {
          "text": "Einer Variable einen ausreichend gro\u00dfen Speicherplatz zu reservieren",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Datentypen k\u00f6nnen Daten speichern, Algorithmen steuern und komplexe Datenstrukturen repr\u00e4sentieren",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Datentypen geben die L\u00e4nge und die Art eines Datensatzes an. Sie k\u00f6nnen Speicherplatz sparen und auf sie kann man sich r\u00fcckbeziehen.",
          "id": "1e2c3eb4744dbc36de4e827f187dd2a073d91b8790a2ff117694dd7b"
        },
        {
          "text":
            "Die Funktion von Datentypen ist die Zusammenfassung konkreter Werteberehce und darauf definierten Operationen zu einer Einheit, so dass mit diesen Daten umgegangen werden kann.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Datentypen sind in der Lage verschiedene Daten zu speichern, wie zum Beispiel ganze Zahlen (Integer) oder einzelne Zeichen (Characters).",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Funktion ist die Speicherung von Werten einer bestimmten Art direkt in einem Speicherbereich fester Gr\u00f6\u00dfe.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "um zu zeigen, von welchem typ die jeweilige variable ist",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Datentypen beschreiben die Art des Wertes. Jedem Datentypen wird ein bestimmter Speicherbereich zugewiesen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Jeder Datentyp hat unterschiedliche eigenschaften, die wir uns beim Programmieren zu nutze Machen k\u00f6nnen. ZB wenn wir mit Br\u00fcchen Arbeiten sollten wir den Datentyp int (nat\u00fcrliche Zahlen) benutzen. Wollen wir mit einem Satz arbeiten, sollte man eher mit einem String arbeiten.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Sie begrenzen den Speicherplatz. Jeder Datentyp ist f\u00fcr einen bestimmten Zahlen oder Zeichenbereich zust\u00e4ndig.",
          "id": "ea674ab55536a8b603be44d13510e32c7aab02088bf48c2802e4febd"
        },
        {
          "text":
            "Datentypen reservieren einen Speicherbereich einer festen Gr\u00f6\u00dfe, eines bestimmten Typs mit einem eindeutigen Namen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Datentypen dienen zu Speicherung und Verwaltung von Daten.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Funktion ist das speichern von mehreren Werten.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Definiert die Werte, die eine Variable (ein Parameter)  gewinnen kann und die Operationen, die durchef\u00fchrt werden k\u00f6nnen.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text":
            "Datentypen erm\u00f6glichen verschiedene Operationen, zB Rechnunngen mit Integern oder die  Bildung neuer Worte durch die Addition von Chars.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Eine effizientere Speicherung der Daten im RAM des Computers. So ist es z.B. nicht w\u00fcnschenswert, eine bool (1 Bit) in einen string (8 Bit bei ASCII) zu stopfen (ohne Datentype w\u00fcrden wir die Daten irgendwie ablegen - ein Grau\u00df f\u00fcr gut lesbare Software). Zudem k\u00f6nnen so Fehler vom Kompiler einfacher erkannt werden - s. PHP f\u00fcr eine Programmiersprache ohne explizite Datentypen.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Datentypen verwalten dynamische Reihenfolgen mit geringerem Speicherplatz als Arrays.  Erm\u00f6glichen leichteres Einf\u00fcgen und L\u00f6schen von Elementen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Datentypen werden dazu genutzt um verschiedene Daten zu speichern und zu repr\u00e4sentieren.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Datentypen speichern Werte in verschiedenen Paketen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eindeutige und zusammengeh\u00f6rige Speicherung von Dateneinheiten.",
          "id": "8a1c55283fd2fc15f72ad8c88c9dcc447f528814a41bf2a7ab51950a"
        },
        {
          "text":
            "Speicherung von Daten verschiedener Art zum Beispiel Zahlen, Buchstaben oder Objekten",
          "id": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a"
        },
        {
          "text":
            "Datentypen dienen der Speicherung von bestimmten f\u00fcr den Datentyp spezifischen Werten.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Speicherort von verschieden gro\u00dfen Datenmengen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Funktion ist das Anlegen von reservierten Speicherbereichen, in denen sp\u00e4ter Zahlen, Buchstaben, Zeichen, Zeichenketten etc. gespeichert werden k\u00f6nnen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Sie speichern Werte.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Formal bezeichnet ein Datentyp (vom englischen data type) oder eine Datenart in der Informatik die Zusammenfassung von Objektmengen mit den darauf definierten Operationen. Dabei werden durch den Datentyp des Datensatzes unter Verwendung einer sogenannten Signatur ausschlie\u00dflich die Namen dieser Objekt- und Operationsmengen spezifiziert. Ein so spezifizierter Datentyp besitzt noch keine Semantik.",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Das Speichern von Daten.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Um den Speicher, den Programme zum Ausf\u00fchren ben\u00f6tigen so gering wie m\u00f6glich zu halten, gibt es einen vorgeschriebenen Speicherumfang, den jeder Datentyp nutzen kann. So kann der Programmierer immer den Datentyp nutzen, der m\u00f6glichst wenig Speicher verbraucht, aber der trotzdem noch ausreichend ist, f\u00fcr die Menge an Daten, die in der Variable gespeichert werden soll.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Datentypen dienen zur Speicherung von bestimmten Daten eines bestimmten Typs.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Speichern Werte",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "Datentypen erlauben es, einfacher mit Daten umzugehen. Sie Schaffen vergleichbarkeit und verrechenbarkeit.",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "Ein Datentyp legt bestimmte Eigenschaften von Daten fest.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Speichern ein bestimmte Art von Wert.  Es wird in primitiven und komplexen Datentypen unterschieden.  Zu den einfachen (primitiven) Datentypen gehoeren beispielsweise int, double.. Die Komplexeren sind dann Integer,.., Diese sind objektorientiert.  Generell verwalten Datentypen einen Algorithmus, dass dieser \u00fcberhaupt umgesetzt werden kann und das EVA-Prinzip ungesetzt werden kann.  Sprich durch eine Eingabe auch eine Ausgabe erzeugt werden kann.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Mit Datentypen k\u00f6nnen Werte eines bestimmten Typs gespeichert werden.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "In einem Datentyp k\u00f6nnen wir eine Wert eines bestimmten Typs Speichern. Verschiedene Datentypen brauchen einen unterschiedlichen Gr\u00f6\u00dfen Speicherplatz. Dadurch, dass wir zwischen ihnen differenzieren verschwenden wir nicht unn\u00f6tig viel Platz, weil wir bei der Anlegung eines Wertes nicht immer vom Gr\u00f6\u00dftm\u00f6glichen Wert ausgehen m\u00fcssen.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Datentypen dienen als Speicher fester Gr\u00f6\u00dfen. Datentypen sind also Variablen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Sichern einem Wert einen Typ zu.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "DIe Speicherung von verschiedenen Daten",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Definieren die Art von variablen.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Verwendung",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Datentypen sind daf\u00fcr da, festzulegen, welche Art von Werten Variablen aufnehmen sollen.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "bestimmter Speicherplatz unterscheidung verschiedener Eingaben",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was repr\u00e4sentiert der Datentyp Char?",
      "id": 50713,
      "title": "Datentyp Char",
      "referenceAnswer": "Der Datentyp Char repr\u00e4sentiert einzelne Zeichen.",
      "answersAnnotation": [
        {
          "text": "ein beliebiges zeichen inkl, Ziffern Buchstaben sonderzeichen...",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Der Datentyp Char repr\u00e4sentiert Zeichen (englisch: character), wie beispielsweise Buchstaben, Ziffern oder auch Sonderzeichen.",
          "id": "8bbd52208353c14f154f1402cebf5829afb1708d06b5dc25064dff23"
        },
        {
          "text": "ein Zeichen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Datentyp char repr\u00e4sentiert und speichern einzelne Zeichen.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Er repr\u00e4sentiert einen charakter, das hei\u00dft ein Zeichen wird gespeichert bzw ausgegeben o.\u00e4.",
          "id": "8a217ea5f39d0f20db42ef9bcb667eacd060a40b50a18655172ec4b8"
        },
        {
          "text":
            "Char dient zur Speicherung und Darstellung eines einzelnen Zeichens, wobei ein Zeichen ein Buchstabe,eine Zahl oder ein Sonderzeichen sein kann.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Datentyp char steht f\u00fcr die Daten von Zeichen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Datentyp repr\u00e4sentiert ein Zeichen.",
          "id": "1e2c3eb4744dbc36de4e827f187dd2a073d91b8790a2ff117694dd7b"
        },
        {
          "text":
            "Der Datentyp char stellt einzelne Zeichen, wie Buchstaben, Sonderzeichen oder Ziffern im Unicode dar.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein einzelnen Zeichen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "ein ascii zeichen mit speichergr\u00f6\u00dfe von 16 bit",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Ein einzelnes Zeichen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "ein char representiert ein Zeichen aus der ASCII-Tabelle.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein Zeichen der Tastatur diesem Zeichen ist eine Zahl hinterlegt(siehe ACCII Tabelle",
          "id": "ea674ab55536a8b603be44d13510e32c7aab02088bf48c2802e4febd"
        },
        {
          "text":
            "Der Datentyp char repr\u00e4sentiert Zeichen, wie zB Buchstaben und Satzzeichen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Char repr\u00e4sentiert Zeichen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Er repr\u00e4sentiert Sonderzeichen, Zeichen, Buchstaben, Zahlen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Datentyp Char repr\u00e4sentiert ein Zeichen.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Der Datentyp Char repr\u00e4sentiert Zeichen wie 'a' oder 'o'",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "bin\u00e4re Darstellung (16 bits) Symbole zb Buchstaben, Zeichen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Datentyp Char repr\u00e4sentiert ein einzelnes Zeichen einer Zeichenkette.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Speicherung eines einzelnen Zeichens",
          "id": "8a1c55283fd2fc15f72ad8c88c9dcc447f528814a41bf2a7ab51950a"
        },
        {
          "text": "Alle Zeichen, also Buchstaben, Ziffern oder Satzzeichen",
          "id": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a"
        },
        {
          "text": "Der Datentyp Char repr\u00e4sentiert ein Zeichen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Datentyp char repr\u00e4sentiert alle Zeichen, Buchstaben und Ziffern",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Datentyp Char repr\u00e4sentiert Zeichen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Char repr\u00e4sentieren alle Buchstaben, Zahlen, Symbole und Zeichen die es gibt und in der ASCII-Tabelle beschrieben sind.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Variablen der Gr\u00f6\u00dfe 16 bit",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "ein einzelnes zeichen",
          "id": "de0a13aab90b285db3fde617643bd713b7ae7e35a3792c5f539c98b8"
        },
        {
          "text": "Er repr\u00e4sentiert ein einzelnes Zeichen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Mithilfe char kann man alle m\u00f6glichen Zeichen speichern, wie zum Beispiel Buchstaben. Ziffern kann man auch speichern, allerdings sind das dann nur die syntaktischen Ziffernzeichen und nicht der Wert dahinter, der gespeichert wird.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "In ihm kann man einzelne Zeichen speichern",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein einzelnes Zeichen.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text":
            "Einen einzelnen Buchstaben, kodiert in der ASCII-Tabelle (auf Wunsch auch UTF-8). Es k\u00f6nnen damit auch Zahlen und andere Zeichen dargestellt werden. Ein char kann auch als int interpretiert werden, wodurch man den Wert des Buchstabens erh\u00e4lt.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "ein Symbolzeichen",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "Ein einzelnes Zeichen der ASCII-Tabelle",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "Den Index eines Zeichens aus der AscII-Tabelle",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Der Datentyp 'char' pr\u00e4sentiert eine Ziffer.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Der Datentyp Char repr\u00e4sentiert einzelne Symbole, also Buchstaben, Zahlen oder Zeichen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Repr\u00e4sentiert den Speicherbereich f\u00fcr ein Zeichen.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Der Datentyp char repr\u00e4sentiert verschiedene einzelne Zeichen, wie z.B. A, B +,...",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "char ist eine Variable der Gr\u00f6\u00dfe 16 bit und repr\u00e4sentiert ein Zeichen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "char definiert Werte als Asci zeichen",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Buchstaben",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Er repr\u00e4sentiert einzelne Zeichen.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Zeichen",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Der Datentyp char speichert einzelne Zeichen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "einzelne Zeichen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Einen einzigen Character, also ein ASCII-Zeichen.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "einzelne Buchstaben oder Zeichen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was versteht man unter Typecasting?",
      "id": 50714,
      "title": "Definition Typecasting",
      "referenceAnswer":
        "Darunter versteht man die Umwandlung des Datentyps eines bestimmten Wertes in einen anderen.",
      "answersAnnotation": [
        {
          "text":
            "Unter Typecasting wir die Umwandlung eines Datentyps in einen anderen verstanden.",
          "id": "8bbd52208353c14f154f1402cebf5829afb1708d06b5dc25064dff23",
          "semval": 0
        },
        {
          "text":
            "Interpretation des Bin\u00e4rmusters des Wertes einer Variablen als ein anderer Datentyp als der deklarierte.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614",
          "semval": 0
        },
        {
          "text":
            "Unter Typecasts versteht man das erzwungene Umwandeln des Datentyps eines Werts.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5",
          "semval": 0
        },
        {
          "text":
            "Unter Typecasting versteht man die zwanghafte umformung von Datentypen in einen anderen, beispielsweise einen int in einen float.",
          "id": "8a217ea5f39d0f20db42ef9bcb667eacd060a40b50a18655172ec4b8",
          "semval": 0
        },
        {
          "text":
            "Typecasting ist das zu sichern oder umwandeln eines bestimmten Datentypes in einen anderen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614",
          "semval": 0
        },
        {
          "text": "Typecasting erm\u00f6glicht den Wechsel eines Datentyps in einen anderen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614",
          "semval": 0
        },
        {
          "text": "Gibt den Datentyp an um nicht in der Oberklasse Objekt zu landen.",
          "id": "1e2c3eb4744dbc36de4e827f187dd2a073d91b8790a2ff117694dd7b",
          "semval": 3
        },
        {
          "text": "Typecasting ist das Erzwingen eines Wertes sich in einen anderen umzuwandeln.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614",
          "semval": 0
        },
        {
          "text": "das ein\\/umstellen des Datentyps einer variablen",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645",
          "semval": 0
        },
        {
          "text": "Das Umwandeln eines Datentypens. (einen bestimmten Datentyp aufzwingen)",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614",
          "semval": 0
        },
        {
          "text":
            "in den meisten f\u00e4llen m\u00fcssen die elemente mit denen wir arbeiten den gleichen datentyp, typecast haben, wir typecasten wenn wir umwandeln",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614",
          "semval": 0
        },
        {
          "text": "Einen Datentyp in einen anderen umzuwandeln z.B. double in int.",
          "id": "ea674ab55536a8b603be44d13510e32c7aab02088bf48c2802e4febd",
          "semval": 0
        },
        {
          "text":
            "Typecasting ist die erzwungene Umwandlung von Daten in einen bestimmten Datentypen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614",
          "semval": 0
        },
        {
          "text":
            "Typecasting ist die Umformung eines Datentyps in einen anderen Datentyp.  Z.b. Integer in Char",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614",
          "semval": 0
        },
        {
          "text": "Man versteht die Umwandlung von Datentypen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614",
          "semval": 0
        },
        {
          "text":
            "Unter Typecasting versteht man die Umwandlung von einem Datentyp zu einem anderen.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3",
          "semval": 0
        },
        {
          "text":
            "Typecasting bedeutet, einem Datentyp eine neue Funktion zuzuweisen, z.B. einen Int in ein Char zu casten",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6",
          "semval": 3
        },
        {
          "text":
            "Wenn man dem Programm angibt welchen Datentyp ein Objekt hat bzw als welchen Datentyp er interpretiert werden soll.  ClassCastException fehler wenn sie nicht \u00fcbereinstimmen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614",
          "semval": 0
        },
        {
          "text": "Typecasting ist das Umwandeln von verschiedenen Datentypen.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26",
          "semval": 0
        },
        {
          "text": "Vorgabe des Datentypen einer Variable",
          "id": "8a1c55283fd2fc15f72ad8c88c9dcc447f528814a41bf2a7ab51950a",
          "semval": 0
        },
        {
          "text": "Umwandlung eines Datentyps, zum Beispiel Integer 1 zu Float 1.0",
          "id": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a",
          "semval": 0
        },
        {
          "text":
            "Unter Typecasting versteht man, dass vor der zugeordneten Variable ein Typ in Klammern gestellt wird, aus welchen die Variable ist bzw. , dass soll angenommen werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614",
          "semval": 0
        },
        {
          "text": "erzwungene Umwandlung eines Datentyps zu einem anderen Datentyp",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614",
          "semval": 0
        },
        {
          "text":
            "Unter Typecasting versteht man eine erzwungene Umwandlung von einem Datentypen zu einem anderen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614",
          "semval": 0
        },
        {
          "text": "Typecasting konvertiert einen Datentyp in einen anderen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614",
          "semval": 0
        },
        {
          "text": "ver\u00e4nderung des datentyps einer variable",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614",
          "semval": 0
        },
        {
          "text": "Man versichert Java, dass der zugeortnete Wert das richtige Format hat",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f",
          "semval": 3
        },
        {
          "text": "Die ausdr\u00fcckliche Umwandlung von einem Datentyp in einen anderen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614",
          "semval": 0
        },
        {
          "text":
            "M\u00f6chte man den Wert einer Variablen in einem anderen Datentyp speichern, als im bisherigen, nutzt man das sogenannte Typecasting, bei dem der Wert eines Datentyps in einen anderen Datentyp konvertiert wird. Zum Beispiel: int i; double d; i = (int) d;",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6",
          "semval": 3
        },
        {
          "text": "Das casten von bestimmten Daten zu anderen Datentypen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614",
          "semval": 0
        },
        {
          "text":
            "Das Umwandeln eines Datentypes in einen anderen. Z.B. char in int, oder Object in [irgendeine Klasse], da Java alle Klassen als Child-Class von 'Object' betrachtet.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6",
          "semval": 0
        },
        {
          "text": "Man weist einem Wert einen anderen Datentyp zu",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4",
          "semval": 0
        },
        {
          "text":
            "Typecasting ist die Umwandlung zwischen verschiedenen Datentypen, zum Beispiel ein Int als Double oder Float interpretieren.",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "kkjkjj",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Typcasting bedeutet, dass man Java den Datentyp eines Objektes mitteilt.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Umwandlung eines Datentypes in einen geeigneteren Datentyp.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Wenn einem R\u00fcckgabewert beigestellt wird, welchem Datentyp er entspricht.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Umwandlung\\/bzw. Interpretation eines Werts eines Datentypen in einen \u00e4quivalenten Werte eines anderen Datentypen.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Das erzwingen von dem Werte eines Datentypes in einen anderen Datentyp",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Typecasting ist die Umwandlung des Datentyps.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Unter Typecasting versteht man die Umwandlung von einem in einen anderen Datentyp.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "Das wandeln von einem Datentypen in einen anderen.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Einen Datentyp casten und ihn dann so interpretieren",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Umwandlung von einem Datentyp zu einem anderen.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Ein Objekt einer Klasse in eien andere umwandeln",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Umwandeln eines Wertes von einem Datentyp in einen anderen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Typecast teilt mit, dass das Objekt zu einem bestimmten Typ geh\u00f6rt.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Datentyp eines Wertes wir in anderen Datentypen umgewandelt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "verschiedene Datentypen umwandeln",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text":
        "Warum ergibt die Operation \u2018a\u2019 + \u2018b\u2019 195 und nicht \u201cab\u201d?",
      "id": 50715,
      "title": "Addition von Chars",
      "referenceAnswer":
        "Chars sind intern als 16 bit Bin\u00e4rzahlen repr\u00e4sentiert. Bei einer Rechenoperation mit Chars werden diese als Integer interpretiert.",
      "answersAnnotation": [
        {
          "text": "weil a und b in ziffern umgewandelt werden vgl ascii tabelle",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Diese Operation ergibt 195, da dies die Summe der den chars 'a' und 'b' zugeordneten Werte in der ASCII Tabelle ist. Um die beiden Werte hintereinander zu drucken m\u00fcsste es a + b hei\u00dfen. Die Anf\u00fchrungszeichen ' ' verweisen auf besagten Wert anstatt auf die Buchstaben.",
          "id": "8bbd52208353c14f154f1402cebf5829afb1708d06b5dc25064dff23"
        },
        {
          "text":
            "Weil die zu den Zeichen geh\u00f6renden Zahlenwerte addiert und nicht die Zeichen verkettet werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Da der Char a den Wert 97 und b den Wert 98 repr\u00e4sentiert.",
          "id": "4cfc3a1811fe40afa401b25ef7fa0379f1f7c1930a04f8755d678474"
        },
        {
          "text":
            "Chars sind intern als 16 bit Bin\u00e4rzahlen repr\u00e4sentiert. Bei einer Rechenoperation mit Chars werden diese als Integer interpretiert.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Da hinter den Buchstaben einzelne Zahlenwerte stecken und diese werden dann verrechnet. Dies bezweckt das Ausrufungszeichen.",
          "id": "8a217ea5f39d0f20db42ef9bcb667eacd060a40b50a18655172ec4b8"
        },
        {
          "text": "Da bei der Operation die ASCII-Werte 97 und 98 der Zeichen verrechnet werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "weil das '  den Asci-Code nimmt um dem Zeichen einen Int-Wert zuzuordnen.",
          "id": "1e2c3eb4744dbc36de4e827f187dd2a073d91b8790a2ff117694dd7b"
        },
        {
          "text":
            "Weil auch chars wie Ziffern miteinander addiert werden k\u00f6nnen, da ihnen im Unicode ein Wert\\/ eine Zahl zugewiesen ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "ascii code",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "weil die position in dem ascii alphabet des chars ausgegeben wird( zeichen werden wie ints behandelt)",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Da der ASCII Wert hinter den chars addiert wird und nicht nicht die zwei chars an sich addiert\\/ hinter einander geschrieben werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Da jedem Zeichen ein 16 Bit langer Bin\u00e4rwert zugewiesen ist und dieser bei der Operation + addiert wird, nicht aber die Zeichen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "da die char a und b in der ASCII tabelle bestimmten Zahlen zugewiesen sind, das Programm addiert diese und nicht die Zeichen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Wenn chars addiert werden wird die ACCII zahl dahinter addiert.",
          "id": "ea674ab55536a8b603be44d13510e32c7aab02088bf48c2802e4febd"
        },
        {
          "text": "Die Operation ergibt 195, da die ASCII-Werte der Zeichen addiert werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Jeder character besitzt eine bit Referenz. Bei der oben genannten Operation wird die bit referenz, nicht die zeichen an sich addiert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil 'a' und 'b' chars sind und ihr Wert aus der ASCII Tabelle addiert wird.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Weil zwischen zwei Apostrophe man Char schreibt und ein Char repr\u00e4sentiert zwar ein Zeichen, ist aber als Zahl gespeichert, die ASCII-Code enth\u00e4lt.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text":
            "Weil Java immer automatisch alle Zeichen als Integer versteht, sofern nicht ausdr\u00fccklich gesagt wird, dass sie z.B. Chars sind. Die Zahl 195 sind die ASCII Werte, die hinter jedem einzelnen Zeichen auf der Tastatur stehen.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "weil es nur ' ' sind und nicht  ",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Weil beide Zeichen als Char dargestellt sind und in der Addition zu Ints getypcasted werden.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "weil die ACSI Tabellenwerte zusammengerechnet werden",
          "id": "8a1c55283fd2fc15f72ad8c88c9dcc447f528814a41bf2a7ab51950a"
        },
        {
          "text": "Weil hinter jedem Char eine Zahl steht und die Zahlen addiert werden",
          "id": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a"
        },
        {
          "text":
            "Da, die Zeichen a und b jeweils f\u00fcr bestimmte Werte stehen und somit im Datentyp int diese Werte miteinander multipliziert werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "da durch die Anf\u00fchrungszeichen mit den Werten, die hinter den Zeichen stehen gearbeitet wird und nicht mit dem Buchstaben",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "'a' und 'b' sind jeweils Chars. Jedem Char ist ein bestimmter Wert der ASCII Tabelle zugeordnet. Wenn man Chars verrechnet werden nicht die einzelnen Zeichen zusammenef\u00fcgt, sondern die ASCII Werte verrechnet.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "'a' und 'b' stellen char da, keine Strings! Und jedem char ist eine Zahl (ASCII-Tabelle) zugeordnet. So dem 'a' die 97 und dem 'b' die 98. Summiert man diese beiden Zahlen ist das Ergebnis 195.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ascii werte werde addiert",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "weil den Variablen 'a' und 'b' scheinbar die Zahlenwerte dementsprechend zugeordnet worden sind und verrechnet werden",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "Wenn man chars mit einander verrechnet, verrechnet man den ASCII Wert der beiden Zeichen!",
          "id": "de0a13aab90b285db3fde617643bd713b7ae7e35a3792c5f539c98b8"
        },
        {
          "text":
            "Durch den + Operator werden chars nicht zu einem String konkateniert sondern die Ordnungszahlen die den chars zugeordnet sind werden addiert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Nicht die Character-Zeichen werden addiert, sondern die bin\u00e4ren Werte, die hinter den Zeichen stecken. Nach der Addition wird das Zeichen, das dem Ergebnis zugeordnet ist, ausgegeben.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Da die ASCII Werte von a und b addiert werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Weil hier die Werte der Variablen a und b addiert werden und diese keine Chars sind.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text":
            "Weil die chars 'a' und 'b' als ints interpretiert werden und somit einfach nur deren Werte addiert werden. Dies k\u00f6nnte auch einen anderen char ergeben (TypeCast notwending!)...",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Weil die ASCII Werte der beiden buchstaden summiert werden und nicht die zeichen aneinander geh\u00e4ngt werden",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "?",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "mkmkmkm",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Die Zeichen a und b werden zu integers umgewandelt und addiert.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Es ist der ASCII-Wert.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Weil a und b als integer interpretiert werden, und nicht als character. Der Compiler wandelt die Symbole in die dazugeh\u00f6rigen ASCII Werte um und addiert diese.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Dies liegt daran, dass + als Verkn\u00fcpfung f\u00fcr Integer aufgefasst wird. Die Zeichen a und b werden also als Integer addiert.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Der plus Operator kann die character so nicht addieren, daher addiert ihr ihre werte der ASCII Tabelle",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Die Anf\u00fchrungszeichen sind ausschlaggebend. Hier wird die char summe gebildet.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "weil hinter den Buchstaben dezimale Werte stecken und die Buchstaben nur eine Asci representation sind",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Weil es bin\u00e4rwerte sind",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ascii Tabellen Werte",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text":
            "Als chars werden a und b in 16 bit codiert und diese bit darstellungen werden durch + addiert",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "chars sind als Bin\u00e4rzahlen definiert",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil dort die ASII-Werte addiert werden.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "weil diese Summe zu einem Integer gecastet wurde. char summe = (int) ('a'+'b')",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text":
        "Warum ergibt die Operation \u201ca\u201d + \u201cb\u201d \u201cab\u201d und nicht 195?",
      "id": 50716,
      "title": "Addition von Strings",
      "referenceAnswer":
        "Strings sind intern als Zeichenketten gespeichert. Der \u2018+\u2019 Operator vollf\u00fchrt also eine Verkettung der einzelnen Ketten.",
      "answersAnnotation": [
        {
          "text":
            "die anf\u00fchrungszeihen sorgen daf\u00fcr dass der wert und nicht die zifferndarstellung betrachtet wird",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Anf\u00fchrungszeichen   bedeuten im Kontext des Programms, dass der von ihnen eingerahmte Inhalt genauso gedruckt werden soll, nicht der ihm zugeordnete Wert. Da in den Anf\u00fchrungszeichen keine Leerzeichen angegeben sind, werden die beiden Zeichen direkt hintereinander geheftet.",
          "id": "8bbd52208353c14f154f1402cebf5829afb1708d06b5dc25064dff23"
        },
        {
          "text":
            "Weil a und b Strings sind und das + , auf Strings angewendet, Verkettung bedeutet.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Operation mit einem + ergibt bei dem Datentyp String eine Zeichenkette, bei der wie hier a und b aneinander geh\u00e4ngt werden.",
          "id": "4cfc3a1811fe40afa401b25ef7fa0379f1f7c1930a04f8755d678474"
        },
        {
          "text":
            "Strings sind intern als Zeichenketten gespeichert. Der \\u2018+\\u2019 Operator vollf\u00fchrt also eine Verkettung der einzelnen Ketten.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Weil durch die doppelten Anf\u00fchrungszeichen nicht die Werte verrechnet werden, die hinter den Buchstaben stecken sondern die tats\u00e4chlichen Buchstaben.",
          "id": "8a217ea5f39d0f20db42ef9bcb667eacd060a40b50a18655172ec4b8"
        },
        {
          "text":
            "Da die Anf\u00fchrungszeichen a und b als char interpretieren und nicht die ASCII-Werte als Integer verrechnet werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Weil bei Strings der Tats\u00e4chliche Inhalt gemeinsam ausgegeben wird, nicht aber die codierten Zahlen miteinander verrechnet werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "da es sich um einen string handelt, der aneinandergef\u00fcgt wird",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Da nun die chars als solche gekennzeichnet werden. So werden sie nicht als Bin\u00e4rezahlen interpretiert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Da bei dieser Operation durch die doppelten Anf\u00fchrungszeichen a und b als Zeichen interpretiert werden und nicht als Integer.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "weil a und b nun als zwei strings gespeichert sind und addiert man zwei Strings werden die Inhalte aneinander geh\u00e4ngt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Strings kann man hintereinander h\u00e4ngen.",
          "id": "ea674ab55536a8b603be44d13510e32c7aab02088bf48c2802e4febd"
        },
        {
          "text":
            "Der Datentyp ist hier ein String, wodurch die Zeichen durch Addition aneinandergereiht werden.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Setzt man die Zeichen in doppelte Anf\u00fchrungszeichen, so werden sie als Character behandelt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "durch die doppelten anf\u00fchrungszeichen werden a und b als text interpretiert und diese textteile aneinander geh\u00e4ngt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Strings sind intern als Zeichenketten gespeichert. Der \\u2018+\\u2019 Operator vollf\u00fchrt also eine Verkettung der einzelnen Ketten.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "In Anf\u00fchrungszeichen scheibt man Strings. Die Operation + auf der Klasse Strings ist eine Verkettung, nicht Addition von Integer-Werten wie by Chars.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text":
            "Weil durch die Anf\u00fchrungszeichen sichergestellt wird, dass von Chars die Rede ist.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Da beide Buchstaben Strings sind wird das Pluszeichen als konkatenieren interpretiert.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Weil es sich um 2 Strings handelt",
          "id": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a"
        },
        {
          "text":
            "durch die doppelten Anf\u00fchrungszeichen ist klar dass der Datentyp von a und b String ist, weshlab das + eine Konkatenation verursacht und die beiden Buchstaben einfach aneinander h\u00e4ngt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "a und b in doppelten Anf\u00fchrungszeichen stellen Strings der L\u00e4nge eins dar. Wenn man Strings konkateniert (addiert\\/ zusammenf\u00fcgt) erz\u00e4hlt man aus zwei einzelnen Strings einen Strings mit den zusammngef\u00fcgten Zeichen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "durch die doppelten Anf\u00fchrungszeichen existieren hier Strings und keine Char.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil man hier mit den Buchstaben und nicht mit dem ASCII Code arbeitet",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "Weil diese als Strings interpretiert werden und die Operation +, Strings aneinanderh\u00e4ngt!",
          "id": "de0a13aab90b285db3fde617643bd713b7ae7e35a3792c5f539c98b8"
        },
        {
          "text": "Weil der + Operator bei Strings die Strings konkateniert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Diesmal wird das + als Aneinanderh\u00e4ngen von zwei Strings interpretiert. Dabei werden die Strings nicht als Bin\u00e4rzahlen interpretiert.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Durch die doppelten Anf\u00fchrungszeichen werden die Zeichen als Strings interpretiert und nicht als Integer.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Hier wenden die STRINGs a und b addiert, da bei strings der +-Operator allerdings anders definiert ist (als Synonym f\u00fcr this.append(string) ), werden hier die beiden Strings aneinandergeh\u00e4ngt.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Weil Strings addiert werden und nicht die ASCII Werte dahinter",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "Weil    Die Zeichen als Chars interpretiert",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text":
            "a in doppelten Anf\u00fchrungszeichen wird als string interpretiert?! oder m\u00fcssen a und b schon als strings gespeichert sein?",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "juihiji",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Es muss der gleiche String sein. Sprich die gleiche Referenz auf das Objekt.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Da bei dieser Rechenoperation die Zeichen als Symbole\\/ Character interpretiert werden und nicht als Rechenwerte.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Hier werden zwei Strings aneinandergeh\u00e4ngt.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Hierbei wird keine Rechenoperation ausgef\u00fchrt. Die beiden Character werden lediglich aneinander geh\u00e4ngt. (konkateniert)",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Doppelte Anf\u00fchrungszeichen werden bei Strings verwendet. Hier werden die char zu einem String zusammengef\u00fcgt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil Addition von Strings anders funktioniert als von einzelnen Variablen.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "Hier werden statt Chars Strings genutzt",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Weil es durch anf\u00fchrunfgszeichen als zeichen und nicht als zahl(bin\u00e4rwert) intepretiert wird",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Strings werden als Zeichenketten interpretiert, daher werden sie durch + zusammengef\u00fcgt.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "a und b werden als Chars betrachtet",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text":
            "Strings werden als einzenlne Zeichenketten gespeichert und diese werden durch \\u00b4+ verkettet",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Weil durch die doppelten Anf\u00fchrungszeichen mitgeteilt wird, dass der Character gemeint ist und nicht der ASCII-Wert.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Strings speichern Referenz auf Objekt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "da jetzt a und b Strings sind, besteht es kein Problem die weiterhin in einem String zu behalten",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text":
        "Was ist der konzeptuelle Unterschied zwischen dem Wert einer String Variablen und dem eines primitiven Datentyps?",
      "id": 50717,
      "title": "Wert von Objecten vs primitiven Datentypen",
      "referenceAnswer":
        "Die Variable eines primitiven Datentyps speichert den Inhalt an sich. Die Variable eines Strings, also eines Objektes, hat als Wert eine Referenz auf den eigentlichen Inhalt im Speicher.",
      "answersAnnotation": [
        {
          "text": "stringvariablen sind zeichenketten, primitive datentypen sind zifernketten",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "primitive Datendypen ben\u00f6tigen mmer gleich viel Speicherplatz. Bei Strings h\u00e4ngt das von der L\u00e4nge ab, Daher wird ihr Speicher dynamisch reserviert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Variable eines primitiven Datentyps speichert den Inhalt an sich. Die Variable eines Strings, also eines Objektes, hat als Wert eine Referenz auf den eigentlichen Inhalt im Speicher.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text": "Der Wert eines Strings stellt lediglich eine Referenz dar.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "k",
          "id": "8a217ea5f39d0f20db42ef9bcb667eacd060a40b50a18655172ec4b8"
        },
        {
          "text": "Wert eines Strings ist seine Referenz, prim datentyp ist eine Bin\u00e4rzahl",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Auf Objekten k\u00f6nnen Operationen ausgef\u00fchrt werden. Auf primitiven Datentypen nicht.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Bei einfachen Datentypen wird direkt der Wert in einer Variable gespeichert, bei Objektvariablen wie Strings wird nur eine Referenz auf den eigentlichen String gespeichert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "primitiver Daten typ = call by value String = call by reference",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Strings werden durch Referenzen gespeichert.",
          "id": "ea674ab55536a8b603be44d13510e32c7aab02088bf48c2802e4febd"
        },
        {
          "text":
            "Werden Strings verwendet, so werden nicht die Daten an sich aufgerufen, sondern deren Referenz. Bei primitiven Datentypen verwendet man die Daten an sich.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "primitive Datentypen haben eine feste Gr\u00f6\u00dfe und k\u00f6nnen deshalb direkt gespeichert werden. String variablen hingegen haben keine festgelegte Gr\u00f6\u00dfe weshalb unklar ist wie viel Speicher man braucht. Deshalb wird in diesem Fall mit einem extra Speicherplatz gearbeitet, welcher mit einem Identifier versehen wird. In der variable selbst wird die Referenz zu diesem Speicherplatz gespeichert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine String Variable enth\u00e4lt stets nur eine Referenz auf die Speicher, in der sich eine Zeichenkette befindet. Primitive Datentypen wie Integer enthalten deren Wert.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Ein String stellt immer eine Zeichenkette dar.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Speicherplatzgr\u00f6\u00dfe Referenz",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Der String wird als Objekt angelegt, bei primitiven Datentypen ist dies nicht der Fall.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Der Wert des Strings ist die Zuordnung im Speicher, nicht der Inhalt der Variable selbst.",
          "id": "58b2aaa0bfae7acc021b3260e941117b529b2e69de878fd7d45c61a9"
        },
        {
          "text":
            "Strings werden mit Referenzen aufgerufen und primitive Datentypen mit ihrem Wert",
          "id": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a"
        },
        {
          "text":
            "der Unterschied ist dass bei einem String mit Ketten von Zeichen oder Ziffern gearbeitet wird w\u00e4hrend bei primitiven Datentypen mit einzelnen Zahlen, Ziffern oder Zeichen gearbeitet wird",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Bei einem primitiven Datentypen wird bei der Initialisierung ein fester Speicherbereich daf\u00fcr angelegt. Bei Strings funktioniert das nicht, da diese keine festgelegte L\u00e4nge haben. Daher werden Strings mit Referenzen gespeichert. Es wird ein fester Speicherbereich angelegt, der lediglich die Referenz auf ein Stringobjekt speichert, welches allerdings woanders im Speicher liegt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "-",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Stings sind Arrays, also Listen von Chars",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "Die String Variable speichert eine Referenz auf ein Objekt. Ein primitiver Datentyp wird nicht durch eine Referenz, sonder direkt gespeichert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Strings sind, im Gegensatz zu primitiven Datentypen, Objekte. Das hei\u00dft, sie speichern einen Wert bzw. Zeichenkette nicht direkt, sondern verweisen auf den Speicherplatz.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Eine String Variable ist ein Objekt und speichert nicht die Daten selber sondern die Referenz auf die Daten.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein String ist eine eigene Klasse mit Attributen und Methoden und nutzt zum speichern der Informationen selbst primitive datatypes. Ein primitive datatype hat keine Methoden, sondern stellt selbst direkt seinen Wert dar. Zudem ist in Java ein Array kein primitive datatype, da diese in eine wrapper-class mit dessen L\u00e4nge eingebettet ist - anders als in C++, wo bei einem Array nur die primitive datatypes hintereinander im Speicher abgelegt werden.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "ein String wird als Objekt im Speicher gespeichert, es wird nur mit einer referenz auf ihn verwiesen nicht mit dem Inhalt selbst gerechnet",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "Ein String ist eine Verkettung verschiedener Zeichen, ein primitiver Datentyp hat nur einen Wert",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "jijijij",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Strings sind Objekte mit bestimmten Attributen und Operationen.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Strings sind objektorientiert.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Der Wert einer String variable wird in einem seperaten Speicherplatz verwaltet und der String selbst speichert nur die Referenz auf diesen Speicherplatz",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Der String speichert nur die Referenz auf den Wert, in einem primitiven Datentypen ist der Wert direkt gespeichert.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Bei primitiven Datentypen wird der Wert direkt in dem Datentypen gespeichert. Springs werden in Referenzen gespeichert, die auf den String verweisen.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Eine String Variable verweist nur auf auf ein Objekt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Werte von Strings werden als Referenzen gespeichert (call-by-reference), Werte von Datentypen als einzelne Werte (call-by-value).",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "Die String variable ist eine Referenz auf einen im Speicher stehenden Wertes.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "x",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die String Variable speichert eine Referenz auf den Wert, primitive Datentypen speichern den Wert an sich.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Wert zeigt auf die Referenz",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text":
            "Primitive Datentypen speichern den Wert selbst, Strings sind Objekte und enthalten eine Referenz auf das eigentliche Objekt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Strings speichern Referenz zu Objekt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Bei primitven Datentypen werden die Werte direkt in dem reservierten Speicherplatz gespeichert, beim String wird eine Referenz auf einen Speicherplatz gespeichert, in dem dann wirklich die Daten stehen.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Speicherplatz",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was macht der Vergleichsoperator `==` ?",
      "id": 50718,
      "title": "Funktion vom Vergleichsoperator `==`?",
      "referenceAnswer": "Er vergleicht den Wert von Variablen.",
      "answersAnnotation": [
        {
          "text": "doppelte gleichzeichen vergleichen die werte bzw referenzen zweier datentypen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Der Vergleichsoperator '==' stellt ein Vergleich zwischen zwei Werten an, z.B. ' a == b ' zwischen den Werten, die den Variablen a und b zugeordnet sind.",
          "id": "8bbd52208353c14f154f1402cebf5829afb1708d06b5dc25064dff23"
        },
        {
          "text":
            "Der Vergleichsoperator `==` liefert true wenn die Operanden gleich sind, sonst false.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Er vergleicht den Wert von Variablen.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Der Vergleichsoperator \u00fcberpr\u00fcft, ob die Obejekte, die der Operator verbindet identisch sind oder nicht",
          "id": "8a217ea5f39d0f20db42ef9bcb667eacd060a40b50a18655172ec4b8"
        },
        {
          "text":
            "Er vergleicht die Inhalte einer Variablen links mit dem Inhalt einer Variablen auf der rechten Seite.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Der Vergleichsoperator vergleicht zwei Variablen und liefert einen Wahrheitswert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Er pr\u00fcft ob zwei primitive Datentypen oder zwei Referenzen bei komplizierten Datenstrukturen gleich sind.",
          "id": "1e2c3eb4744dbc36de4e827f187dd2a073d91b8790a2ff117694dd7b"
        },
        {
          "text": "vergleicht zwei werte auf gleichheit",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Er \u00fcberpr\u00fcft ob der Inhalt der Variablen der gleiche ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Dieser Vergleichsoperator vergleicht ob seiner linken und rechten Seite dasselbe steht, bzw ob es sich in Variablen um den selben Wert handelt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "er pr\u00fcft ob die beiden varieablen den gleichen inhalt haben",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Er vergleicht die Werte davor und danach, w\u00e4hrend = die Variable auf einen anderen Wert setzt.",
          "id": "ea674ab55536a8b603be44d13510e32c7aab02088bf48c2802e4febd"
        },
        {
          "text":
            "Falls die linke Seite gleich der rechten Seite gibt er true zur\u00fcck, sonst false.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Der Vergleichsoperator == vergleicht die beiden Daten links und rechts von ihm. Er ergibt true, falls auf beiden Seiten das selbe steht.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Bei primitiven Datenytypen vergleicht er ob der gleiche Wert vorhanden ist, bei z.B Strings wird jedoch nur die Referenz, nicht der Inhalt verglichen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Er vergleicht ob die Werte identisch sind.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Vergleicht die linke mit der rechten Seite und gibt true aus, wenn sie gleich sind, sonst false.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Er vergleicht, ob die Referenzen zweier Variablen identisch sind.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "er vergleicht zwei variablen oder zahlen. Im Ausdruck ist es ein boolean. im Gegensatz zum = der Zuweisung, wird der wert einer variable nicht ver\u00e4ndert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Der Vergleichsoperator pr\u00fcft, ob die Daten links und rechts \u00fcbereinstimmen. Zu beachten ist das bei Objekten die Speicherreferenz verglichen wird, nicht der Inhalt.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Er vergleicht ob zwei Zahlen\\/ Wahrheitswerte identisch sind, bei Strings wird \u00fcberpr\u00fcft ob die Referenzen zweier Strings identisch sind.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Er vergleicht die Referenzen der beiden Operanden.",
          "id": "58b2aaa0bfae7acc021b3260e941117b529b2e69de878fd7d45c61a9"
        },
        {
          "text": "\u00dcberpr\u00fcft ob 2 Variablen den gleichen Wert haben",
          "id": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a"
        },
        {
          "text": "Vergleicht die Referenz oder oder falls nicht vorhanden den Inhalt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "der Vergleichsoperator == vergleicht nicht den Inhalt sondern ob das die Referenz die gleiche ist",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Bei primitiven Datentypen vergleicht er die Werte an sich. Bei Chars werden die 16bit Bin\u00e4rwerte verglichen und bei Strings (komplexen Datentypen\\/Objekten) werden lediglich die Referenzen miteinander verglichen und nicht der Inhalt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Vergleicht ob zwei Daten gleich sind.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "vergleichen des Inhalts von variablen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "er vergleicht, ob der erste Wert dem zweiten entspricht",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "Er pr\u00fcft, ob zwei Variablen das Gleiche speichern. Wenn ja gibt er true zur\u00fcck, sonst false. Bei primitiven Datentypen vergleicht er den eigentlichen Inhalt, bei Objekten die Referenz.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Bei primitiven Datentypen: er vergleicht den Wert, der in der Variable gespeichert ist, mit dem Wert einer anderen Variablen. Bei Objekten: er vergleicht, ob die Referenzen der beiden Objekte gleich sind.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Der Operator \u00fcberpr\u00fcft, ob bei zwei Daten der gleiche Inhalt gespeichert ist. Bei Objekten ist demnach relevant, ob sie die gleiche Refernez gespeichert haben.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Pr\u00fcfen, ob die Werte der primitive datatypes die gleichen sind. Bei Pointern wird nur deren Inhalt gepr\u00fcft und NICHT der Inhalt des verwiesenen Objektes...",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Vergleicht Inhalt der zu vergelichenden EIngaben und gibt boolean zur\u00fcck",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "er gibt true aus, wenn die Werte identisch sind, sonst false",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "njknkn",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Der Vergleichsoperator vergleicht nach dem exakt gleichen Wert.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Er vergleicht den Wert zweier Variablen. Im Bezug auf Objekte ist dies die Referenz.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Bei primitiven Datentypen wird hier der Inhalt verglichen.  Bei Objekten werden deren Referenzen verglichen.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Der Vergleichsoperator pr\u00fcft, ob auf dieselbe Referenz verwiesen wird. Es wird allerdings nicht der Inhalt verglichen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Er vergleicht ob die Werte zwischen denen er steht identisch sind. bei Strings vergleicht er, ob die Strings auf die gleiche referenz verweisen, nicht aber ob deren inhalt gleich ist.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "vergleicht ob zwei Werte gleich sind und gibt true oder false zur\u00fcck",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "ist gleich",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Er vergleicht die Werte der beiden Variablen.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "vergleicht den Wert. Bei Strings werden Referenzen verglichen.",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Vergleich zweier Variablen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "er vergleicht zwei Werte",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Pr\u00fcfen, ob zwei z.B. Variablen oder Werte gleich sind.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "\u00fcberpr\u00fcft, ob die Werte die selbe Referenz haben",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text":
        "Wie ist es m\u00f6glich, dass inhaltsgleiche Strings vom Vergleichsoperator `==` als ungleich bewertet werden?",
      "id": 50719,
      "title": "Vergleichen von Strings",
      "referenceAnswer":
        "Beim Vergleichen von Strings mit dem Vergleichsoperator `==` werden die Referenzen verglichen und nicht die Zeichenketten an sich.",
      "answersAnnotation": [
        {
          "text": "sie verweisen auf unterschiedliche referenzen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Mit dem Vergleichsoperator ' == ' werden die Referenzen verglichen, auf die die beiden Strings verweisen, nicht die Strings selbst.",
          "id": "8bbd52208353c14f154f1402cebf5829afb1708d06b5dc25064dff23"
        },
        {
          "text":
            "Es wird die Objektreferenz\\/Adresse verglichen. Es handelt sich um 2 verschiedene Objekte.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Beim Vergleichen von Strings mit dem Vergleichsoperator `==` werden die Referenzen verglichen und nicht die Zeichenketten an sich.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text": "Da die Referenz verglichen wird und diese verschieden sein kann",
          "id": "8a217ea5f39d0f20db42ef9bcb667eacd060a40b50a18655172ec4b8"
        },
        {
          "text":
            "PaCo legt beim Erstellen eines neuen Strings eine neue Referenz an. Diese Referenzen werden dann verglichen, welche trotz gleichem Inhalts unterschiedlich sind.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Vergleichsoperator vergleicht die Referenzen der Strings.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil die Referenz verglichen wird, nicht der Inhalt.",
          "id": "1e2c3eb4744dbc36de4e827f187dd2a073d91b8790a2ff117694dd7b"
        },
        {
          "text": "da ihr Wert auf verschiedene Referenzen zeigt.",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Da als Wert die Referenz auf den Inhalt gespeichert wird. So werden die Referenzen und nicht die Inhalte miteinander verglichen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Da hierbei nicht der Inhalt der Strings verglichen wird, sondern die Referenzen die auf die Strings verweisen, diese k\u00f6nnen ungleich sein auch wenn der String denselben Inhalt hat.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ja, es werden nur die Referenzen verglichen und unterschiedliche Arten des erstellens, k\u00f6nnen zwei Strings mit den gleichen Werten unterschiedliche Referenzen haben",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil nur die Referenz verglichen wird.",
          "id": "ea674ab55536a8b603be44d13510e32c7aab02088bf48c2802e4febd"
        },
        {
          "text":
            "Als Wert wird jeweils eine Referenz gespeichert, welche sich unterscheiden kann.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Ja, wenn sie verschiedene Referenzen haben, die den gleichen (nicht den selben!) Inhalt haben.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es werden die Referenzen, nicht der Inhalt verglichen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es werden die Referenzen verglichen und nicht die Inhalte des Strings.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es werden die Referenzen verglichen, nicht das Inhalt, auf das sie zeigen.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text":
            "Jedes Mal, wenn ein neuer String angelegt wird, wird eine neue Referenz erstellt.  Der Vergleichsoperator vergleicht im Fall von Strings die Referenzen und nicht den Inhalt.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Mit dem operator == wird nur die Referenz der Strings \u00fcberpr\u00fcft. mit .equals()wird der Inhalt \u00fcberpr\u00fcft. (Call by reference!)",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Bei Strings werden beim Vergleichsoperator `==` nur der Pointer betrachtet.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Er erden die Referenzen zweier Strings verglichen, nicht der Inhalt der Strings.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Verglichen wird die Referenz im Pseicher. Diese sind ungleich bei verschieden angelegten Strings.",
          "id": "58b2aaa0bfae7acc021b3260e941117b529b2e69de878fd7d45c61a9"
        },
        {
          "text": "Bei Strings werden die Referenzen verglichen und nicht der Inhalt",
          "id": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a"
        },
        {
          "text": "Referenz",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "wenn man zwei gleiche Strings mit == vergleicht, kann es sein das ungleich herauskommt, da die Referenz auf den Speicherplatz verglichen wird",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Wenn sich die Referenzen unterscheiden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Referenzen der jeweiligen Strings sind andere.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "verschiedene Objektreferenzen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Wenn sie verschiedene Speicherreferenzen haben",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Falls sie eine unterschiedliche Referenz speichern.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Da die Referenz verglichen wird und nicht der eigentliche String.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Der Vergleichsoperator vergleicht bei Objekten wie Strings nicht den eigentlichen Inhalt der Strings, sondern die Referenz, die die beiden Objekte speichern.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Da Strings die Referenz auf den Inhalt gespeichert werden und diese unterschiedlich sein kann bei gleichem Inhalt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Wie bereits geschrieben: Bei Pointern (= auch strings) wird nur gepr\u00fcft, ob die Refernzen gleich sind und weniger ob der Inhalt der gleiche ist!",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Der Vergleichsoperator vergleicht nur die Referenzen, nicht den Inhalt",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "Der Wert eines Strings ist die Referenz im Speicher und die unterscheidet sich bei verschiedenen Strings, auch wenn der inhalt gleich ist.",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "lmlmlm",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Es werden die Verweise verglichen nicht der Inhalt.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Wenn die Strings auf unterschiedliche Speicherpl\u00e4tze verweisen, da einer mit einem New-Operator initialisiert wurde, ist dies der fall.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Ja, der Vergleichsoperator vergleicht die Referenzen der Springs, also ob es sich um denselben String handelt und nicht den Inhalt. daf\u00fcr muss z.B s.equals(t) genutzt werden",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Weil damit nur der Wert, nicht aber der Inhalt verglichen wird.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Das ist m\u00f6glich, da Strings beim Anlegen eine Referenz bekommen. Legt man einen leeren String an und gibt diesem erst sp\u00e4ter einen Wert, so wird die Referenz nicht ver\u00e4ndert, auch wenn es bereits eine Referenz mit jenem Inhalt gibt.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text":
            "das liegt daran, das diese als Referenz auf zwei verschieden Positionen im Speicher zeigen",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Es wird nur die referenz verglichen. Mit equals() wird der inhalt verglichen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es werden die Referenzen, nicht die Werte verglichen.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "HIer werden die Referenzen verglichen.",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text":
            "Der Operator vergleicht die in den Strins abgelegten Referenzen und nicht die Objekte auf die sie verweisen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Strings speichern Referanz und nicht Inhalt selbst",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "weil sie unterschiedliche Referenzen haben",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was passiert bei der Wertzuweisung von einer String-Variablen zu einer Anderen?",
      "id": 50720,
      "title": "Wertzuweisung zwischen Strings",
      "referenceAnswer":
        "Die Referenz wird kopiert. Danach zeigen beide String-Variablen auf dieselbe Zeichenkette.",
      "answersAnnotation": [
        {
          "text":
            "die referenzen werden gleich gesetzt, \u00e4ndert man nun den wert der einen ndert sich die andere automatisch mit",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Referenz, auf die die erste Variable verweist, wird bei der Wertzuweisung von einer String-Variablen zu einer anderen an besagte andere \u00fcbergeben.",
          "id": "8bbd52208353c14f154f1402cebf5829afb1708d06b5dc25064dff23"
        },
        {
          "text":
            "Die Referenz wird kopiert. Danach zeigen beide String-Variablen auf dieselbe Zeichenkette.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text": "Es wird ein neuer String (Objekt) mit dem zugewisenen Inhalt erzeugt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "In der Variable wird dann die Referenz gespeichert",
          "id": "8a217ea5f39d0f20db42ef9bcb667eacd060a40b50a18655172ec4b8"
        },
        {
          "text": "Die Referenz wird kopiert und der anderen Variable zugewiesen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Referenzen werden zugewiesen. Es wird kein neues Objekt erzeugt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "die andere \u00fcbernimmt die Referenz und die vorherige wird gel\u00f6scht",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Die Referenz wird \u00fcbergeben.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Hierbei wird nur die Referenz des String kopiert und so verweist die neue Variable auf denselben String wie die vorherige.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die beiden zeigen nun auf die gleiche Referenz, \u00c4ndert man nun etwas im urspr\u00fcnglichem String, ver\u00e4ndert sich dies auch im neu zugewiesenem",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Sie behalten verschiedene Referenzen aber beide Referenzen zeigen nun auf den gleichen Speicherbereich.",
          "id": "ea674ab55536a8b603be44d13510e32c7aab02088bf48c2802e4febd"
        },
        {
          "text": "Es wird die Referenz auf diesen String gespeichert.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Die Referenz wird ge\u00e4ndert. Der alte String existiert noch, ist jedoch im Speicher verschollen, da er nicht referenziert wird.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Sie bekommt die gleiche Referenz zugewiesen und verweist somit auf den gleichen String.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird die Referenz des Strings zugewiesen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Andere zeigt danach auf die selbe Kette, d.h. auf den selben Speicherplatz, der die Kette enth\u00e4lt.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Die Referenz der ersten String-Variablen wird auch die der zweiten.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "die Referenz der 1. Variable ist nun die Referenz der 2. variable. beide variablen zeigen auf den Inhalt der 2. variable.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Referenz der String-Variablen wird \u00fcbernommen.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Die Referenz des Speicherortes wird neu zugeordnet.",
          "id": "58b2aaa0bfae7acc021b3260e941117b529b2e69de878fd7d45c61a9"
        },
        {
          "text": "Die eine bekommt die Referenz der anderen \u00fcbergeben",
          "id": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a"
        },
        {
          "text": "referenz wird \u00fcbergeben",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "es wird eine neue Variable angelegt in der die Referenz der ersten String-Variable gespeichert wird",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es wird die Referenz kopiert, der urspr\u00fcngliche String bleibt allerdings erhalten, allerdings ohne Referenz, sodass er im Speicher nicht mehr auffindbar ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Referenz der einen wird kopiert, sodass beide Variablen auf denselben String verweisen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine neue Referenz wird erstellt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Wert auf dem String wird \u00fcberschrieben, die Referenz bleibt gleich",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Es wird in dem aufnehmenden String die Referenz des anderen gespeichert.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Die Referenz der einen wird in der anderen gespeichert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird nur die Referenz auf den eigentlichen Inhalt \u00fcbergeben.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Die Referenz wird \u00fcberschrieben.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Danach verweisen beide Strings auf die gleiche Referenz.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text":
            "Es wird die Refernz des originalen Objeltes geupdated - erst bei einer \u00c4nderung wird das interne char-array des strings geklont.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "EIn weiterer Verweis von neuer Variablen auf Objekt, auf das String verweist",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "Ein neuer Speicherbereich mit dem neuen String wird angelegt und die Referent im Wert des Strings wird entsprechend \u00fcberschrieben.",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "okokok",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Es wird lediglich der Verweis ge\u00e4ndert.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Die Referenz wird kopiert. Sie verweisen jetzt auf den selben Speicherbereich.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Sie wird gecastet",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Die Referenz wird kopiert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Referenzen werden ersetzt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "es taucht ein Fehler auf.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "die referenz wird zugewiesen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Referenz wird kopiert und zeigt anschlie\u00dfend auf das gleiche Objekt.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text":
            "Die Referenz wird kopiert und beide verweisen anschlie\u00dfend auf die gleiche Zeichenkette",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die beiden Referanzen verweisen auf selben Inhalt im Speicher",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "die referenz wird zugewiesen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was passiert bei der Anweisung new String()?",
      "id": 50721,
      "title": "Keyword `new`",
      "referenceAnswer":
        "Das Keyword `new` erzeugt einen neuen, leeren String im Speicher und gibt anschlie\u00dfend die Referenz auf diesen String zur\u00fcck.",
      "answersAnnotation": [
        {
          "text": "Es wird eine neue Referenz erstellt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Mit der Anweisung new String() wird ein neuer Speicherort f\u00fcr einen neuen String angelegt.",
          "id": "8bbd52208353c14f154f1402cebf5829afb1708d06b5dc25064dff23"
        },
        {
          "text": "Ein String wird neu in einer Referenz gespeichert.",
          "id": "4cfc3a1811fe40afa401b25ef7fa0379f1f7c1930a04f8755d678474"
        },
        {
          "text":
            "Das Keyword `new` erzeugt einen neuen, leeren String im Speicher und gibt anschlie\u00dfend die Referenz auf diesen String zur\u00fcck.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text": "Es wird ein neuer String (Objekt) mit dem \u00fcbergebenen Inhalt erzeugt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "bei new String() wird ein neuer String erstellt, versehen mit der referenz und einer 0",
          "id": "8a217ea5f39d0f20db42ef9bcb667eacd060a40b50a18655172ec4b8"
        },
        {
          "text":
            "Es wird ein inhaltsloser String erstellt, also nur eine Referenz f\u00fcr den String. Der Inhalt ist dann null.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird ein neues Objekt erzeugt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein neues Objekt der Klasse String wird angelegt.",
          "id": "1e2c3eb4744dbc36de4e827f187dd2a073d91b8790a2ff117694dd7b"
        },
        {
          "text": "ein neues objekt vom typ string wird instanziert",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Es wird ein neues Objekt des Typs String erstellt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine neue Referenz f\u00fcr einen String wird erstellt und in dieser kann dann ein String zugewiesen werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "ein neuer leerer String wird erstellt und seine Referenz wird zur\u00fcck gegeben",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird eine Referenz angelegt, die momentan auf nichts zeigt. Also null ist.",
          "id": "ea674ab55536a8b603be44d13510e32c7aab02088bf48c2802e4febd"
        },
        {
          "text": "Es wird ein neues Objekt der Klasse String erstellt. Dieses ist leer.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Eine neue Variable f\u00fcr einen String wird angelegt. Sie enth\u00e4lt zun\u00e4chst die Referenz NUL",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird ein neuer String angelegt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird ein neuer String erschaffen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine neue leere Zeichenkette wird gespeichert und die Variable wird auf sie zeigen,",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Ein neuer, noch leerer String wird erstellt (und eine neue Referenz).",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "es wird nicht \u00fcberpr\u00fcft ob es schon einen string mit dem gleichen inhalt gibt, sondern ein neuer speicher mit einer neuen Referenz f\u00fcr den String erstellt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein neuer leerer String wird initialisiert.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Ein neues Objekt des Typs String wird erzeugt.",
          "id": "58b2aaa0bfae7acc021b3260e941117b529b2e69de878fd7d45c61a9"
        },
        {
          "text": "Ein neuer leerer String wird angelegt",
          "id": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a"
        },
        {
          "text":
            "neuer speicherplatz wird angelegt und konstruktor von der klasse string wird ausgef\u00fchrt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "es wird ein neuer String angelegt mit der Referenz null da dem String noch kein Wert zugewiesen wurde",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein neues Stringobjekt wird angelegt. Wenn nicht direkt ein bestimmter Inhalt zugewiesen wird, existiert nur die Referenz die auf Null zeigt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein neuer, leerer String wird initalisiert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Neues Objekt erstellt auf das referenziert wird",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird eine neue String Operation erstellt",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "Es wird ein leerer String erzeugt, dessen Referenz keine von schon vorhandenen Strings ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird ein neues Objekt vom Typ String erstellt.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Es wird im Speicher Platz f\u00fcr einen neuen String erstellt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es wird intern ein Pointer auf eine neue Instanz der string-class erstellt. In Java wird einfach ein neues Objekt erzeugt.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Es wird eine neue leere Zeichenkette erstellt",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "neuer speicherbereich wird angelegt",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "jojiji",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Es wird eine neue Referenz erzeugt.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Dem String wird ein (leerer) Speicherbereich zugewiesen\\/ eine Referenz auf diesen Bereich.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Ein neues Objekt der Klasse string wird erstellt",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Ein neuer String wird initialisiert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein neuer String mit neuer Referenz wird angelegt.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text":
            "es wird ein neuer Leerer String erstellt und somit schon mal die Adresse im Speicher reserviert",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "ein neuer String wird erstellt (neue referenz)",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es wird ein neuer leerer String im Speicher erstellt. Anschlie\u00dfend zeigt die Variable auf diesen Speicherplatz.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text":
            "Es wird ein neuer Speicherplatz angelegt, auf den der String verweist, wessen Referenz gespeichert wird.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein neuer leerer String wird erstellt und eine Referenz die darauf zeigt wird gespeichert",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein neuer String wird angelegt.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "ein neuer leerer String wird erstellt, die Referanz zeigt auf Inhalt im Speicher",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "eine neue Referenz wird erschaffen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was ist ein Array?",
      "id": 50722,
      "title": "Datenstruktur Array",
      "referenceAnswer":
        "Ein Array ist eine Datenstruktur, die eine Sequenz von Variablen gleichen Typs enth\u00e4lt.",
      "answersAnnotation": [
        {
          "text": "ein array ist ein Feld in dem Daten gespeichert werden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein Array dient zur Speicherung mehrerer Elemente eines bestimmten Datentyps. Seine L\u00e4nge ist konstant und wird bei seiner Erstellung festgelegt. Arrays k\u00f6nnen auch andere Arrays enthalten, dabei spricht man von mehrdimensionalen Arrays.",
          "id": "8bbd52208353c14f154f1402cebf5829afb1708d06b5dc25064dff23"
        },
        {
          "text":
            "Ein Array ist ein Datentyp, der zur Speicherung und Verwendung mehrerer Werte eines Typs dient.",
          "id": "4cfc3a1811fe40afa401b25ef7fa0379f1f7c1930a04f8755d678474"
        },
        {
          "text":
            "Ein Array ist eine Datenstruktur, die eine Sequenz von Variablen gleichen Typs enth\u00e4lt.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Ein Feld von Daten des gleichen Typs. Die Elemente folgen unmittelbar aufeinander und k\u00f6nnen \u00fcber einen Index adressiert werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "In einem array k\u00f6nnen Werte gespeichert werden er kann auch mehrdemensional sein",
          "id": "8a217ea5f39d0f20db42ef9bcb667eacd060a40b50a18655172ec4b8"
        },
        {
          "text":
            "Ein Array ist ein Objekt, welches eine Reihe von Elementen beinhalten kann. Bei bestimmten Datentypen-Arrays k\u00f6nnen nur Elemente dieses Datentyps enthalten sein.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein Array kann Daten eines gleichen Typs speichern. Die L\u00e4nge eines Arrays ist fest. Die Daten k\u00f6nnen durch einen Index aufgerufen werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "k",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Ist eine Gruppe von Objekten mit denselben Attributen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein Array ist ein Objekt indem eine Sequenz von Daten gespeichert werden kann, welche dann mit Zahlenindexen referenziert werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein Datentyp in welchem eine Art von Daten in einer Reihenfolge gespeichert und durchlaufen werden k\u00f6nnen. Die gr\u00f6\u00dfe wird vorher festgelegt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es \u00e4hnelt vom Aufbau einem String.",
          "id": "ea674ab55536a8b603be44d13510e32c7aab02088bf48c2802e4febd"
        },
        {
          "text":
            "Ein Array ist ein Datentyp, bei dem mehrer Daten aneinandergereiht werden k\u00f6nnen.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Ein Array ist eine Anreihung von Daten.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "ein array ist eine datenstruktur die sequenz von variablen gleichen typs enth\u00e4lt. einzelne eintr\u00e4ge werden durchnummeriert",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "ein Array ist eine KEtte von Zahlen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine Datenstruktur, die eine Menge, die unterschiedlich gro\u00df und unterschiedlich strukturiert sein kann, vom gleichen Datentyp (Integer, Char...) speichert.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text":
            "Ein Array ist ein Datentyp, der eine Reihe von Werten hintereinander speichern kann.  Man kann seine einzelnen Positionen abfragen, aber nicht mit dem Array an sich z.B. rechnen oder ihn ausgeben.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "kann mehrdimensional sein. Speichert einzelne primitive Datentypen in einer Reihenfolge und versieht sie mit Indizes, leichter zugriff. feste gr\u00f6\u00dfe.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein Array ist eine Liste von beliebigen Daten. Auf diese k\u00f6nnen via deren Index zugegruffen werden.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Datentyp der eine Sequenz von Werten den gleichen Datentyps speichert",
          "id": "8a1c55283fd2fc15f72ad8c88c9dcc447f528814a41bf2a7ab51950a"
        },
        {
          "text":
            "Ein Array ist eine Datenstruktur, die es erm\u00f6glicht iterative auf Datens\u00e4tze gleichen Types zuzugreifen. Ein Array, kann mehrere Dimensionen besitzen.",
          "id": "58b2aaa0bfae7acc021b3260e941117b529b2e69de878fd7d45c61a9"
        },
        {
          "text": "Eine Datenstruktur zur Speicherung von gleichartigen Werten",
          "id": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a"
        },
        {
          "text": "ein datentyp",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Array ist ein Datentyp in dem Ziffern oder Zeichen gespeichert und worauf mit Hilfe von Indices zugegriffen werden kann",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine Array ist Objekt, in dem eine Sequenz von Variablen gleichen Typs gespeichert werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Einen Reihung von gleichen Datentypen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Indizierte liste",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Array ist eine Aneinanderreihung von verschiedenen Werten",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Ein Objekt, dass viele Werte eines einzigen Datentyps speichert.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Ein Array ist ein Datentyp der mehrere Daten eines Datentypes abspeichert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Array ist eine Reihe von Variablen gleichen Typs.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine lineare Anordnung an Daten im Speicher. Dies k\u00f6nnen auch Pointer-Arrays sein (Refernzen).",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Ein Objekt mit Integer Werten, die unter Index gespeichert werden",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "Eine Reihe gleicher Datentypen",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "mkmkmk",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Ein Array ist ein statischer Datentyp. Er wird mit einer bestimmten L\u00e4nge festgelegt und kann Werte eines bestimmten Datentyps speichern.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Ein Array ist ein Objekt, dass \u00fcber die Referenz auf einen Speicherbereich, mehrere Werte eines Datentyps in einer Reihenfolge speichert.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Datenstruktur, die eine Sequenz von Variablen gleichen Typs enth\u00e4lt",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Ein Array ist eine Datenstruktur, die eine Sequenz von Variablen des gleichen Typs enth\u00e4lt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein Array ist Sammlung von Werten. Jeder Wert hat einen Index, unter dem er im Array gespeichert wird und abgerufen werden kann, \u00e4hnlich einer Tabelle.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "Speichersequenz von gleichen Datentypen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ist eine Anreihung von Werten eines Datentyps ohne f\u00fcr jeden Wert eine neue deklaration zu definieren",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Datenstruktur",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Array ist eine durchnummerierte Ansammlung von Daten eines Typs.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text":
            "Eine Datenstruktur, die eine festbestimmte Gr\u00f6\u00dfe hat und auf mehrere Objekte durch Referenzen verweisen kann.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "In einem Array k\u00f6nnen mehrere Werte des gleichen Typs gespeichert werden.",
          "id": "0aebf04a018e3de3078a2580a53f660b420bea77865d71caed9f8690"
        },
        {
          "text":
            "Im \u00fcbertragenen Sinn ein Vektor (bei mehrdimensionalen Arrays eine Matrix). Man kann auf jede Position des Array zugreifen.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Matrix, die Reihe von Werten des gleichen Datentyps speichert",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "index zeichenkette",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text":
        "Wodurch wird gew\u00e4hrleistet, dass in einem Array auf einzelne Element zugegriffen werden kann? Wie erfolgt der Zugriff?",
      "id": 50723,
      "title": "Array Zugriff",
      "referenceAnswer":
        "Die einzelnen Eintr\u00e4ge sind durchnummeriert. Man kann durch die Angabe ihres Indices auf sie zugreifen.",
      "answersAnnotation": [
        {
          "text":
            "die elemente werden mit leerzeichen oder kommata getrennt eingegeben. der zugriff erfolgt \u00fcber die position, als die l\u00e4nge des arrays",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es wird ein Name f\u00fcr das Array angegeben und in eckigen Klammern der Index dazu aufgezeigt.",
          "id": "4cfc3a1811fe40afa401b25ef7fa0379f1f7c1930a04f8755d678474"
        },
        {
          "text":
            "Die einzelnen Eintr\u00e4ge sind durchnummeriert. Man kann durch die Angabe ihres Indices auf sie zugreifen.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Die Stellen in einem Array, an welcher Stelle welche Zahl o.\u00e4. steht wird von 0 durchnummeriert und durch den Namen des arrays eckige klammern kann auf bestimmte Zahlen zugegriffen werden",
          "id": "8a217ea5f39d0f20db42ef9bcb667eacd060a40b50a18655172ec4b8"
        },
        {
          "text":
            "Jedem Element wird eine Position (Index) zugewiesen, beginnend mit der 0. Der Zugriff erfolgt dann \u00fcber den Namen des Arrays und [i], wobei i f\u00fcr den Index steht.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Zugriff erfolgt \u00fcber einen Index.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "\u00dcber die Indizes.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Durch Indices die den einzelnen Werten im Array zugewiesen werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Jede Position in der eine Variable gespeichert wird, wird mit einem indice versehen.   Array a[]; a[2] = 5 zB",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Speicherpl\u00e4tze im Array sind ab 0 durchnummeriert. So kann mann in den Array klammern die Stelle auf die man zugreifen will angeben.",
          "id": "ea674ab55536a8b603be44d13510e32c7aab02088bf48c2802e4febd"
        },
        {
          "text":
            "Der Array ist indiziert, somit hat jeder Wert einen zugeh\u00f6rigen Index. Auf diesen kann durch array[index] zugegriffen werden.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "d",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Die Elemente sind mit Indicees versehen. Der Zugriff erfolgt durch array[x][y].",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Duch Indices.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Zugriff erfolgt durch Positionen im Array.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die einzelnen Teilnehmer werder nummeriert. Dann kann man mit array[nummer] auf einen Element zugreifen.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text":
            "Der Zugriff erfolgt mit einer for-Schleife, die bis zur L\u00e4nge des Arrays hochz\u00e4hlt und jede Position ausgeben kann.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "die Elemente des arrays sind durchnummeriert, dh jedes element hat einen index.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Auf einzelne Elemente wird via deren Index zugegriffen. Bsp: array[5] verweist auf das sechste Element.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Die Elemente sind eindeutig durch ihren Index gekennzeichnet. Der Zugriff erfolgt iterativ.",
          "id": "58b2aaa0bfae7acc021b3260e941117b529b2e69de878fd7d45c61a9"
        },
        {
          "text": "Jedes einzelne Element hat ein Index i, Zugriff durch array[i]",
          "id": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a"
        },
        {
          "text": "privtate",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "jedem Element eine Arrays wird ein Index zugewiesen, das erste Element bekommt den Index 0, das zweite 1, usw. bis n-1. Mithilfe dieser Indices kann dann auf einzelne Elemente zugegriffen werden, daf\u00fcr wird in eckigen Klammern hinter den Namen des Arrays der Index des gew\u00fcnschten Elements geschrieben",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die einzelnen Variablen im Array sind durchnummerriert. Man kann auf sie mit Hilfe ihrer Indices zugreifen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Jedes Feld eines Arrays erh\u00e4lt einen Index. Dar\u00fcber kann auf die einzelnen Werte im Array zugegriffen werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Inhalt indiziierugen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "\u00dcber den Aufruf mit [], die Stelle, an der der aufzurufende Wert zu finden ist steht in den Klammern",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "Die einzelnen Elemente sind mit einem Index gekennzeichnet. \u00dcber diesen Index kann auf das Element zugegriffen werden.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "In einem Array werden alle Daten unter einem Indize gespeichret. Zugriff: >ArrayName<[>Indiz<]",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es wird dadurch gew\u00e4hrleistet, dass jeder Eintrag einen Index hat. Der Zugriff erfolgt durch die Operation nameDesArray[Index].",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Man kann via dem []-Operator auf einzelne Elemnte zugreifen. Das Offset des gesuchten Eintrages l\u00e4sst sich dabei mit n*[Datentypel\u00e4nge] berechnen. Java pr\u00fcft zus\u00e4tzlich ob n >= der L\u00e4nge ist und wirft dann eine NULL-Pointer-Exception. Man beginnt bei 0 zu z\u00e4hlen.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Array besitzt Index, somit kann auf das Element im Araay an einer bestimmten Stelle zugegriffen werden.",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "Jedes Element bekommt einen Index von 0 bis L\u00e4nge - 1, dieser ist einduetig",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "njnjnjn",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Der Zugriff erfolgt in den eckigen Klammern.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Im Array wird eine Indizierte Sequenz gespeichert, auf deren Felder \u00fcber die Indizes zugegriffen werden kann.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Durch die Indexe der verschiedenen Zellen kann auf die Variablen in diesen Zugegriffen werden. Zugriff auf Element mit dem Index i. feld[i]",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Die L\u00e4nge des Arrays muss bei der Erzeugung angegeben werden. Somit hat jeder Wert einen Index, auf den mit der Anweisung array[index] zugegriffen werden kann.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Der Zugriff erfolgt \u00fcber Indizes, die die Elemente durchnummerieren. Diese beginnen bei 0 bis n, wobei n die Anzahl der Elemente -1.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text":
            "ein Array muss eine Feste gr\u00f6\u00dfe haben und der Zugriff erfolgt per [] Klammern",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "jeder Wert hat eine Referenz",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Alle Elemente eines Arrays sind durchnummeriert. Durch die Indices kann auf sie zugegriffen werden.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text":
            "Der Zugriff erfolgt erneut \u00fcber Referenzen. Die Elemente in einem Array werden je mit einem bestimmten Index verbunden, durch welche sie aufgerufen werden k\u00f6nnen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Elemente sind durchnummeriert, \u00fcber die Indices kann auf sie zugegriffen werden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "durchnummeriert, Indices",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "durch indices",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Wie wird die Zeitkomplexit\u00e4t von Algorithmen angegeben?",
      "id": 50724,
      "title": "Zeitkomplexit\u00e4t von Algorithmen",
      "referenceAnswer":
        "Die Zeitkomplexit\u00e4t wird \u00fcber die Anzahl an ben\u00f6tigten Rechenschritten in Abh\u00e4ngigkeit von der Eingabegr\u00f6\u00dfe angegeben.",
      "answersAnnotation": [
        {
          "text": "als laufzeit in der o notation",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "In der O-Notation",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Sie wird durch O(n) angegeben.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Zeitkomplexit\u00e4t wird \u00fcber die Anzahl an ben\u00f6tigten Rechenschritten in Abh\u00e4ngigkeit von der Eingabegr\u00f6\u00dfe angegeben.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text": "Mit der Laufzeit O in Abh\u00e4ngigkeit von n Eingaben\\/Ausf\u00fchrungen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "in der O-Notation",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "In der O- Nation (asymptotische Laufzeit)",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "In der O-Notation der Landausymbole",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "in der O notation",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "In der Landau bzw O-Notation.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "O notation,",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "In der asymptotischen Laufzeit mit der O-Notation.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "O()",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "In Laufzeiten O(n).",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "In der gro\u00df O Notation.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Mit der O-Notation, welche einer Ann\u00e4herung an die Worst-Case-Laufzeit entspricht.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "mithilfe von Laufzeiten, es gibt den Best-Case, den Worst-Case und den Average-Case. Diese werden in Form der O-Notation angegeben",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Mit der Asymptotischen Laufzeit.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Mit der O-Notation.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Mithilfe der Klasse O in Abh\u00e4ngigkeit von der Anzahl der bearbeiteten Daten (n) und Rechenschritten.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "O notation",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "In O Notation",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Mit der O-Notation",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "In der Landau-Notation",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "In der O-Notation.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Indem man die Best-\\/Average-\\/Worst-Case Laufzeit angibt. F\u00fcr die Worst-Case-Laufzeit wird die O() Notation verwendet.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Als Best\\/Worst\\/Average-Case in der asymptotischen Laufzeit. Schreibweise: O(...)",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "in der O-Notation",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "Die gr\u00f6\u00dfenordnung der l\u00e4ngsten Schleife wird angegeben in Abh\u00e4ngigkeit von der Eingabegr\u00f6\u00dfe n",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "nkn",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Hierunter wird die Laufzeit eines Algorithmus verstanden.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "In der O-Notation wird die Zeitkomplexit\u00e4t dargestellt. Dabei wird eine obere Schranke f\u00fcr die Laufzeit angegeben.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "in O Notation",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Absch\u00e4tzung nach oben, O-Form",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text":
            "In der o-Notation, in Abh\u00e4ngigkeit von der eingabegr\u00f6\u00dfe n, \u00fcber die anzahl an ben\u00f6tigten rechenschritten",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "O- Notation",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "O Notation",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Anzahl der Rechenschritte in Abh\u00e4ngigkeit der Eingabe.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "O-Notation",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Anzahl der Rechenoperationen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Wie ist ein Rechenschritt definiert?",
      "id": 50725,
      "title": "Definition Rechenschritt",
      "referenceAnswer":
        "Ein einzelner Rechenschritt hat einen Zeitaufwand von konstanter Gr\u00f6\u00dfe.",
      "answersAnnotation": [
        {
          "text":
            "Ein einzelner Rechenschritt hat einen Zeitaufwand von konstanter Gr\u00f6\u00dfe.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Die Rechnung wird in Abh\u00e4ngigkeit der Eingabegr\u00f6\u00dfe ausgef\u00fchrt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Abschnitt beim Rechnen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Er hat eine konstante Gr\u00f6\u00dfe",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Rechenschritt ist ein Vergleich oder eine Ver\u00e4nderung einer Variablen.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "ein elementarer vorgang(z.b. rechnungen",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Ein Rechenschritt beinhaltet eine Handlung.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein Rechenschritt ist definiert als eine Operation die der Compiler ausf\u00fchren muss.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Ein Rechenschritt ist eine klar abgegrenzte Operation.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Ein Rechenschritt ist zum Beispiel eine Addition, also eine Operation, die in einer konstanten Zeicht durchgef\u00fchrt werden kann.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "ein Rechenschritt ist der Vorgang bei dem einer Variable ein neuer Wert zugewiesen wird durch Verrechnung zweier anderer Variablen oder Werte",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "...",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Er braucht konstante Zeit.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine oder meherere nacheinander durchzuf\u00fchrende Operationen, die von dem Zustand des System \u00e4bh\u00e4ngig werden und den Zustand \u00e4ndern k\u00f6nnen.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "eine Operation deren Laufzeit bekannt ist",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Anweisung.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Zum Beispiel ein Durchgang bei einer Schleife",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Als eine konstante Zeiteinheit (IF muss zwei Werte lesen, vergleichen und zur\u00fcckgeben - mehr Einsicht bietet hier Assembler).",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Als grundlegene Operation, wie z.B. einfache Rechenzeichen, Operationsaufrufe, etc.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "O(1)",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "Ein Rechenschritt ist die einmalige Ausf\u00fchrung eines Programmteils mit konstanter und beschr\u00e4nkter Laufzeit.",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "okok",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Ein Rechenschritt ist eine Anweisung im Programm.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Ein Rechenschritt entspricht einer Elementaroperation, die in endlicher Zeit ausgef\u00fchrt wird.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Ein Rechenschritt ben\u00f6tigt eine konstante zeit.      Anweisungen\\/Rechenschritte werden in einer begrenzten Anzahl an Operationen durchgef\u00fchrt. Eine Anweisung, Zeile im Programm?",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Ausf\u00fchrung auf einem Element. z.B. ein Vergleich, eine Addition...",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "ist das ausf\u00fchren einer Operation",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "x",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein Rechenschritt braucht immer eine konstante Zeit unabh\u00e4ngig von der Eingabe.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "eine Aufgabe",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Ein Rechenschritt ben\u00f6tigt eine konstante Zeit",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text":
        "Warum ist die Laufzeit f\u00fcr das Sortieren von Strings im Gegensatz zu Integern nicht allein von der Anzahl der zu sortierenden Elemente abh\u00e4ngig?",
      "id": 50726,
      "title": "Komplexit\u00e4t Sortieren von Strings",
      "referenceAnswer":
        "Weil die L\u00e4nge eines Strings theoretisch keine obere Schranke besitzt. Die Laufzeit f\u00fcr den Vergleich von zwei Strings ist daher nicht konstant, sondern von der L\u00e4nge der Strings abh\u00e4ngig.",
      "answersAnnotation": [
        {
          "text":
            "strings selber k\u00f6nnen nochmal unterschiedlich gro\u00df sein und damit unterschiedlich viele Rechenschritte brauchen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Weil die L\u00e4nge eines Strings theoretisch keine obere Schranke besitzt. Die Laufzeit f\u00fcr den Vergleich von zwei Strings ist daher nicht konstant, sondern von der L\u00e4nge der Strings abh\u00e4ngig.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text": "Weil Strings einen gr\u00f6\u00dferen Speicherbedarf haben.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Da Strings mit Referenzen arbeiten.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es ist auch von der l\u00e4nge der Strings abh\u00e4ngig",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Wegen Typecasts.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "we",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Ist der String ung\u00fcnstig sortiert, m\u00fcssen mehr Tauschaktionen durchgef\u00fchrt werden, als wenn er zb schon sortiert ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil es auch von den Referenzen der Strings abh\u00e4ngt.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Strings k\u00f6nnen in ihrer L\u00e4nge variieren, was bei der Sortierung beachtet werden muss. Integer haben eine feste Gr\u00f6\u00dfe.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Weil Strings aufw\u00e4ndiger sortiert werden m\u00fcssen, da sie nicht so einfach zu vergleichen sind.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Weil Strings Referenzen besitzen. Das hei\u00dft zus\u00e4tzlicher Speicher wird ben\u00f6tigt. Das Sortieren geschieht nicht insitu.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Weil die Strings eine theoretisch unedliche L\u00e4nge haben k\u00f6nnen, w\u00e4hrend die gr\u00f6\u00dfe von Integer begrenzt ist.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Weil es auch auf die L\u00e4nge der einzelnen Strings ankommt",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "Es h\u00e4ngt auch noch von der L\u00e4nge der Strings ab. Au\u00dferdem muss ja die Referenz verglichen werden.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Die einzelnen Zeichen eines Strings m\u00fcssen erst in Integer umgewandelt werden, bevor sie sortiert werden k\u00f6nnen.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Weil Strings wiederrum verschiedene L\u00e4ngen haben - diese sind wiederrum nichts anderes als Arrays mit chars und einer eigenen L\u00e4nge.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Weil jeder einzelne String aus mehreren chars besteht und Integer keine solche Eigenschaft haben.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil die gr\u00f6\u00dfe der zu sortierenden Strings variabel ist",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "In einem Integer muss nur der Wert des Ints vergleichen werden, bei einem String muss der ganze String durchlaufen und jedes Zeichen verglichen werden.",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "njnjni",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Bei Strings werden immer die Objekte angesprochen und deswegen ist dies nicht allein von den sortierten Elementen abh\u00e4ngig.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Strings repr\u00e4sentieren Zeichenkette, haben also auch eine variable Eingabegr\u00f6\u00dfe in sich.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Ein String hat keine obere schranke f\u00fcr seine l\u00e4nge, die als konstante genommen werden kann (vereinfacht nach oben abgesch\u00e4tzt), auch von der l\u00e4nge der strings abh\u00e4ngig",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil in Strings der Inhalt der Referenzen verglichen werden muss.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "x",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Anders als Integer k\u00f6nnen Strings eine unendliche L\u00e4nge haben.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Es werden unterschiedlichviele Vergleiche ben\u00f6tigt",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text":
            "Da f\u00fcr das Sortieren auch die einzelnen Symbole der Sstrings relevant sind, ist die Laufzeit ebenso davon abh\u00e4ngig, wieviele Zeichen die Strings ausmachen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Da die L\u00e4nge eines Strings nicht festgelegt ist, anders als die eines Ints,",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Strings sind nicht wirklich nach oben beschr\u00e4nkt, es kommt also auf Inhalt an",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was wird \u00fcber die O-Notation angegeben?",
      "id": 50727,
      "title": "O-Notation",
      "referenceAnswer":
        "Die O-Notation beschreibt eine obere Schranke f\u00fcr die Wachstumsrate einer Funktion.",
      "answersAnnotation": [
        {
          "text":
            "eine sehr grob abgesch\u00e4tze laufzeit, die haupts\u00e4chlich zum vergleich zwischen laufzeiten verschiedener programme dient. sie ist unabh\u00e4ngig von der rechnerleistung und sonstigen Zeitfaktoren",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die O-Notation beschreibt die Laufzeit eines Programms.",
          "id": "4cfc3a1811fe40afa401b25ef7fa0379f1f7c1930a04f8755d678474"
        },
        {
          "text":
            "Die O-Notation beschreibt eine obere Schranke f\u00fcr die Wachstumsrate einer Funktion.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text": "Die Laufzeit in Abh\u00e4ngigkeit der Eingabegr\u00f6\u00dfe.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die asymptotische Laufzeit eines Algorithmus.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Laufzeit",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die asymptotische Laufzeit in Abh\u00e4ngigkeit zur Eingabe.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "die laufzeit in abh\u00e4ngigkeit der datengr\u00f6\u00dfe,",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Eine obere Schranke der Laufzeit.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Laufzeit",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Laufzeit",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Laufzeit eines Programms (abh\u00e4ngig von der Eingabe).",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Die abgesch\u00e4tze Laufzeit eines Algorithmus.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Die angen\u00e4herte Worst-Case Laufzeit in Abh\u00e4ngigkeit von n.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "mit der O-Notation wird die Laufzeit eines Algorithmus' in Abh\u00e4ngigkeit zur Eingabegr\u00f6\u00dfe angegeben",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die asymptotische Laufzeit als obere Schranke.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Laufzeit",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Wie viel sich die Laufzeit von dme Programm \u00e4ndert, wenn sich die Anzahl von der Eingabe \u00e4ndert.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Laufzeitl\u00e4nge",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Laufzeit eines Algorithmus in Worst, Average und Best Case",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "Die Laufzeit f\u00fcr einen Rechenschritt oder eine Folge von Rechenschritten oder einen Algorithmus",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Die Laufzeit in Abh\u00e4ngigkeit von der Eingabegr\u00f6\u00dfe.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Die worst-case Laufzeit, also die obere Schranke der Laufzeit f\u00fcr einen Algorithmus.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Worst-case Laufzeit. SCHRIEB ICH BEREITS.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Die asymptotische Laufzeit.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die laufzeit in Abh\u00e4ngigkeit von der Eingabegr\u00f6\u00dfe",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "Die Gr\u00f6\u00dfenordnung der Laufzeit des l\u00e4ngsten Programmteils in Abh\u00e4ngigkeit von der Eingabegr\u00f6\u00dfe n",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "lllklkl",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Die O-Notation gibt die Laufzeit des Programms an.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "EIne obere Schranke fpr die Laufzeit.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "die Laufzeit",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Die Laufzeit eines Algorithmus in Landau-Symbolen. In der Regel wird die Worst-Case-Laufzeit angegeben.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "obere schranke f\u00fcr die wachstumsrate einer funktion  worst case laufzeit",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die obere Schranke der Laufzeit.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "Die Laufzeit eines Algorithmus oder Programms",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Laufzeit",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die obere Schranke f\u00fcr die Laufzeitentwicklung eines Programms.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Laufzeit",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Die Abh\u00e4ngigkeit der Laufzeit von der L\u00e4nge der Eingabe",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was bedeutet eine Laufzeitangabe von O(1)?",
      "id": 50728,
      "title": "O(1)",
      "referenceAnswer":
        "O(1) bedeutet, dass der Algorithmus unabh\u00e4ngig von der Eingabe eine konstante Anzahl an Rechenschritten ben\u00f6tigt.",
      "answersAnnotation": [
        {
          "text":
            "Das eine konstante Zeit zur Durchf\u00fchrung ben\u00f6tigt wird, unabh\u00e4ngig von der Eingabe",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Operation ben\u00f6tigt einen Schritt, um zum Ergebnis zu gelangen.",
          "id": "4cfc3a1811fe40afa401b25ef7fa0379f1f7c1930a04f8755d678474"
        },
        {
          "text":
            "O(1) bedeutet, dass der Algorithmus unabh\u00e4ngig von der Eingabe eine konstante Anzahl an Rechenschritten ben\u00f6tigt.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text": "Die Laufzeit des Algorithmus ist von konstanter Zeit (relativ schnell).",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Dauer des Algorithmus betr\u00e4gt eine konstante Zeit. (wird einmal aufgerufen)",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das die obere Schranke der Laufzeit konstant ist",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Dass es eine konstante obere Schranke f\u00fcr die Laufzeit gibt.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Eine konstante Laufzeit.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "konstante Laufzeit",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Laufzeit ist kontant.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "operation wird in konstanter Zeit ausgef\u00fchrt",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Dass der Schritt konstante Zeit braucht.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Die Laufzeitangabe von O(1) bedeutet das der Algorithmus unabh\u00e4ngig von der Eingabegr\u00f6\u00dfe eine konstante Zeit ben\u00f6tigt.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Dass das Programm eine konstante Laufzeit braucht.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "O(1) bedeutet das die Laufzeit des Algorithmus konstant ist, das hei\u00dft egal wie gro\u00df die Eingabe ist, es braucht max. O(1) Zeit den Algorithmus auszuf\u00fchren",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Laufzeit von konstanter Gr\u00f6\u00dfe.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Zeit ist durch eine Konstante beschr\u00e4nkt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Konstante Laufzeit, unabh\u00e4ngig von der Eingabegr\u00f6\u00dfe.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Konstant",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Dass exakt ein Durchlauf n\u00f6tig ist, ergo die Laufzeit unabh\u00e4ngig der Eingabe konstant ist",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "Die obere Schranke f\u00fcr den Algorithmus dauert konstante Zeit 1. Die Laufzeit des Algorithmus n\u00e4hert sich asymptotisch der 1.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Die Laufzeit ist konstant",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "das bedeutetet konstante Zeit.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Konstante Laufzeit. Unabh\u00e4ngig von Eingabemengen oder deren Wert.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Dass die Laufzeit konstant ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "eine konstante Laufzeit",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "Konstante Leufzeit",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "nknkn",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Es ist ein einzelner Rechenschritt im Programm oder es durchl\u00e4uft eine Anweisung in konstanter Zeit.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Der Rechenschritt ben\u00f6tigt nur eine konstante Zeit und ist unabh\u00e4ngig von der Eingabegr\u00f6\u00dfe in konstanter Zeit zu erreichen.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "die Laufzeit ist konstant und nicht von der Eingabegr\u00f6\u00dfe n abh\u00e4ngig",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Der Algorithmus ben\u00f6tigt einen Durchlauf. Die Laufzeit ver\u00e4ndert sich bei verdoppelter Eingabegr\u00f6\u00dfe nicht (wesentlich).",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "unabh\u00e4ngig von der eingabe gr\u00f6\u00dfe braucht der Algorithmus eine konstante maximale zeit   Der Algorithmus braucht im schlechtesten fall eine konstante zeit (nicht abh\u00e4ngig von eingabegr\u00f6\u00dfe?)",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Laufzeit ist konstat, die Wachstumsrate eine Gerade.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "Konstante Zeit und abh\u00e4ngig von den eingegebenen Daten",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Das es egal bei welcher eingabe eine konstante laufzeit ben\u00f6tigt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Konstante Laufzeit.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text":
            "Das Programm besitzt eine konstante Laufzeit, unabh\u00e4ngig der Eingabel\u00e4nge.",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text":
            "\u00dcnabh\u00e4ngig von der Eingabegr\u00f6\u00dfe wird eine konstante Zeit ben\u00f6tigt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text":
        "Was ist der Vorteil einer Angabe in Rechenschritten gegen\u00fcber einer Angabe in Sekunden oder der Zahl der Maschinenbefehle?",
      "id": 50729,
      "title": "Rechenschritte vs Sekunden",
      "referenceAnswer":
        "Die Angabe in Rechenschritten ist unabh\u00e4ngig von der jeweiligen Umsetzung in einer Programmiersprachen und den Hardware Eigenschaften eines Computers wie Taktfrequenzen und Prozessorarchitekturen.",
      "answersAnnotation": [
        {
          "text":
            "Sie ist unabh\u00e4ngig von Betriebssystem, Prozessor, Hintergrundprogrammen usw.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Angabe in Rechenschritten ist unabh\u00e4ngig von der jeweiligen Umsetzung in einer Programmiersprachen und den Hardware Eigenschaften eines Computers wie Taktfrequenzen und Prozessorarchitekturen.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Der Algorithmus kann f\u00fcr verschiedene Datentypen mehr oder weniger Sekunden ben\u00f6tigen und Maschinenbefehle besitzen unterschiedliche Zeiten f\u00fcr die Ausf\u00fchrung.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Da die Anzahl an Rechenschritten unabh\u00e4ngig von anderen beeinflussenden Faktoren ist. Und bestimmt die Laufzeit so genauer.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Letzteres ist abh\u00e4ngig von der Maschiene auf der sie ausgef\u00fchrt wird, Rechenschritte allgemeiner und man kann mit ihnen systemunabh\u00e4ngig Vergleiche machen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die genannten Alternativen w\u00e4ren von der Hardware abh\u00e4ngig.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Eine Angabe in Rechenschritten ist unabh\u00e4ngig von der Hardware und von dem, was auf dem Computer im Hintergrund geschieht. Au\u00dferdem ist sie unabh\u00e4ngig von der Programmiersprache.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Zahl der Maschinenbefehle ist nicht aussagekr\u00e4ftig, da zeitaufwand nicht von der menge der befehle abh\u00e4ngt. sekunden w\u00e4re zu zeitaufwendig und teilweise unm\u00f6glich, da manche algorithmen unendlich viel zeit laufen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "dadurch muss man keine r\u00fccksicht auf die rechenleistung des rechners nehmen,",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Dass man so die Zeit abh\u00e4ngig von Eingaben messen kann.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Die Geschwindigkeit und Anzahl der Maschienenbefehle k\u00f6nnen variieren.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Es ist leichter vergleichbar. Wenn man die Laufzeit in Sekunden ang\u00e4be, w\u00e4re dies zu ungenau, da ein und dasselbe Programm auf verschiedenen Computer unterschiedlich lange dauert kann.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Unabh\u00e4ngig von Computer, \u00e4u\u00dferen Bedingungen,...",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ist von der Platform und von dem Zustand des Rechners und Systems unabh\u00e4ngig.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Unterschiedliche vergleiche, umweltbedingungen haben einfl\u00fcsse",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es macht die Programme vergleichbarer. Bei zeitlichen Messungen k\u00f6nnte es zu Abweichungen je nach Compiler, Laufwerk etc. kommen, w\u00e4re also ungenauer",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "Weil ein Algorithmus auf unterschiedlichen Systemen eine unterschiedliche absolute Zeit ben\u00f6tigt.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Je nachdem wie schnell der Computer ist, braucht er zum Ausf\u00fchren mehr oder weniger Zeit als andere Computer, obwohl es derselbe Code ist.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Unabh\u00e4ngig von weiteren Faktoren, wie zB Betriebssystem.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Nun diese variieren nicht, so treten bei Sekundenangaben oder Maschinenbefehlen ger\u00e4tespezifische Fluktuationen auf.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Das macht die Angabe besser vergleichbar, da sie dann unabh\u00e4ngig von der tats\u00e4chlich verwendeten Maschine macht.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "unabh\u00e4ngig von System etc.",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "die Angabe in Rechenschritten ist unabh\u00e4ngig von der Programmiersprache oder den Rechenkapazit\u00e4ten des Computers",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "klmlkmlml",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Vorteile sind, dass es unabh\u00e4ngig von Prozessor, Hardware und Betriebssystem gemessen wird. Das ganze macht das Programm vergleichbarer.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Diese Angabe ist Hard-\\/Software unabh\u00e4ngig. \u00c4u\u00dfere Umst\u00e4nde werden also nicht miteinbezogen.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "So wei\u00df man f\u00fcr jede Eingabegr\u00f6\u00dfe n, wie sich diese auf die Laufzeit auswirkt. Wenn man die Laufzeit in Sekunden angibt, hat man keinen Ma\u00dfstab um welchen Faktor sich die Laufzeit in Abh\u00e4ngigkeit einer anderen Eingabegr\u00f6\u00dfe ver\u00e4ndert",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Die Zeit variiert je nach Ger\u00e4t usw.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Sekunden sind abh\u00e4ngig von anderen (nicht so wichtigen und schwierig abzusch\u00e4tzenden Faktoren wie hardware und Betriebssystem). Maschinenbefehle sind abh\u00e4ngig von Programmiersprache..",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die tats\u00e4chlich ben\u00f6tigte Zeit ist abh\u00e4ngig von anderen Faktoren z.B. der Hardware. Das hei\u00dft das selbe Programm kann auf verschiedenen Computern unterschiedliche Laufzeiten haben. Um das zu vermeiden gibt man die Laufzeit nur auf das Programm bezogen an: In Rechenschritten.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text":
            "Diese Angabe ist Maschinenunabh\u00e4ngig und muss so nicht an jede Architektur angepasst werden",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Rechenschritte h\u00e4ngen nicht von externen faktoren ab",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Unabh\u00e4ngig von Programmiersprache oder Hardwarebedingungen.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text":
            "Unterschiedliche Computer, mit unterschiedlichen Rechensystemen brauchen unterschiedlich lange",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Die Angabe entspricht einer generellen Angabe",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Unabh\u00e4ngigkeit von Hardware, Software usw",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "gleich, unabh\u00e4ngig von Programmiersprache und Hardware",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Beschreibe das Vorgehen bei der lineare Suche.",
      "id": 50730,
      "title": "Lineare Suche",
      "referenceAnswer":
        "Jedes Element der zu durchsuchenden Menge wird der Reihe nach mit dem gesuchten Element verglichen.",
      "answersAnnotation": [
        {
          "text":
            "alle elemente werden nacheinander gepr\u00fcft bis das gesuchte element gefunden ist oder keine elemente mehr \u00fcbrig sind",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Jedes Element der zu durchsuchenden Menge wird der Reihe nach mit dem gesuchten Element verglichen.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Es wird ein Array durchlaufen, wobei array[i] (Wert des Elements an Position i) mit dem gesuchten Element verglichen wird.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Jedes Element des Arrays wird nach einander mit dem gesuchten Element verglichen. Bis dieses gefunden wurde oder das Array bis zum Ende durchlaufen wurde.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Wir haben ein Array, welches von einem Stepper durchlaufen wird und jedes Element mit dem Gesuchten vergleicht, wenn  das Element im Array dem Gesuchten entspricht, wird wird der index als int gespeichert und ausgegeben",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Werte werden der Reihe nach durchlaufen, solgane bis der gesuchte Wert gefunden wurde.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Bei der linearen Suche wird ein Array mit Daten von vorne bis hinten durchgegangen und mit dem gesuchten Element verglichen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Man geht gegebene Werte durch und vergeicht sie mit dem gesuchten wert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Man pr\u00fcft f\u00fcr jede Zahl, ob diese Zahl die gesuchte ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "man vergleicht immer nacheinander die zahlen eines arrays mit dem gesuchten",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Bei der linearen Suche wird ein Array von vorne bis hinten durchgegangen um nach einer Zahl zu suchen.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Man geht die gegebene Liste Schritt f\u00fcr Schritt durch und \u00fcberpr\u00fcft ob man das gesuchte Element gefunden hat.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Das Array, oder die Zahlenkette wird Schritt f\u00fcr Schritt von links nach rechts durchlaufen und jede Zahl wird mit der gesuchten Zahl verglichen. Man kann den Prozess abbrechen, sobald die Zahl gefunden wurde.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "bei der linearen Suche wird nach einem bestimmten Element gesucht. Daf\u00fcr wird das Array einmal komplett durchgegangen und jedes Element darauf gecheckt ob es das gesuchte Element ist",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es wird ein Array von vorne bis hinten durchgelaufen und bei jedem Wert kontrolliert, ob es dem gesuchten Wert entspricht.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "wir laufen den datensatz von vorne bis hinten ab und vergleichen das gesuchte element mit dem aktuellen (wenn wir das gesuchte haben brechen wir evtl ab, wenn wir es bis zum ende nicht gefunden haben, ist es nicht im datensatz und wir brechen trotzdem ab)",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein Element wird in einem Array gesucht. Dabei wird vorne angefangen und immer das n\u00e4chste Element betrachtet .",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Kette wird vom Anfang bis Ende durchgesucht und jedes Element nach dem anderen mit dem gesuchten verglichen.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "durchgehen von Anfang bis ende",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Man untersucht jedes Element in der Reihe und vergleicht es mit dem gesuchten",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "das zu durchsuchende (sortierte) Array wird in der Mitte geteilt. In jedem Schritt wird entschieden, ob die gesuchte Zahl (wenn die in dem Array enthalten ist) in der rechten oder linken Seite sein muss. So wird das zu durchsuchende Teilst\u00fcck des Arrays immer halbiert.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Die Elemente werden nacheinander durchgegangen, bis das aktuelle Element mit dem Gesuchten \u00fcbereinstimmt.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Das Array wird einfach durchgelaufen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Vom ersten bis zum letzten Element durchgehen und pr\u00fcfen, ob das aktuelle Element das Gesuchte ist. Ab Ende wird NULL zur\u00fcckgegeben, wenn es nicht gefunden werden konnte....",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Man braucht einen gesuchten Wert und ein Array in dem gesucht werden soll. Jetzt wird bei jedem Index des Arrays gepr\u00fcft ob es dem gesuchten Wert entspricht. Falls ein Eintrag dem gesuchten Wert entspricht kann true und der Index zur\u00fcck gegeben werden. Falls alle Eintr\u00e4ge durchlaufen werden und der Wert nicht gefunden wird ist er nicht im Array enthalten.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Man vergleicht nacheinander jedes Element mit dem gesuchten, durch Abbruchbedingung bei Finden, l\u00e4sst sich Laufzeit verk\u00fcrzen",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "Ein Datensatz wird Eintrag f\u00fcr eintrag mit dem zu suchenden Element verglichen. wenn das Element gefunden wurde,",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "b",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Es wird jedes Element einzeln durchsucht, also linear. Die O-Notation ist hier O(n).",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Bei der linearen Suche wird ein Array systematisch Durchlaufen.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Ich habe ein Element Gesucht. Ich Durchlaufe meinen Datensatz systematisch und vergleiche jedes Element mit meinen Element gesucht.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Die lineare Suche wird in deinem unsortierten Datensatz durchgef\u00fchrt. Der Datensatz wird systematisch durchladen und dabei jedes Element mit dem gesuchten Element verglichen. Es gibt eine Abbruchbedingung.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Bei der linearen Suche wird ein Array der Reihe nach durchgegangen und jedes Element nacheinander mit dem gesuchten verglichen. Die Suche endet, wenn das gesuchte Element gefunden wurde.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text":
            "Bei der linearen Suche werden alle Elemente mit dem zu suchenden Element verglichen",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Es wird einmal komplett durch die Liste von vorne nach hinten gelaufen & jedes Element wird verglichen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Jedes Element wird der Reihe nach mit dem gesuchten Element verglichen.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text":
            "Man geht die Eingabe, der Reihe nach ab und schaut ob das Objekt, das gesuchte ist",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text":
            "Das gr\u00f6\u00dfte Objekt wird herausgesucht und nach hinten getauscht, wiederhole f\u00fcr n-1",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Beschreibe das Vorgehen bei der bin\u00e4ren Suche.",
      "id": 50731,
      "title": "Bin\u00e4re Suche",
      "referenceAnswer":
        "Es wird immer nur das mittlere Element der noch zu durchsuchenden Menge mit dem gesuchten Element verglichen. Die anschlie\u00dfend noch zu durchsuchende Menge ist jeweils diejenige H\u00e4lfte der Menge welche bez\u00fcglich des Suchkriteriums im gleichen Verh\u00e4ltnis zum mittleren Element steht, wie das zu suchende Element.",
      "answersAnnotation": [
        {
          "text":
            "die elemente m\u00fcssen vorsortiert sein, es wird immer das mittlere element verglichen und dann in der entsprechenden h\u00e4lfte weitergesucht",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Da das Array bei der bin\u00e4ren Suche sortiert ist, wird dieses in zwei H\u00e4lften aufgeteilt und das Array so verkleinert, bis der gesuchte Wert gefunden ist. Hierbei kann nat\u00fcrlich auch der Anfang, das Ende oder die Mitte der gesuchte Wert sein.",
          "id": "4cfc3a1811fe40afa401b25ef7fa0379f1f7c1930a04f8755d678474"
        },
        {
          "text":
            "Es wird immer nur das mittlere Element der noch zu durchsuchenden Menge mit dem gesuchten Element verglichen. Die anschlie\u00dfend noch zu durchsuchende Menge ist jeweils diejenige H\u00e4lfte der Menge welche bez\u00fcglich des Suchkriteriums im gleichen Verh\u00e4ltnis zum mittleren Element steht, wie das zu suchende Element.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Anders als bei der linearen Suche, wird hier das Intervall halbiert, sodass die Chance besteht das gesuchte Element schneller zu finden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein vergleich Element wird ungef\u00e4hr in der Mitte des Arrays bestimmt. Anschlie\u00dfend wird das gesuchte Element mit diesem verglichen und geguckt ob die Elemente gleich sind. Oder das gesuchte Element kleiner oder gr\u00f6\u00dfer ist. Ist der gesuchte Wert gr\u00f6\u00dfer wird Start auf vergleich + 1 gesetzt. Ist der gesuchte Wert kleiner wird Ende auf vergeleich - 1 gesetzt. Dies wird so lange wiederholt bis das gesuchte Element gefunden wurde oder Start > Ende.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Bei der Bin\u00e4ren Suche betrachten wir drei Punkte im Array, Ende, Start und den Vergleichswert. Entspricht der vergleichswert dem gesuchten wird sein index ausgegeben. ist der vergleichswert gr\u00f6\u00dfer wird er zum neuen Ende, wenn kleicher zum neuen start. so halbieren wir pro Runde die l\u00e4nge der zu durchlaufenden elemente",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es wird immer der mittlere Wert zwischen Start und Ende mit dem gesuchten Wert verglichen. Ist dieser gr\u00f6\u00dfer, wird der Vergleichswert zum neuen Startwert, sonst zum Endwert.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Bei der bin\u00e4ren Suche liegt ein vorsortiertes Array vor. Man arbeitet mit einem Index Start und einem Index Ende. Das Element in der Mitte wird betrachtet. Ist es kleiner als gesucht, wird Ende auf den aktuellen Index gesetzt, ist es gr\u00f6\u00dfer als gesucht, wird Start auf den aktuellen Index gesetzt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es wird ein start, ein ende und ein vergleichselement festgelegt. anschlie\u00dfend wird das gesuchte element mit dem vergleichselement verglichen. ist es das gesuchte element bricht die suche ab und die l\u00f6sung wird ausgegeben. ist der verglichene wert gr\u00f6\u00dfer als der gesuchte, wird ende = vergleich-1 gesetzt. ist der verglichene wert kleiner als der gesuchte wird start = x+1 gesetzt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Das sortierte Array wird in zwei Teile aufgeteilt. Bei der Mitte wird geguckt, ob das gesuchte Element gr\u00f6\u00dfer, kleiner oder gleich die Mitte ist. JE nach Antwort wird dann in diesem Teil des Arrays weiter gesucht.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "das gesuchte gibt an, ob man in der hinteren oder vorderen h\u00e4lfte des arrays sucht und so immer weiter",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Bei der bin\u00e4ren Suche wird der Array mittels der Indizes immer halbiert und das gesuchte Element mit dem Mittelwert verglichen. Ist es gr\u00f6\u00dfer, sucht man nur in der zweiten H\u00e4lfte weiter, ist es kleiner, nur in der ersten.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Bei der bin\u00e4ren Suche halbiert man den Bereich den man durchsucht jeden Schritt. Bei jedem Schritt wird \u00fcberpr\u00fcft, ob das aktuelle Element das gesuchte Element ist. Wenn nicht, schaut man ob es kleiner ist als das gesuchte Element. Falls es kleiner ist, setzt man den Suchbereich auf die obere H\u00e4lfte des Suchbereich, sonst auf die untere H\u00e4lfte.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Die Menge an Zahlen muss sortiert sein, dann wird das mittlere Element betrachtet und mit der gesuchten Zahl verglichen. Wenn die Zahl gleich der gesuchten Zahl ist, ist das Programm fertig. Wenn die gesuchte Zahl gr\u00f6\u00dfer ist, werden anschlie\u00dfend nur noch die Elemente rechts von der Mitte betrachtet, wenn die gesuchte Zahl kleiner ist nur noch die linke H\u00e4lfte. Dann wird das Verfahren f\u00fcr diese Teilarrays wiederholt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "bei der bin\u00e4ren Suche wird das Array zun\u00e4chst halbiert und das Element in der Mitte mit dem gesuchten verglichen. Ist das gesuchte Element gr\u00f6\u00dfer als das Element Mitte wird im n\u00e4chsten Schritt nur die zweite H\u00e4lfte des Arrays angeguckt, ist das gesuchte Element kleiner als das Element Mitte wird nur die vordere H\u00e4lfte des Arrays auf das gesuchte Element untersucht.  Dann wird das Teilarray wieder halbiert, die Mitte mit dem gesuchten Element verglichen und der Vorgang immer weiter wiederholt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Bei der bin\u00e4ren Suche ist es wichtig, dass die zu durchsuchende Menge vorsortiert ist. Diese wird in zwei Teile geteilt : Start bis Mitte und Mitte+1 bis Ende. Es wird nach und nach verglichen, ob der gesuchte Wert gr\u00f6\u00dfer oder kleiner als die Mitte ist. Solange er kleiner ist, wird Ende auf Mitte gesetzt, wenn er gr\u00f6\u00dfer ist wird Start auf Mitte gesetzt. Wenn er gleich dem Wert der Mitte ist, ist der Wert gefunden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "In einem Sortierten Datensatz grenzen wir nach und nach den Bereich ein in dem das gesuchte element liegen kann. Ein vergleichselement auf der h\u00e4lfte des infrage kommenden Bereichs wird mit dem dem gesuchten element verglichen. wenn das gesuchte element gr\u00f6\u00dfer als das vergleichselement ist, liegt es zwischen vergleich und ende, sonst zwischen start und ende!",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es wird in der Mitte begonnen und immer geschaut, ob das gesuchte Element kleiner oder gr\u00f6\u00dfer ist. Solange bis ende < start oder gesucht gefunden wurde.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die aufsteigend vorsortierte durchsuchende Menge wird halbiert, das Element in der Mitte wird mit dem gesuchten Wert verglichen, wenn entspricht, dann sind wir fertig, wenn nicht und das gesuchte Element gr\u00f6\u00dfer ist, suchen wir in der oberen H\u00e4fte, sonst in der unteren. Usw. bis wir finden oder nicht finden (die duchsuchende H\u00e4lfte ist leer).",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text":
            "immer wieder halbieren des suchbereiches und links und recht davon wird geschaut",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es wird zun\u00e4chst sortiert und anschlie\u00dfend in Abschnitte geteilt, bei denen verglichen wird, ob das gesuchte Element gr\u00f6\u00dfer oder kleiner als das Vergleichselement ist. Je nachdem geht der Algorithmus links (wenn kleiner) oder rechts (wenn gr\u00f6\u00dfer) weiter oder beendet, wenn das gesuchte Element gefunden wurde",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "das zu durchsuchende (sortierte) Array wird in der Mitte geteilt. In jedem Schritt wird entschieden, ob die gesuchte Zahl (wenn die in dem Array enthalten ist) in der rechten oder linken Seite sein muss. So wird das zu durchsuchende Teilst\u00fcck des Arrays immer halbiert.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Die bin\u00e4re Suche funktioniert nur bei einer sortierten Menge an Elementen. Bei jedem Durchgang wird ein Vergleichselement aus der Mitte herausgepickt und mit dem gesuchten Element verglichen.  Es werden drei F\u00e4lle unterschieden:  Stimmt das Vergleichselement mit dem gesuchten \u00fcberein, wird die Schleife beendet. Ist das gesuchte Element kleiner als das Vergleichselement, wird nun der bisherige Vorgang im Bereich links neben dem Vergleichselement durchgef\u00fchrt. Ist das gesuchte Element gr\u00f6\u00dfer als das Vergleichselement, wird der bisherige Vorgang im Bereich rechts neben dem Vergleichselement durchgef\u00fchrt.  Die letzten beiden F\u00e4lle werden so oft durchgef\u00fchrt, bis das gesuchte Element mit dem Vergleichselement \u00fcbereinstimmt.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Ein vorsortierter Array. Mittleres Element wird mit gesuchten Element verglichen. Ist das gesuchte Element gr\u00f6\u00dfer, wird das Mittlerem Element zu Ende",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Man teilt die Menge der zu durchsuchenden Menge an Daten in einen Teil, der gr\u00f6\u00dfer und einen der kleiner als das geuchte Element ist ein. Dann entscheidet man sich in welchen der beiden Teile weitergesucht wird - so lange bis man es gefunden hat, oder man keine zu durchsuchenden Element mehr hat. Daf\u00fcr muss eben diese Menge bereits vorsortiert sein oder irgendwie gewichtbar sein.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Man schaut sich den mittleren Wert einer sortierten (Teil-)Menge an und pr\u00fcft, ob das der gesuchte Wert ist. Falls ja hat man ihn gefunden. Falls nicht, dann wiederholt man den Schritt in der Teilmenge mit den kleineren Eintr\u00e4gen, falls der gesuchte Wert kleiner als der gepr\u00fcfte Wert ist und sonst in der Teilmenge mit den gr\u00f6\u00dferen Eintr\u00e4gen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Das Array wird vorsortiert. Das gesuchte Element wird mit dem Mittleren Element verglichen, Suchbereich wird ver\u00e4ndert, je nachdem ob gesuchtes Element gr\u00f6\u00dfer oder kleiner ist als Mitte",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "Das zu suchende Element wird mit dem mittleren Element des sortierten Datensatzes verglichen. Ist es gr\u00f6\u00dfer, wird das mittlere Element zur linken, ist es kleiner zur rechten Grenze des neuen zu durchsuchenden Intervalls.",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "h",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Bei der Bin\u00e4ren Suche wird nicht linear vorgegangen, sondern das Array immer geschickt aufgeteilt, sodass die Laufzeit gegen\u00fcber der linearen Suche verbessert werden kann.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Die bin\u00e4re Suche l\u00e4uft auf einem sortierten Array. Hier wird ein Vergleichswert mit dem gesuchten ELement verglichen. Je nach Resultat, kann das Element als gefunden angesehen, bzw. der Suchbereich verk\u00fcrzt (meist halbiert) werden. Nach einer Endlichen Zahl von Halbierungen(Ologn) und Vergleichen wird klar, ob das Element enthalten ist, oder nicht.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Ich habe ein Element Gesucht. Ich habe Start und Ende des Datensatzes.  Ich halbiere den Datensatz. Ich erhalte das Element Vergleich. Ich Vergleiche Vergleich mit Gesucht, ist das Element gefunden gebe ich es zur\u00fcck. Je nachdem ob Gesucht gr\u00f6\u00dfer oder kleiner Vergleich ist, suche ich in der obere oder unteren h\u00e4lfte des Datensatzes weiter.  Die wiederhole ich, bis gesucht gefunden ist, oder Start > Ende.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Die bin\u00e4re Suche wird in einem sortierten Datensatz durchgef\u00fchrt. Es wird gepr\u00fcft, ob das gesuchte Element gefunden wurde. Dazu wird zuerst das mittlere Element des Intervalls mit dem gesuchten Element verglichen. Wenn es nicht das gesuchte Element ist, wird gepr\u00fcft, ob das gesuchte Element kleiner oder gr\u00f6\u00dfer als das mittlere Element ist. Ist es kleiner, wird ende=vergleich gesetzt, ist es gr\u00f6\u00dfer wird start=vergleich gesetzt. Es wird also jeweils in der entsprechenden H\u00e4lfte des Intervalls weitergesucht und dort erneut anhand des mittleren Wertes verglichen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die bin\u00e4re Suche sucht in einem sortierten Array. Sie beginnt in der Mitte (start+ende\\/2) und pr\u00fcft, ob das aktuelle Element gleich, gr\u00f6\u00dfer oder kleiner als das gesuchte ist. Entsprechend werden start oder ende neu gesetzte und die Suche nur in der entsprechenden H\u00e4lfte weiterdurchgef\u00fchrt.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text":
            "bei der bin\u00e4ren Suche wird der Suchbereich in einem geordneten Array in zwei bereiche aufgeteilt und je nachdem ob der Wert kleiner ist als der mittlere Wert des sortierten Arrays dann links oder rechts von dem Vergleichsindex weiter gesucht. Dann werden die Start und End indizies angepasst und das selbe nochmal durchgef\u00fchrt.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Es wird immer in die h\u00e4lfte geteilt & dann geguckt ob es gr\u00f6\u00dfer oder kleiner ist & dann wieder das gleiche",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es wird jeweils nur das mittlere Element mit dem gesuchten Element verglichen. Je nachdem ob es gr\u00f6\u00dfer oder kleiner ist, bildet es die neue vordere oder hintere Intervallsgrenze.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text":
            "Immer das mittlere Elemente wird mit dem gesuchten Element verglichen, entsprechend des Verh\u00e4ltnisses des gesuchten zur Mitte wird danach nur eine der H\u00e4lften betrachtet",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text":
        "Welches Kriterium muss eine Menge von Elementen erf\u00fcllen, damit die bin\u00e4re Suche angewandt werden kann?",
      "id": 50732,
      "title": "Kriterium f\u00fcr bin\u00e4re Suche",
      "referenceAnswer": "Die Menge muss sortiert sein.",
      "answersAnnotation": [
        {
          "text": "Die Elemente m\u00fcssen der gr\u00f6\u00dfe nach sortiert sein",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das Array muss bereits sortiert sein.",
          "id": "4cfc3a1811fe40afa401b25ef7fa0379f1f7c1930a04f8755d678474"
        },
        {
          "text": "Die Menge muss sortiert sein.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text": "Es muss eine endliche Menge sein.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Elemente m\u00fcssen auf- oder absteigend sortiert sein.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "sie muss sortiert sein",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Elemente m\u00fcssen der Gr\u00f6\u00dfe nach sortiert sein.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Es muss sortiert sein.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Sortiert",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es muss sortiert sein.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "muss sortiert sein",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Sie m\u00fcssen schon vorsortiert sein.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Die Menge von Elementen muss sortiert sein.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Die Menge von Elementen muss sortiert sein.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Menge muss vorsortiert sein.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "sortierter datensatz",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es muss vorsortiert sein.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Sie muss vorsortiert sein.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "mindestens 3 elemente",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Gr\u00f6\u00dfe nach sortiert",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Sie muss sortiert vorliegen.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Sie muss vorher sortiert worden sein.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "vorsortiert, element enthalten",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "SORTIERT SEIN.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Sie muss sortiert sein.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Sie muss vorsortiert sein",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "Die Menge muss sortiert sein.",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "k",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Es muss mindestens zwei Elemente geben.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Die MEnge der Element muss sortiert sein.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Die Menge von Elementen muss vorsortiert sein.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Der Datensatz muss sortiert sein.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Sie muss sortiert sein.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "die Menge an Elementen muss sortiert sein",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Sie m\u00fcssen sortiert sein",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Menge muss sortiert sein.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Sie muss vorsortiert sein.",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Die Menge muss sortiert sein",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Warum ist die bin\u00e4re Suche der linearen vorzuziehen?",
      "id": 50733,
      "title": "Vorteil der bin\u00e4ren Suche",
      "referenceAnswer": "Die bin\u00e4re Suche hat eine deutlich geringere Laufzeit.",
      "answersAnnotation": [
        {
          "text":
            "Sie ben\u00f6tigt weniger Rechenschritt und hat folglich eine k\u00fcrzere Laufzeit",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Da die Laufzeit bei der bin\u00e4ren Suche geringer ist.",
          "id": "4cfc3a1811fe40afa401b25ef7fa0379f1f7c1930a04f8755d678474"
        },
        {
          "text": "Die bin\u00e4re Suche hat eine deutlich geringere Laufzeit.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text": "Weil sie nur die H\u00e4lfte der Laufzeit braucht.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Da sie weniger Zeit ben\u00f6tigt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ihre Laufzeit ist k\u00fcrzer. Linear O(n^2), Bin\u00e4r O(logn)",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil sie eine geringe asymptotische Laufzeit hat.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Es m\u00fcssen nicht alle Elemente gepr\u00fcft werden, sondern es kann immer eine H\u00e4lfte des \u00fcbrigen Arrays ausgeschlossen werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "bessere laufzeit",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es gibt dadurch eine k\u00fcrzere Laufzeit.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "k\u00fcrzere Laufzeit",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Weil sie eine kleinere Laufzeit hat, n\u00e4mlich nur O(nlog(n)).",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Die bin\u00e4re Suche ben\u00f6tigt weniger Vergleiche als die lineare Suche.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Da sie durchschnittlich eine k\u00fcrzere Laufzeit hat.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "da das Array immer halbiert wird, m\u00fcssen nicht alle Elemente verglichen werden weshalb die Laufzeit der bin\u00e4ren Suche deutlich k\u00fcrzer ist als die der linearen Suche.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Da sie eine k\u00fcrzere Average-Case Laufzeit hat, als die lineare Suche (O(log(n)) statt O(n)).",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "worst case Laufzeit o(log(n)), besser als O(n) bei linearer suche. allerdings bleibt da die zeit die f\u00fcr das Sortieren ben\u00f6tigt wurde nicht ber\u00fccksichtigt. Lohnt sich also nur bei h\u00e4ufiger suche.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Sie ben\u00f6tigt weniger Zeit.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil ihr Worst-Case-Laufzeit kleiner ist. Und zwar O(log n), anstatt O(n)",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Schneller im worst case",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Geht schneller, da in Abschnitten gearbeitet werden kann und nicht jedes Element einzeln abgearbeitet werden muss",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Die Anzahl der Vergleiche ist deutlich geringer.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Da sie im Durchschnitt deutlich weniger Vergleiche ben\u00f6tigt",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "weniger vergleiche, bessere Laufzeit",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Sie hat eine geringere Laufzeit von gerade mal O(log(n)) und nicht O(n).",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Weil die Laufzeit \\/ Zeitkomplexit\u00e4t besser ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "K\u00fcrzere Average Case Laufzeit, da unter bestimmten Bedingungen nicht gesamtes Array durchsucht werden muss, nur wenn gesuchte Zahl nicht enthalten ist",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "Die bin\u00e4re Suche hat eine Leufzeit von lon(n), die lineare Suche von n",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "lklk",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Die bin\u00e4re Suche hat eine k\u00fcrzere Laufzeit.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Die lineare Suche hat in den meisten F\u00e4llen eine geringere Laufzeit.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Die Laufzeit der linearen Suche betr\u00e4gt O(n), die Laufzeit der bin\u00e4ren Suche betr\u00e4gt O(log(n)). Die bin\u00e4re Suche ist schneller.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Weil die Laufzeit in der Regel k\u00fcrzer ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die bin\u00e4re Suche vergleicht nicht alle Elemente, sondern halbiert die zu durchsuchende Menge mit jedem Schritt.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "Weil die Anzahl der Vergleich dadurch sinkt.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Weil sie schneller ist!",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Sie hat eine deutlich k\u00fcrzere Laufzeit.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Schneller",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Deutlich geringere Laufzeit.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was ist eine Operation?",
      "id": 50807,
      "title": "Definition Operation",
      "referenceAnswer":
        "Eine Operation ist eine gruppierung von Anweisungen zu einem Ausf\u00fchrungskontext.",
      "answersAnnotation": [
        {
          "text": "eine Operation\\/Methode ist ein Teilprogramm das aufgerufen werden kann",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine Operation ist eine gruppierung von Anweisungen zu einem Ausf\u00fchrungskontext.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Eine Operation stellt eine Funktionalit\u00e4t zur Verf\u00fcgung, die von au\u00dfen aufrufbar ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine Operation kann auf Objekten ausgef\u00fchrt werden. SIe k\u00f6nnen das Verhalten von Objekten beeinflussen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine Operation tut etwas, wenn sie aufgerufen wird. Dabei k\u00f6nnen Daten \u00fcbergeben und zur\u00fcckgegeben werden.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Eine Operation ist eine Menge von Anweisungen mit einem bestimmten Ziel.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Methode, die einen Handlungsablauf beschreibt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "d",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Eine Operation besteht aus einem R\u00fcckgabetyp, einem Namen und Parametern.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Eine Operation ist eine einzelne Anweisung.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "eine Operation oder auch Methode ist eine Ansammlung von Anweisungen, die auf einem Objekt ausgef\u00fchrt werden k\u00f6nnen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine Operation beschreibt, was man mit Objekten machen kann (addieren, subtrahieren, vergleichen etc.).",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Block von Anweisungen in einem Kontext.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein Unterprogramm, das definierte Eingaben und Ausgabe hat und programmierte Befehle ausf\u00fchrt.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Eine Operation ist ein abgeschlossener Programmabschnitt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine Operation ist ein ausgelagerter Teil vom Quellcode, auf den durch andere Operationen zugegriffen werden kann (teilweise auch aus anderen Klassen).",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Eine Liste an Kommandos, welche in einer best. Reihnfolge ausgef\u00fchrt werden. Ist ebenfalls eine Methode.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "methode ausf[hrbar sammlung von anweisungen",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Eine Operation ist eine Sammlung an Anweisungen, die zusammengefasst wurden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Operation ist ein aufrufbarer Programmteil au\u00dferhalb der Main",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text":
            "methoden einer Klasse, die an den Attributen der Klasse (static) oder des jeweilig zu bearbeitenden Objekts ausgef\u00fchrt wird",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "j",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Eine Operation sind mehrere Anweisung in einer Methode zusammengefasst. Die Operation\\/ Methode kann sp\u00e4ter in der Main-Methode genutzt werden.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Eine Operation ist ein Codeabschnitt, der von au\u00dfen augerufen werden kann und bestimmte Rechenschritte durchf\u00fchrt. Die Operationen beschreiben das Verhalten einer Klasse.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Eine Operation beschreibt was ein Objekt kann",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Eine Operation ist ein Programmblock, der einen bestimmte Aufgabe durchf\u00fchrt.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "Eine operation erledigt eine oder mehrer Teilaufgaben.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Eine Methode.",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Eine geb\u00fcndelte Sammlung von Anweisungen.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "eine Funktion oder eine Methode innerhalb einer KLasse",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Operation ist eine zusammenfassung von Anweisungen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Wozu dienen Operationen?",
      "id": 50808,
      "title": "Funktion von Operationen",
      "referenceAnswer":
        "Operationen k\u00f6nnen an verschiedenen Stellen verwendet werden und ersparen somit Code. Sie dienen au\u00dferdem zur Strukturierung des Codes in semantisch zusammenh\u00e4ngende Teilabschnitte.",
      "answersAnnotation": [
        {
          "text":
            "Das Hauptprogramm bleibt \u00fcbersichtlich, da viele schritte outgesourct werden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Operationen k\u00f6nnen an verschiedenen Stellen verwendet werden und ersparen somit Code. Sie dienen au\u00dferdem zur Strukturierung des Codes in semantisch zusammenh\u00e4ngende Teilabschnitte.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Operationen k\u00f6nnen von au\u00dfen aufgerufen werden, um in einer Klasse verschiedene Werte auf dieser Operation ausf\u00fchren zu k\u00f6nnen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Strukturierung, Vermeidung von duplicate code, \u00dcbersichtlichkeit",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Sie machen den Code \u00fcberischlicher und sorgen f\u00fcr weniger Fehler.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Sie ver\u00e4ndern Variablen.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Operationen dienen der \u00dcbersichtlichkeit eines Programms und sie machen das Programm k\u00fcrzer, da von verschiedenen Stellen des Programmablaufs auf sie zugegriffen werden kann.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "bessere unterteilung der programmabschnitte",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "s",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Operationen sind daf\u00fcr da, Programme auszuf\u00fchren und auch mit Parametern, die aus anderen Operationen \u00fcbergeben wurden weitere Operationen ausf\u00fchren zu k\u00f6nnen.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Operationen dienen zur Strukturierung von Programmen.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Operationen dienen dazu Programme in logische Abschnitte zu unterteilen und somit f\u00fcr \u00dcbersichtlichkeit und einfacherere Auseinandersetzung mit dem Prozess zu sorgen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Sie dienen zur Ver\u00e4nderung von Objekten.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Zur Einfachheit eines Quelltextes",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Zu \u00c4nderungen des Systems.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Um den Code k\u00fcrzer und \u00fcbersichtlicher zu gestalten",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Anweisungen werden ausgef\u00fchrt und ein R\u00fcckgabewert ausgegeben",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Sie machen Quellcode \u00fcbersichtlicher, zum Beispiel wenn derselbe Code mehrmals im Programm ben\u00f6tigt wird.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Anweisungen zu b\u00fcndeln. \u00dcbersichtlicher. M\u00f6glichkeit deren Sichtbarkeit einzustellen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Zum erledigen von Aufgaben in z.B. einem Programm.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Wenn eine Operation ein Teilproblem korret l\u00f6st kann die Operation einfach aufgerufen statt sich mehrere Male mit dem Teilproblem zu besch\u00e4ftigen. Dadurch werden Problem durch Divide and Conquer leichter zu l\u00f6sen und auch Quelltext wird \u00fcbersichtlicher.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Dem bearbeiten von Werten",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "njn",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Vermeidung von doppelten Code. Es kann in Gruppen gearbeitet werden. Jeder k\u00fcmmert sich um eine bestimmte Operation.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Operationen dienen zur Kapselung von Programmabschnitte zu verschiedenen Ausf\u00fchrungskontexten. Es kann Speicherplatz gespart werden.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Die Operationen legen den Bauplan f\u00fcr ein Objekt fest und somit was dieses Objekt kann",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Operationen lassen Programme \u00fcbersichtlicher sein.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "zum erledigen von Teilaufgaben",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "...",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Zur besseren Gliederung von Code.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "um ausf\u00fchrungsanweisungen zu b\u00fcndeln",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Wiederverwendbar,",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was geh\u00f6rt zu der Signatur einer Operation in Java?",
      "id": 50809,
      "title": "Signatur in Java",
      "referenceAnswer":
        "Zur Signatur einer Operation in Java geh\u00f6ren der Name und die Parameter, insbesondere die Parameterzahl und Reihenfolge der Typen.",
      "answersAnnotation": [
        {
          "text": "Ein Methodenkopf",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Name der Operation, Anzahl und Typ ihrer Parameter.",
          "id": "4cfc3a1811fe40afa401b25ef7fa0379f1f7c1930a04f8755d678474"
        },
        {
          "text":
            "Zur Signatur einer Operation in Java geh\u00f6ren der Name und die Parameter, insbesondere die Parameterzahl und Reihenfolge der Typen.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text": "Name der Operation, Parameter und R\u00fcckgabetyp.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Name und die \u00dcbergabeparameter.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "R\u00fcckgabewert, Methodenname, Parameter",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Public oder private, die \u00fcbergebenen Argumente und zur\u00fcckgegebener Datentyp oder void.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Der R\u00fcckgabewert, die Sichtbarkeit und der Name.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "lol",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Die Sichtweise (public, private, protected etc).",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Die R\u00fcckgabe und Eingabe der Operation.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Der R\u00fcckgabetyp, der Operationsname und die \u00fcbergebenen Parameter.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "In die Signatur einer Operation geh\u00f6ren Name der Operation, R\u00fcckgabetyp und die Parameter, die der Operation \u00fcbergeben werden sollen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "\u00d6ffentlichkeit \\/ statisch? \\/ R\u00fcckgabewert \\/ Name \\/ Parameter",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Name, Parameter.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "public private protected void dateneingabe",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Um die Operation dem Aufruf zuordnen zu k\u00f6nnen",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Sichtbarkeit, R\u00fcckgabewert, name (parameter)",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein Methodenkopf, sowie Methodenrumpf. Im Methodenkopf steht der Name, der Operation, der R\u00fcckgabetyp, die zu \u00fcbergebenen Parameter und die Sichtbarkeit.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Funktionsname und deren Parameter. Nicht der R\u00fcckgabewert.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Der Name der Operation und ihre Parameter.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "public <R\u00fcckgabetyp> <Name der Klasse> (PArameter)",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "Sichtbarkeit, R\u00fcckgabewert, Name",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Sichtbarkeits dekalration: public, private, protected Wiedergabe Wert: void, Object, boolean etc. Name ggf: Parameter ggf static",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Kopf mit R\u00fcckgabeart und Parametern und der Rumpf mit dem Algorythmus",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "nnb",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "R\u00fcckgabewert + Methodenname + zu \u00fcbergebene Parameter",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "In Java umfasst die Signatur Operationsname und Parameter.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Name, Parameter und R\u00fcckgabetyp",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Sichtbarkeit, R\u00fcckgabetyp, Name, evtl. \u00dcbergabewerte",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text":
            "ein Funktionskopf (R\u00fcckgabewert Name und ggf. \u00dcbergabeparameter) und ein Funktionsrumpf die Ansammlung von Anweisungen.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "R\u00fcckgabewert, Parameter und Datentyp",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "R\u00fcckgabe, Parameter",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Der Name und der\\/die Parameter.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "R\u00fcckgabetyp, Name und Variablen, die \u00fcbergeben werden",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Der R\u00fcckgabetyp einer Methode, der Name der Operation und m\u00f6glichweise noch die Werte die der Operation beim Aufruf \u00fcbergeben wird.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Name und Parameter.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "name, anzahl, typ der Parameter",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es geh\u00f6rt die Sichtbarkeit, der R\u00fcckgabetyp, der Name und die Parameter dazu.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Wozu dient eine Signatur?",
      "id": 50810,
      "title": "Funktion der Signatur",
      "referenceAnswer": "Die Signatur dient zur eindeutigen Identifikation einer Operation.",
      "answersAnnotation": [
        {
          "text": "Die Signatur dient zur eindeutigen Identifikation einer Operation.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text": "Um verschiedene Werte auf dieser Operation ausf\u00fchren zu k\u00f6nnen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Signatur wird bei der Verwendung im Programm angegeben.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Zur Unterscheidung der einzelnen Methoden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Zur Spezifizierung der Operation",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Die Signatur dient zur \u00dcbergabe von Werten und anderen Daten.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Name, um eindeutig unterscheidbare Operationen zu haben Parameter, um festzulegen welche Werte die Operation \u00fcbergeben bekommen muss um ausf\u00fchrbar zu sein",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "k",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Eine Signatur dient dazu, genau anzugeben, was der Sinn der Operation ist.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Die Signatur wird dazu verwendet um die Operation aufrufen zu k\u00f6nnen.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "eine Signatur dient zur eindeutigen Unterscheidung der einzelnen Operationen, insbesondere durch Namen der Operation und durch Reihenfolge und Art der Parameter",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Signatur dient zur Unterscheidung von Operationen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Zur wiederholbaren Ausf\u00fchrbarkeit",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "So wird definiert, wie man eine Methode aufrufen kann.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Zugriffsfestlegung",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Damit die Operation wei\u00df, was sie tun soll und welche Elemente sie verwenden darf",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "damit kann man die operation aufrufen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Um genauere Angaben \u00fcber eine Operation zur Verf\u00fcgung zu stellen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Man kann mithilfe der Signatur von anderen Operationen aus auf die Operation zugreifen.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Ausreichend, damit m",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Hiermit kann erkannt werden ob z.B. doSomething(a, b); die Version der Funktion mit (int, int) oder mit (int, string) meint. Somit wird die auszuf\u00fchrende Operatorenliste eingeschr\u00e4nkt.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Um festzuhalten unter welchem Namen eine Operation aufruft und welche Argumente man dabei braucht. Au\u00dferdem um die Parameter f\u00fcr den Operationsrumpf zu bennenen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "UM Operationen mit ihrem Namen aufrufen zu k\u00f6nnen, je nach anzahl der PArameter werden unterschiedliche Operationen aufgerufen",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "die parameter sind wichtig, da sie beim ausf\u00fchren der operation zu den zu bearbeitenden argumenten werden, deren Ergebnisse (wenn nicht void) wieder in den Parametern gespeichert werden und der R\u00fcckgabetyp ist wichtig um zu wissen, welcher typ zur\u00fcck gegeben wird",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Sie dient dazu, die R\u00fcckgabeart festzulegen, den Namen festlegen und die Parameter festzulegen(Typ, Anzahl, Reihenfolge)",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "hjg",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Darunter kann sp\u00e4ter die Methode in der Main-Methode aufgerufen werden.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Zur eindeutigen Unterscheidung von verschiedenen Operationen.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Die Signatur zeigt einem auf den ersten Blick, was eine Operation zur\u00fcckgibt und wer sie verwenden kann. Sie bildet den Kopf einer Operation und grenzt sie so von anderen Operationen ab.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "zur eindeutigen identifizierung der Methode",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "zum aufrufen und zum \u00fcbergeben der Parameter",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Zur eindeutigen Identifikation von Operationen.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "um die Operation genau zu spezifizieren, damit man sie richtig aufrufen kann",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Einedeutige Identifizierung der Operation",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was ist ein Parameter?",
      "id": 50811,
      "title": "Definition Parameter",
      "referenceAnswer":
        "Ein Parameter ist eine lokale Variable eine Operation, die beim Aufruf von au\u00dfen mit einem Wert versehen werden kann.",
      "answersAnnotation": [
        {
          "text": "eine Variable",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein Parameter ist eine lokale Variable eine Operation, die beim Aufruf von au\u00dfen mit einem Wert versehen werden kann.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Ein Parameter ist ein Platzhalter f\u00fcr einen Wert eines bestimmten Datentyps.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Manche Operationen ben\u00f6tigen Parameter, um etwas durchf\u00fchren zu k\u00f6nnen. Dieser steht hinter der Operation in Klammern.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ist eine Variable welche an eine Methode \u00fcbergeben wird.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "An die Operation \u00fcbergebene Daten eines festgelegten Datentyps.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Parameter sind Datenstrukturen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Datentyp, der in der OPeration ben\u00f6tigt wird um ausgef\u00fchrt werden zu k\u00f6nnen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "eine \u00fcbergebene variable",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Ein Parameter kann z.B. eine Variable wie ein Int sein, und ist ein Teil, mit dem die Operation etwas macht.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Ein Parameter einer Operation ist die Eingabe, welche Daten enth\u00e4lt.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Ein Wert, der einer Operation bei ihrem Aufruf \u00fcbergeben wird.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "ein Parameter ist ein Wert der der Operation \u00fcbergeben wird. Mit den Parametern werden Variablen in der Operation initialisiert und bekommen so direkt einen Wert zugewiesen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein Parameter ist eine Variable, die einer Operation \u00fcbergeben wird. Mit dieser Variablen arbeitet die Operation.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine eingegebene Variable.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Variable, die einer Klasse, Methode oder einem Block geh\u00f6rt.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Ein datentyp und art der eingabe",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "operation wird mit den \u00fcbergebenen Datenausgef\u00fchrt. \u00dcbergebene daten sind parameter",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Parameter beschreiben welche und wie viele Variablentypen der Operation beim Aufruf \u00fcbergeben werden m\u00fcssen.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Ein Wert f\u00fcr die Ausf\u00fchrung der Subroutine.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Ein Parameter ist eine Variable die sp\u00e4ter in ihrer Operation verwendet werden kann.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die zu \u00fcbergebenden Werte, die eine Operation zum funktionieren ben\u00f6tigt",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "Dies werden \u00fcbergeben um beim Ausf\u00fchren als Argumente bearbeitet zu werden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Wert, den die Methode \u00fcbergeben bekommt.",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "bh",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Ein Parameter ist ein \u00dcbergabewert einer Methode.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Eine Variable.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Variablen, denen beim Aufruf der Operation Werte zugewiesen werden k\u00f6nnen",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Ein \u00fcbergebenes Objekt, auf dem die Operation ausgef\u00fchrt wird.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text":
            "Ein Parameter ist ein Wert der der Funktion \u00fcbergeben Werden kann, sodass die Anweisungen damit arbeiten k\u00f6nnen.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Variablen mit Werten",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text":
            "Ein Parameter wird an eine Operation \u00fcbergeben und dann von ihr verarbeitet.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Lokale Variable der Operation die ihr beim Aufruf von au\u00dfen mitgegeben werden kann",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Variable, der beim Aufruf einer Operation Werte zugewiesen wird.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was ist eine lokale Variable?",
      "id": 50812,
      "title": "Definition lokale Variable",
      "referenceAnswer":
        "Eine lokale Variable ist eine Variable die nur in einem bestimmten Kontext (Scope) definiert ist.",
      "answersAnnotation": [
        {
          "text": "eine Variable die \u00fcber mehrere Methoden hinweg aufegerufen werden kann",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine lokale Variable ist eine Variable die nur in einem bestimmten Kontext (Scope) definiert ist.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Eine Variable, welche nur innerhalb einer Operation erhalten bleibt (oder lokaler innerhalb einer Schleife).",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine Variable, welche nur innerhalb einer Funktion. Nur hier ist sie g\u00fcltig.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Variable die nur innerhalb einer Operation existiert.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Eine lokale Variable existiert nur innerhalb einer Operation.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "lokale variable kann nur innerhalb der operation verwendet werden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "eine variable, die nur in der jeweiligen methode benutzt werden kann",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Eine lokale Variable ist eine Variable die nur innerhalb einer Operation aufgerufen wird.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Eine lokale Variable ist eine Variable einer Operation, die nur innerhalb der Operation selbst benutzt werden kann.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Eine lokale variable ist eine Variable die in einer Operation deklariert wird und auch nur in dieser Operation bekannt\\/ g\u00fcltig sind.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine lokale Variable ist eine Variable die nur in der Operation zur Verf\u00fcgung steht, in der sie deklariert und initialisiert wurde",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Auf eine lokale Variable kann nur eine Operation zugreifen, in der diese initialisiert wurde.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine Variable die nur auf einen bestimmten Teil des Codes, bzw. einer Operation Bezug nimmt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine Variable, die nur beim Aufruf der Methode initialisiert wird, nur von der Methode zugreifbar ist und die nach dem Beenden der Methode gel\u00f6scht wird.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "zugriff nur innerhalb einer operation",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Variable, auf die nur die aktuelle Operation zugreifen kann",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "eine variable die innerhalb einer operation deklariert wurde und nur in dem block wo sie deklariert wurde verf\u00fcgbar ist",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine lokale Variable existiert nur in einem bestimmten Bereich des Quellcodes. Au\u00dferhalb diese Bereichs kann nicht auf die Variable zugegriffen werden.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Eine Variable, die nur in einer Operation initialisiert ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Diese hat einen beschr\u00e4nkten G\u00fcltigkeitsbereich - so ist das int i in einer Methode ein anderes int i als das in der main() - insofern nicht als Parameter \u00fcbergeben.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Eine lokale Variable ist eine Variable die nur in einem Teil eines Programms existiert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "EIne Variable die nur in einer bestimmten Operation initialisiert ist.",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "eine variable auf die nur innerhalb des gleichen Blocks drauf zugegriffen werden kann",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine Variable, die nur in der Methode deklariert und verwendet wird und somit nicht vomn Rest der Klasse verwendet werden kann.",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "jnj",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Eine lokale Variable ist eine Variable, die nicht dauerhaft im Programm zur Verf\u00fcgung steht. Das kann beispielweise die Variable in der For-Schleife sein.  Nach der Schleife ist die Variable nicht mehr 'vorhanden'.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Eine Variable, die nur in einer Operation deklariert wird.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Eine lokale Variable existiert nur innerhalb des Operation und w\u00e4hrend der Ausf\u00fchrung. Bei einem erneuten Aufruf wird die Variable erneut erzeugt. Am Ende wird sie gel\u00f6scht.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Eine lokale Variable ist eine Variable, die nur innerhalb einer Operation verwendet wird.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "eine Variable die nur innerhalb der Funktion bekannt ist",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "eine Variable die in einem bestimmten Abschnitt  verwendet wird",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Varibale die nur dort definiert ist",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Eine Variable die nur in ihrer Klasse aufrufbar ist.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Eine lokale Variable ist nur innerhalb einer Operation sichtbar.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Eine lokale Variable ist eine Variable, die innerhalb der Operation deklariert wurde und demnach nur innerhalb der Operation definiert ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "An welche Strukturellen Einheiten k\u00f6nnen Variable in Java gebunden werden?",
      "id": 50813,
      "title": "Scope von Variablen",
      "referenceAnswer":
        "Variable in Java k\u00f6nnen an Bl\u00f6cke, Funktionen, Instanzen und Klassen gebunden werden.",
      "answersAnnotation": [
        {
          "text": "schleifen, methoden, klassen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Variable in Java k\u00f6nnen an Bl\u00f6cke, Funktionen, Instanzen und Klassen gebunden werden.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Variable in Java k\u00f6nnen an Bl\u00f6cke, Funktionen, Instanzen und Klassen gebunden werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Den Datentypen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "An eine Operation, ein Objekt oder eine Klasse",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Klassen, Objekte und Operationen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "int, double, long, short, float, char, string, array",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "An Operationen",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Variablen k\u00f6nnen public und private sein.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "...",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Klassen und Objekte.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Klasse, Methode, Block",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "public private",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Kontrollstrukturen, Operationen, klassen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "An Variablentypen",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Operationen und Klassen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Funktionen (Methoden), Klassen und Pakete.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Operation, Bedingungsabfragen, Schleifen",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "Klassen, Operationen, Schleifen, Bedingungen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "jnjnj",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Beispielsweise kann eine Strukturelle Einheit eine Schleife sein oder auch eine bestimmte Bedingung.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "An Schleifen, Entscheidungsanweisungen, Operationen...",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Datentypen",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Schleifen, Operationen, Klassen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Klassen oder Bl\u00f6cke",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Variablen k\u00f6nnen an Klassen oder Operationen gebunden sein.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Klassen, Objekte, Operationen, Schleifen",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "An Schleifen, if-Bedingungen, Operationen, Klassen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was ist eine globale Variable?",
      "id": 50814,
      "title": "Definition globale Variable",
      "referenceAnswer":
        "Eine globale Variable ist eine auf welche von \u00fcberall innerhalb eines zugegriffen werden kann.",
      "answersAnnotation": [
        {
          "text": "variable die ber verschiedene metoden genutzt werden kann",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine globale Variable ist eine auf welche von \u00fcberall innerhalb eines zugegriffen werden kann.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text": "Eine Variable, welche innerhalb der gesamten Klasse aufrufbar ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Variablen welche im gesamten Programm an jeder Stelle aufgerufen werden k\u00f6nnen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Variable auf die aus jedem Kontext zugegriffen werden kann",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Eine globale Variable ist in der gesamten Kasse definiert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "kann in jedem kontext verwendet werden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "eine variable die f\u00fcr alle klassen eines programms definiert ist",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Eine globale Variable ist au\u00dferhalb einzelner Operationen definiert und kann somit in alle Unterklassen des Programms verwendet werden.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Eine globale Variable ist eine Variable auf die im gesamten Programm zugegriffen werden kann, unabh\u00e4ngig vom Scope.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Eine VAriable die in einer gesamten Klasse g\u00fcltig und deklariert ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "eine globale Variable steht allen Operationen zur Verf\u00fcgung und wird mithilfe von static deklariert",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine globale Variable wird in einer Klasse au\u00dferhalb einer Operation initialisiert, sodass jede Methode innerhalb dieser Klasse darauf zugreifen kann.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Sie gilt f\u00fcr alle Operationen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das ist eine Variable, die direkt in der Klasse definiert ist.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "eine von \u00fcberalle in allen operatioenn verf\u00fcgbare variable",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Variable, auf die auch andere Operationen zugreifen k\u00f6nnen",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "variable die innerhalb der klasse aber au\u00dferhalb von Operationen deklariert wurde und \u00fcberall in der klasse aufgerufen und ver\u00e4ndert werden kann",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine globale Variable existiert in einer Klasse unabh\u00e4ngig von Operationen.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Eine Variable, die immer genutzt werden kann und erst bei Beenden das Programms zerst\u00f6rt wird.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Eine Variable auf die von \u00fcberall drauf zugegriffen werden kann.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "EIne Variable die in einer Klasse initialisiert ist und auf die von allen Operationen zugegriffen werden kann",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "Eine variable, auf die nicht nur alles operationen der eigenen Klasse zugreifen k\u00f6nnen, sondern auch andere Klassen (wenn public)",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Globale Variable",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "kkjkj",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Eine globale Variable steht zu jeder Zeit im Programm zu Verf\u00fcgung und kann jeder Zeit genutzt werden. Also auch in Methoden oder \u00e4hnliches.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Eine Variable, auf die aus verschiedenen Kontexten zugegriffen werden kann. Oft eine statische Klassenvariable.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Eine globale Variable existiert auch zwischen den Operationen und alle Operationen k\u00f6nnen auf sie zugreifen.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Eine globale Variable steht alles Operationen einer Klasse zur Verf\u00fcgung.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "eine Variable die von allen Methoden gesehen werden kann",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Alle Klassen eines Paketes k\u00f6nnen darafu zugreifen",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Eine Variable die von \u00fcberall aufgerufen und ver\u00e4ndert werden kann.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text":
            "Eine globale Variable ist ach au\u00dferhalb einer operation g\u00fcltig, aber innerhalb der Klasse.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Variable auf die von \u00fcberall zugegriffen werden kann",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine globale Variable ist innerhalb einer Klasse und au\u00dferhalb einer Operation definiert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Warum sind nicht einfach alle Variablen global?",
      "id": 50815,
      "title": "Grund f\u00fcr lokale Variablen",
      "referenceAnswer":
        "Das binden von Variablen an bestimmte Ausf\u00fchrungskontexte spart Speicherplatz und erlaubt die unabh\u00e4ngige Wiederverwendung von Variablennamen in verschiedenen Kontexten.",
      "answersAnnotation": [
        {
          "text":
            "Dann w\u00fcrde es zu viele geben, sodass es un\u00fcbersichtlich wird und zu viel Arbeitsspeicher verbraucht",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Das binden von Variablen an bestimmte Ausf\u00fchrungskontexte spart Speicherplatz und erlaubt die unabh\u00e4ngige Wiederverwendung von Variablennamen in verschiedenen Kontexten.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Weil manche Variablen nicht von \u00fcberall her ver\u00e4ndert werden sollen, sondern nur innerhalb zB einer Operation.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Damit die Werte dieser Variablen nicht ausversehen \u00fcberschrieben werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Damit sich zB Objekte untereinander unterscheiden k\u00f6nnen",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Damit nicht von \u00fcberall ihre Werte unerw\u00fcnscht ver\u00e4ndert werden k\u00f6nnen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "weil sie sonst in jedem kontext ver\u00e4ndert werden k\u00f6nnten",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "wenn man z.b. eine nebenoperation mit einer zahl durchf\u00fchren will, diese aber nicht in der anderen methode ver\u00e4ndern soll",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Weil es manchmal praktischer ist, Variablen lokal zu ver\u00e4ndern und an einer anderen Stelle anders zu benutzen.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Um die Strukturierung des Codes zu erm\u00f6glichen.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Da viele variablen nur in einem bestimmten Kontext ben\u00f6tigt werden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "es sind nicht einfach alle Variablen global da man auf manche Variablen den Zugriff von au\u00dfen verhindern m\u00f6chte",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Um zu vermeiden, dass man bestimmte Variablen von au\u00dfen \u00e4ndern kann (Sicherheit).",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das wird zu komplex.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Weil es zu unsicher w\u00e4re. Jede Methode k\u00f6nnte die Variablen manipulieren. Dar\u00fcber hinaus m\u00fcssten sie alle die ganze Zeit gespeichert bleiben.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "versehentliche oder ungewollte \u00e4nderungen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Weil man so sehr leicht am Programm herum pfuschen k\u00f6nnte. Einige Variable m\u00fcssen aus Sicherhetsgr\u00fcnden (z.B. auch Datenschutz) lokal sein",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "objektorientierte Programmierung, Objekte zb brauchen variablen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Manche Variablen sollen von au\u00dferhalb einer Operation nicht ge\u00e4ndert werden k\u00f6nnen.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Weil man somit schnell keine einfachen Namen mehr hat und man schnell durcheinander kommen wird.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Weil dann zuviele Variablen ben\u00f6tigt w\u00fcrden, was nicht \u00fcbersichtlich w\u00e4re. Au\u00dferdem k\u00f6nnen mit lokalen Varibalen Namen wiederverwendet werden.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text":
            "Weil nicht jeder Teilaspekt eines Programms mit jedem anderen zu tun hat. Au\u00dferdem w\u00fcrde das mehr Speicher kosten, weil die eigentlich lokalen Variablen dann nicht nach Abschluss einer Operation, Schleife, o.\u00c4. gel\u00f6scht werden k\u00f6nnten.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Mehr Speicherbedarf, Programme k\u00f6nnen von au\u00dfen manipuliert werden",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "in manchen Kontexten macht es mehr Sinn Variablen Global zu definieren",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "jnjn",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Um einen konstanten Wert zu haben, der \u00fcberall genutzt werden kann.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Oftmals sollen mit konstanten Werten mehrer Operationen ausgef\u00fchrt werden, die unterschiedliche Ergebnisse erbringen, im Prozess aber nicht die Variable \u00e4ndern sollen.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Besonders wenn die Programme sehr lang werden w\u00fcrde das das ganze Programm un\u00fcbersichtlich gestalten.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "dadurch w\u00fcrden methoden sich ggf. gegenseitig beeinflussen sodass es zu Problemen kommen kann die nur schwer zu finden sind",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Um sie zu sch\u00fctzen",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Es verhindert Namenskonflikte bei mehrmaligem Gebrauch.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text":
            "bei einer globalen Variablen ist w\u00e4hrend der gesamten Laufzeit der Speicherplatz reserviert. Evtl. wird die Variable aber nur in einer Operation oder in einer Schleife ben\u00f6tigt. wenn sie dann lokal definiert wird, wird nach Beendigung der Operation oder Schleife der Speicherplatz wieder freigegeben.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Speichereinsparung und Namenswiederverwendung",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "zumindest rekursive Funktionsaufrufe ben\u00f6tigen lokale Variablen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Wie kann man Werte zwischen Operationen erhalten?",
      "id": 50816,
      "title": "Werterhaltung zwischen Operationen",
      "referenceAnswer":
        "Werte k\u00f6nnen \u00fcber Parameter und R\u00fcckgabewerte weitergegeben werden oder in einem gr\u00f6\u00dferen Kontext wie zum Beispiel einer Klasse oder global definiert werden.",
      "answersAnnotation": [
        {
          "text": "als globale variablen mit return",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Werte k\u00f6nnen \u00fcber Parameter und R\u00fcckgabewerte weitergegeben werden oder in einem gr\u00f6\u00dferen Kontext wie zum Beispiel einer Klasse oder global definiert werden.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Mit einer globalen Variable, welche die Werte zwischenspeichert und somit in eine andere Operation transferiert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Man \u00fcbergibt sie als Parameter",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Durch einen Getter",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Mit dem Befehl return",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Io.print",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "durch einen sog. getter",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Indem man mit einer Operation den R\u00fcckgabewert einer anderen Operation aufruft.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Man kann mithilfe eines returns Werte zur\u00fcckgeben.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "In dem diese als Operationen \u00fcbergeben werden oder dem R\u00fcckgabewert einer Operation entsprechen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "mithilfe von Gettern und Settern, diese erm\u00f6glichen das Zugreifen auf Variablen und ihre Werte aus anderen Operationen und Klassen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Indem man sie in einer Variablen speichert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "R\u00fcckgabewerte anlegen oder global definieren.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Durch globale Variablen, durch Argumente und Parameter und Ausgabewerte der Operationen.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "returns, vererbung",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "get.",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "return wert nach der operation kann gespeichert werden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "return",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Man kann sie als statische Variablen initialisieren",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Man nutzt das return-Statement.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Man erh\u00e4lt Werte \u00fcber den R\u00fcckgabewert.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text":
            "Wenn die Variable public (oder protected falls die Klasse eine Unterklasse ist) ist dann durch nameDerOperation.nameDerVariable, sonst durch sog. getter Operationen, falls diese in der anderen Operation geschrieben wurden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "durch globale Variablen",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "Man \u00fcbergibt sie in den Parametern",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "uhuh",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Mithilfe eines gegenseitigen Operationsaufrufs.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Durch globale Variablen, oder \u00fcber die Parameter und R\u00fcckgabewerte.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "mit getter und settern",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "wenn man call by reference nutzt. Oder durch return.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "static",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Mithilfe des R\u00fcckgabewertes.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Indem man globale Variabeln verwendet oder sie public macht.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "\u00dcber Parametermitgabe und R\u00fcckgabewert oder als globale Variable",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was ist das Prinzip von \u201ccall by value\u201d?",
      "id": 50817,
      "title": "\"Call by value\"",
      "referenceAnswer":
        "\u201cCall by value\u201d bedeutet, dass bei der Parameter\u00fcbergabe die Kopie des Wertes einer Variablen \u00fcbergeben wird, sodass \u00c4nderungen dieses Wertes innerhalb der Funktion keinen Effekte auf den urspr\u00fcnglichen Wert hat.",
      "answersAnnotation": [
        {
          "text": "die Variable wird \u00fcber ihren Wert definiert bsp Int, flow, long",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "\\u201cCall by value\\u201d bedeutet, dass bei der Parameter\u00fcbergabe die Kopie des Wertes einer Variablen \u00fcbergeben wird, sodass \u00c4nderungen dieses Wertes innerhalb der Funktion keinen Effekte auf den urspr\u00fcnglichen Wert hat.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "\\u201cCall by value\\u201d bedeutet, dass bei der Parameter\u00fcbergabe die Kopie des Wertes einer Variablen \u00fcbergeben wird, sodass \u00c4nderungen dieses Wertes innerhalb der Funktion keinen Effekte auf den urspr\u00fcnglichen Wert hat.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Bezieht sich auf eine Variable die als Wert den tats\u00e4chlichen Wert gespeichert hat.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Wert ist direkt in der Variable gespeichert",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Das Prinzip von call by value ist, dass wenn die Variable abgerufen wird, mit dem Wert an sich gearbeitet wird.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "wird durch wert aufgerufen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "der eigentliche wert einer variablen wird aufgerufen",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Call by value bedeutet, dass eine Ver\u00e4nderung eines Parameters keine Auswirkungen auf die aufgerufene Variable hat.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Beim Aufrufen einer Operation werden die Parameter kopiert, sodass diese innerhalb der Operation ver\u00e4ndert werden k\u00f6nnen, und au\u00dferhalb der Operation sich nicht ver\u00e4ndern.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Wenn eine Variable direkt einen Wert verwaltet, wie bei integer oder boolean.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "beim call by value wird der Wert kopiert",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ruft einen primitiven Datentyp auf.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Ver\u00e4nderung des Parameters hat keine Auswirkung auf die \u00fcbergegebene Variable des primitiven Datentyps.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "aufrufen im programm",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Aufrufen, wenn bestimmter Wert gefunden",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Man ruft direkt die Variable ab - nicht den Pointer.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Dass nicht die Referenz von Daten sondern die tats\u00e4chlichen Daten abgerufen werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "man bezieht sich auf den Inhalt eines Objektes, nicht auf dessen Namen",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "Wenn wir einen einfachen Datentypen aufrufen, schauen wir direkt auf den Wert, eine \u00c4nderung dieses Wertes hat keinen Einfluss auf den Parameter",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "dcv",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Das Prinzip findet bei Methoden statt. In Java werden beispielsweise Int-Werte mithilfe von Call-by-Value aufgerufen. Es wird quasi eine Kopie von dem Parameter erstellt.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Parameter werden durch einfaches Kopieren des Inhalt der Variable (primitiver Datentyp) intitialisiert.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Das Prinzip von call by value ist, dass ein konkreter Wert \u00fcbergeben wird.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Wert wurde kopiert und \u00fcbergeben",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "primitive Datentypen speichern den Inhalt an sich",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das Aufrufen einer Varibale gibt den Wert zur\u00fcck.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text":
            "es wird eine variable an eine methode \u00fcbergeben, jedoch nur der Wert dieser, somit hat die Methode keinen Einfluss auf die Variable direkt.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "der wert wird wiedergegeben",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es wird eine Kopie der Variable an die Operation \u00fcbergeben, so das der urspr\u00fcngliche Wert nicht ver\u00e4ndert wird.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Bei call-by-value wird auf einen direkten Wert im Speicher zugegriffen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "es wird eine Kopie erzeugt, der Originalwert wird nicht ver\u00e4ndert, die Methode arbeitet mit der Kopie",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Nur der Wert wird kopiert und \u00fcbergeben, \u00c4nderungen haben keinen weiteren Einfluss",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Wert wird kopiert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was ist das Prinzip von \u201ccall by reference\u201d?",
      "id": 50818,
      "title": "\"Call by reference\"",
      "referenceAnswer":
        "\u201cCall by reference\u201d bedeutet, dass bei der Parameter\u00fcbergabe die Referenz selber \u00fcbergeben wird, sodass \u00c4nderungen der Referenz selber auch \u00fcber die Operation hinaus bestehen bleiben.",
      "answersAnnotation": [
        {
          "text":
            "bei der \u00fcbergabe werden referenzen \u00fcbergeben, sodass \u00e4nderungen auch die urspr\u00fcnglich variable betreffen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "\\u201cCall by reference\\u201d bedeutet, dass bei der Parameter\u00fcbergabe die Kopie der Referenz einer Variablen \u00fcbergeben wird.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Referenz auf den Wert wird als Parameter \u00fcbergeben. Somit kann der Wert \u00fcberall ver\u00e4ndert werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es wird die Referenz \u00fcbergeben, sodass \u00c4nderungen sich auf beide auswirken.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Das Prinzip von call by reference ist, dass bei der \u00dcbergabe von Werten die Referenz \u00fcbergeben wird, Ver\u00e4nderungen sich also auf den urspr\u00fcnglichen Wert auswirken.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "die Referenz einer variablen, also der Speicherort wird \u00fcbergeben",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Call by reference bedeutet, dass bei der Parameter\u00fcbergabe die Referenz der durch die Funktion aufgerufenen und ver\u00e4nderten Variablen kopiert und \u00fcbergeben wird.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Das Prinzip call by reference bedeutet, dass beim Aufrufen einer Operation die Parameter als Verweis \u00fcbergeben werden. Dadurch werden \u00c4nderungen innerhalb der Operation sich auf die urspr\u00fcnglichen Werte auswirken.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Das bei einem Parameter die Referenz \u00fcbergeben wird und eine \u00c4nderung dieser Referenz Auswirkungen auf die ursprungsvariable hat.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "bei call by reference wird nicht der Wert sondern die Referenz kopiert",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ruft eine Referenz auf.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Wenn ein Array als Parameter \u00fcbergeben wird, haben die \u00c4nderungen des Parameters auswirkung auf das Array.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "zugriff auf die kopie",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Referenz der Variablen wird \u00fcbergeben",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "Man \u00fcbergibt einen Pointer auf die Variable, die man dann beliebig \u00e4ndern kann.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Call by reference bedeutet, dass die Referenz und nicht die eigentlichen Daten abgerufen werden. Bei der Parameter\u00fcbergabe einer Operation bedeutet das dann, dass die in der Referenz stehenden Daten im Laufe der Operation ver\u00e4ndert werden k\u00f6nnten.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Bei call by reference wird die Referenz auf einen Wert \u00fcbergeben, urspr\u00fcnglicher Wert\\/Objekt wird ver\u00e4ndert, es geht nicht nur um Inhalt",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "Wir \u00fcber geben nur die Referenz auf ein Objekt (zB bei Strings, Arrays, Objekten), dadurch ver\u00e4ndern wir auch das in den Parametern gespeicherte",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "kml",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Ist bei der Parameter\u00fcbergabe von Objekten der Fall. Hier ist es keine Kopie, wie bei dem Prinzip Call-by-Value, sondern es verweist auf die Referenz des Objekts.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Hier wird die Referenz \u00fcbergeben. \u00c4nderungen innerhalb der Funktion wirken sich nun auch auf den urspr\u00fcnglichen Wert aus.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Bei der Parameter\u00fcbergabe wird eine Kopie der Referenz auf ein Objekt \u00fcbergeben.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Bei der Parameter\u00fcbergabe wird eine Kopie der Referenz der Variable \u00fcbergeben. Die Ver\u00e4nderung des Parameters hat somit Auswirkungen auf den Inhalt der Variable",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "variable h\u00e4lt als wert eine Referenz auf den Inhalt im speicher",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Beim \u00dcbergeben einer Variable wird die Referenz kopiert.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text":
            "call bei refernce \u00fcbergibt die Referenz der variablen also die Adresse im Speicher wodurch eine methode auf diese zugreifen kann und diese \u00e4ndern kann.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "die referenz wird kopiert",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es wird der urspr\u00fcngliche Wert an die Operation \u00fcbergeben, sodass \u00c4nderungen innerhalb der Operation Auswirkungen auf den urspr\u00fcnglichen Wert haben.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text":
            "hier wird die Referenz auf eine Variable \u00fcbergeben und von der Operation auch der Originalwert ge\u00e4ndert",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Die Feferen wird \u00fcbergeben, Ver\u00e4nderungen bleiben auch au\u00dferhalb der Operation erhalten",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Wozu dienen Pakete in Java?",
      "id": 50819,
      "title": "Funktion von Paketen in Java",
      "referenceAnswer":
        "Pakete k\u00f6nnen genutzt werden um Klassen semantisch zu gruppieren und gemeinsam verf\u00fcgbar zu machen.",
      "answersAnnotation": [
        {
          "text": "Damit nicht immer alles von vorne programmiert werden muss",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "\\u201cCall by reference\\u201d bedeutet, dass bei der Parameter\u00fcbergabe die Referenz selber \u00fcbergeben wird, sodass \u00c4nderungen der Referenz selber auch \u00fcber die Operation hinaus bestehen bleiben.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text": "Sie k\u00f6nnen bestimmte Operationen zur Verf\u00fcgung stellen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Pakete b\u00fcndeln Klassen, welche in Verbindung stehen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Implementierung von Operationen",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "d",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Pakete sind eine Sammlung von Klassen und dienen der \u00dcbersichtlichkeit.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Packete in Java dienen dazu meherer Operationen zusammenzufassen und f\u00fcr andere Packete bereitzustellen.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Um verschiedene Operationen zu speichern und in diversen Klassen auf diese verweisen zu k\u00f6nnen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Pakete dienen zur Sammlung von Operationen auf die von Klassen dann schneller zugegriffen werden kann",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Speicherung von Klassen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Sammeln zusammenh\u00f6rige Klassen.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "um ganze klassen und cluster zurverf\u00fcgung zu stellen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Klassen, die auf verschiedene Operationen aufgeteilt werden k\u00f6nnen",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Klassen zusammenzufassen, Sichtbarkeit zu kontrollieren",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Organisation und einfachere Versionsverwaltung des Quellcodes.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Pakete bestehen aus mehreren Klassen, die im Normalfall miteinander zu tun haben. Sie k\u00f6nnen zum Beispiel untereinander auf protected variablen zugreifen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weniger Programmieraufwand, weniger Speicherbedarf",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "B\u00fcndelung zusammengeh\u00f6render Klassen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "l,l,,m",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Klassen werden in Pakete gespeichert und koennen spaeter als ganzes in anderen Java-Programmen importiert werden.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Fassen mehrer Klassen zusammen. Innerhalb von k\u00f6nnen Werte und Operationen aus verschiedenen Klassen genutzt werden.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Pakete sind Sammlungen zusammengeh\u00f6renden Klassen.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Pakete b\u00fcndeln eine Ansammlung von Klassen, die importiert und genutzt werden k\u00f6nnen.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Zusammenpacken von Klassen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "..",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text":
            "Klassen werden zu Paketen zusammengefasst. Ich wei\u00df nicht genau. Hatten wir das in der Vorlesung?",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Semanteische gruppierung von Klassen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Wie werden Klassen in Java einem Paket zugeordnet?",
      "id": 50820,
      "title": "Paketzuordnung",
      "referenceAnswer":
        "Die Dateien der zum Paket zugeh\u00f6rigen Klassen m\u00fcssen im selben Verzeichnis liegen und dem Paket mit der Anweisung 'package <Verzeichnispfad>' hinzugef\u00fcgt werden.",
      "answersAnnotation": [
        {
          "text": "\u00dcber den methodenkopf, public oder private bspw",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Dateien der zum Paket zugeh\u00f6rigen Klassen m\u00fcssen im selben Verzeichnis liegen und dem Paket mit der Anweisung 'package <Verzeichnispfad>' hinzugef\u00fcgt werden.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Die Dateien der zum Paket zugeh\u00f6rigen Klassen m\u00fcssen im selben Verzeichnis liegen und dem Paket mit der Anweisung 'package <Verzeichnispfad>' hinzugef\u00fcgt werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Klassen werden in einem Ordner gespeichert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Durch den Befehl package.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "semantik",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "j",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Die Klasse muss in einem Verzeichnis sein, dass dem Paketnamen entspricht.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Klassen in Java werden zu einem Paket durch ihren Ordner zugeordnet.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "In dem sie in so einem Paket abgespeichert werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "mit der Definition package am Anfang des Codes.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "import",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Indem sie \u00fcber den Pfad zugeordnet werden",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "paket.klasse.java",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Man packt diese in eine Datei, welche via package XY zu einem solchen zugeh\u00f6rig erkl\u00e4rt wurde.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Dadurch in welchem Ordner sie gespeichert sind. Klassen im gleichen Ordner bilden ein Paket.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "package.NameDesPackets",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "l,l,",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Das ist dann der jeweilige Ordnername.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Klassen m\u00fcssen sich in einem Verzeichnis befinden, dass dem Namen des Pakets entspricht.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Um einen Klasse einem Paket zuzuordnen, muss die Klasse in einem Verzeichnis sein, das dem Paketnamen entspricht. In der Java Daten muss zu Beginn das Paket angegeben werden.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "ordner",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Mit dem Schl\u00fcsselwort package",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Ein Verzeichnis packag'Dateipfad'",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "import dies.ist.mein.pakage.Klasse;",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Wozu dienen Modifikatoren public und private in Java?",
      "id": 50821,
      "title": "Sichtbarkeits Modifikatoren",
      "referenceAnswer":
        "Die Modifikatoren regeln die Sichtbarkeit und Zugriffsberechtigungen von Feldern und Operationen von Klassen. Mit public deklarierte Felder sind von \u00fcberall sichtbar wohingegen mit private deklarierte Felder nur innerhalb der eigenen Klasse verf\u00fcgbar sind.",
      "answersAnnotation": [
        {
          "text": "um den zugriff auf die klasse einschr\u00e4nken zu k\u00f6nnen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Modifikatoren regeln die Sichtbarkeit und Zugriffsberechtigungen von Feldern und Operationen von Klassen. Mit public deklarierte Felder sind von \u00fcberall sichtbar wohingegen mit private deklarierte Felder nur innerhalb der eigenen Klasse verf\u00fcgbar sind.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "public bietet einen \u00f6ffentlichen Zugriff auch von au\u00dferhalb der Klasse selbst. private sch\u00fctzt die Klasse oder Operation vor solchen Zugriffen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "public macht Operationen\\/ Attribute f\u00fcr alle Klassen des Pakets sichtbar. private macht Operationen\\/ Attribute nur f\u00fcr die eigene Klasse sichtbar. So wird der Zugriff auf diese Operationen\\/ Attribute limitiert. Z.B. werden so Attribute nicht aus versehen von au\u00dfen ver\u00e4ndert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Legt fest, ob von au\u00dfen zugegriffen werden kann",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Public und private geben die Sichtbarkeit des Programms an. Auf eine mit public deklarierte Operation kann aus jedem anderen Programm zugegriffen werden und auf eine mit private deklarierte Operation kann von nirgendwo aus zugegriffen werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "bei public sind die variablen von allen java klassen aus erreichbar, w\u00e4hrend bei private nur die jeweilige klasse, in der die variable inizialisiert wurde verf\u00fcgbar ist, dadurch kann man verhindern, dass ungewollte ver\u00e4nderungen eintreten.",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Sie definieren die Sichtbarkeit einzelner Operationen in Java. Public bedeuted, dass jedermann darauf zugreifen kann, private bedeutet dass sie nicht von au\u00dfen ver\u00e4ndert werden k\u00f6nnen.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Die Modifikatoren public und private bestimmen die Verf\u00fcgbarkeit von Operationen und Variablen gegen\u00fcber anderen Klassen.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Um Operationen\\/ Variablen zuzuordnen inwiefern auf diese verwiesen werden darf. Auf Public Variablen\\/ Operationen d\u00fcrfen auch alle anderen Klassen verweisen, auf private Operationen nur die Klasse in der sie stehen selbst.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Durch public k\u00f6nnen alle Klassen auf die Variable oder Operation oder was auch immer zugreifen, mit private wird dieser Zugriff beschr\u00e4nkt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Anweisung public macht die Klassen oder Attribute \u00f6ffentlich zug\u00e4nglich f\u00fcr alle anderen Klassen. Private beschr\u00e4nkt die Zug\u00e4nglichkeit nur auf die Klasse selbst.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Public - Alle (andere Klassen) k\u00f6nnen auf die Variabel zugreifen. Private - nur die eigene Klasse kann zugreifen.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "zuweisung von zugriffsrechten",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Public: jeder kann zugreifen und bearbeiten  Private: nur Klasse selbst kann zugreifen und bearbeiten",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "auf public Operationen k\u00f6nnen alle Klassen zugreifen, auf private nur die klasse selbst und ihre Unterklassen?",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "private sch\u00fctzt Klassen, Operationen und Attribute von Klassen vor dem Zugriff von au\u00dfen. Sind Klassen, Operationen und Attribute als public gekennzeichnet, kann von jeder anderen Klasse auf sie zugegriffen werden, um zum Beispiel mit ihnen weiterzuarbeiten.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Hiermit wird der Zugriff auf die Variable eingeschr\u00e4nkt. Somit kann verhindert werden, dass diese ung\u00fcltige Werte annimmt.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Sie \u00e4ndern die Sichtbarkeit einer Variable zwischen Klassen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Bestimmt ob Operation auch von au\u00dferhalb(public) der Klasse aufgerufen werden kann, oder nur von innerhalb(private).  Macht Operationen, Programme nicht zug\u00e4nglich f\u00fcr alle Ver\u00e4nderungen von au\u00dfen.",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text":
            "public k\u00f6nnen alle klassen drauf zugreifen, private nur die klasse selbst (deshalb gibt es getter und setter), da manche werte nicht ver\u00e4ndert werden sollen um die funktionsf\u00e4higkeit des programms nicht zu beeinflussen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "l,l,",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Die Modifikatoren dienen dazu, dass die Sichtbarkeit von au\u00dfen begrenzt werden kann.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Public und private sind Sichtbarkeiten und k\u00f6nnen zur Datenkapselung bzw. zur Beschr\u00e4nkung des Zugrifffs von au\u00dfen eingesetzte werden.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Public dient dazu, dass man die Klasse in einem anderen Programm aufrufen kann. Private dient zur Datenkapselung, sodass man eine Klasse vor ungwollten, \u00e4u\u00dferen \u00c4nderung sch\u00fctzen kann. Mann die Klasse\\/ Methode\\/ Variable, die man als private kennzeichnet nicht einfach von au\u00dfen aufrufen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Private bedeutet, dass man nur von innerhalb der Klasse auf die Variable bzw. Methode zugreifen kann, public bedeutet, dass man sie auch von auerhalb aufrufen bzw. ver\u00e4ndern kann.",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text":
            "public und private sind Sichtbarkeiten. Durch sie kann man den Zugriff auf Attribute von au\u00dfen regulieren. Durch die Sichtbarkeit public k\u00f6nnen alle Klassen auf das Attribut zugreifen, durch die Sichtbarkeit private kann nur die Klasse selber darauf zugreifen.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Sie dienen der Sichtbarkeit bzw dem Zugriff auf z.B. Operationen und Variablien. Auf public k\u00f6nnen auch andere Klassen zugreifen, auf private nur die Klasse, in der jene Variable deklariert wurde bzw. die Operation liegt.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "sie definieren die Sichtbarkeit von Methoden und variablen einer klasse",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Sichtbarkeit",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Sie bestimmen die Sichtbarkeit der jeweiligen Elemente. Bei public sind sie \u00fcberall sichtbar und aufrufbar, bei private nur innerhalb der eigenen Klasse.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text":
            "Variablen oder Operationen, die public sind, sind von \u00fcberallher ausrufbar. Wenn sie private sind, k\u00f6nnen Variablen nur innerhalb der operation genutzt werden. Private Methoden sind nur innerhalb der Klasse aufrufbar und nicht von au\u00dfen.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "public zugriff von \u00fcberalll private nur von innerhalb dieser Klasse",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Warum macht es Sinn eine Menge zu sortieren?",
      "id": 50884,
      "title": "Grund f\u00fcrs Sortieren",
      "referenceAnswer": "Das durchsuchen einer sortierten Menge ist deutlich schneller.",
      "answersAnnotation": [
        {
          "text": "Viele andere Implementierungen sind dann wesentlich effizienter k\u00fcrzer",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine sortierte Menge kann schneller durchsucht werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Um Elemente (leichter) finden zu k\u00f6nnen. Beispiele: Eintrag in Kundendatenbank, Wort in einer Schl\u00fcsselwortliste f\u00fcr Syntax Highlighting, IP-Adresse in  ARP-Tabelle.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das durchsuchen einer sortierten Menge ist deutlich schneller.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text": "Das durchsuchen einer sortierten Menge ist deutlich schneller.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Wenn man \u00f6fter auf diese Menge zugreift, kann die Laufzeit eines Algorithmus verk\u00fcrzt werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Um die Daten \u00fcbersichtlicher darzustellen und einfacher an gesuchte Daten zu gelangen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Um die Suche zu beschleunigen",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Wenn eine Menge sortiert ist, ist es mit weniger Aufwand verbunden auf einzelne Daten zuzugreifen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ist eine Menge sortiert, kann leichter ein Wert in ihr gesucht werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Dadurch kann die Laufzeit f\u00fcr die Suche eines bestimmten elements verk\u00fcrzt werden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Um einen besseren \u00dcberblick zu bekommen und weitere Operationen durchf\u00fchren zu k\u00f6nnen.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Mit einer Sortierten Menge ist es einfacher zu Arbeiten. Zum Beispiel mit der bin\u00e4ren Suche k\u00f6nnen Elemente viel schneller gesucht werden.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Um Suchen zu vereinfachen, f\u00fcr eine einfachere Dokumentation.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Einfacher etwas zu suchen",
          "id": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a"
        },
        {
          "text":
            "Wenn eine Menge sortiert ist, ist es deutlich einfacher einzelne Elemente in der Menge zu finden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Besserer Zugriff und bessere \u00dcbersicht. Au\u00dferdem ist dann die bin\u00e4re Suche m\u00f6glich.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Durch das sortieren kann eine Suche beschleunigt werden, da dann nicht alle Elemente durchlaufen werden m\u00fcssen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Weil man dann mehr Informationen \u00fcber das Inhalt hat und kann in der Menge z.B. viel effizienter suchen.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "verk\u00fcrzung der laufzeit beim suchen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Um schneller gesuchte Daten zu finden",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Schnelleres finden der daten",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "M\u00f6chte man eine Menge nach bestimmten Werten mithilfe der bin\u00e4ren Suche durchsuchen, muss sie vorher sortiert sein.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "schneller suchen zugriff",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "K\u00fcrzere Laufzeit f\u00fcr Suche",
          "id": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "Wenn wir etwas suchen, geht es schneller",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "llmlm",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Sie kann dann mit der bin\u00e4ren Suche durchsucht werden, was deutlich schneller als die lineare Suche ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Damit wir Daten schneller finden koennen.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Auf einer sortierten Menge k\u00f6nnen verschieden Operationen (z.B. suchen) schneller durchgef\u00fchrt werden.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Man sortiert eine Menge, um darin leichter bestimmte Elemente\\/Objekte zu finden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es macht es einfacher, dinge zu suchen.",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "Somit wird die Suche eines Elementes um einiges erleichtert und verschnellert.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "In einer sortieren Menge findet man bestimmte Eintr\u00e4ge viel schneller und leichter.",
          "id": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "um ggf. schneller an einzelne Werte zu kommen.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "ordnung",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Sortierte Mengen sind leichter zu durchsuchen.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "In einer sortierten Menge kann man leichter suchen.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Um gesuchte Eintr\u00e4ge schneller zu finden",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Suche ist schneller und leichter",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "so ist es leichter ein Element zu finden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was ist die Idee von SelectionSort?",
      "id": 50885,
      "title": "Idee von SelectionSort",
      "referenceAnswer":
        "Die Idee ist, iterativ das gr\u00f6\u00dfte Element aus dem aktuellen Array auszusortieren.",
      "answersAnnotation": [
        {
          "text":
            "Bei jedem druchlauf den gr\u00f6\u00dften\\/kleinsten wert ans ende bringen und die l\u00e4nge um eins verk\u00fcrzen bis die l\u00e4nge nur noch eins ist",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es wird das erste Element als Minimum angenommen, dass Array wird durchlaufen und es wird nach einer kleineren Zahl gesucht. Wurde eine gefunden, wird der Index gespeichert und das Array wird weiter durchlaufen. Wenn der Durchlauf beendet ist, wird die erste Zahl mit der kleinsten Zahl getauscht. Danach wird das n\u00e4chste Element als kleintes angeommen und der Durchlauf startet von vorne!",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Anfangsst\u00fcck des Arrays ist sortiert, Rest nicht. Zu Beginn ist der Rest das ganze Array. Suche das kleinste Element von Rest und h\u00e4nge es an den Anfang an. Wiederhole bis Rest leer.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Idee ist, iterativ das gr\u00f6\u00dfte Element aus dem aktuellen Array auszusortieren.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Eine Menge wird sortiert, indem jedes Element mit dem Nachbarn verglichen wird. Das Gr\u00f6\u00dfere wird zum Maximum und dann bis zum Ende verschoben. Der Vorgang wiederholt sich f\u00fcr jedes andere Element.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Zun\u00e4chst wird der gr\u00f6\u00dfte Wert im Array gesucht und dieser tauscht anschlie\u00dfend mit dem letzten Wert den Platz. Dann wird der zweigr\u00f6\u00dfte Wert gesucht, welcher mit dem vorletzten Element den Platz tauscht. Dies macht man solange, bis das Array sortiert ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Das Array wird von links nach rechts durchlaufen, dabei werden immer das linke und rechte Element miteinander verglichen. Das kleinste Element wird sich gemerkt. Jetzt wird das Array weiter bis zum Ende durchlaufen, dabei wird immer mit dem gemerkten kleinsten Element verglichen. Ist ein Element noch kleiner ist dies nun das neue kleinste Element. Wurde nun das Array bis zum Ende durchlaufen wird das kleinste Element an den Anfang getauscht. Und der Vorgang startet vom neuem, bis alle Elemente sortiert sind. Dabei wird der sortierte Anfang nicht weiter beachtet.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Man sucht das kleinste Element der unsortierten Elemente und packt es rechts neben das zuvor kleinste.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Es wird f\u00fcr jede Position geguckt, welcher Wert da hingeh\u00f6rt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Datenmenge wird von vorne bis hinten durchlaufen und das bislang gr\u00f6\u00dfte Element in einem extra Speicher aufbewahrt. und anschlie\u00dfend mit dem letzten Element getauscht. Dann wird die Datenmenge wieder durchgelaufen, aber nur bis zum vorletzten Element, wohin das gr\u00f6\u00dfte Element von dieser Runde getauscht wird. usw bis Datenmenge nur 1 element gro\u00df",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Man vergleicht einen Wert mit jedem aus der zu sortierenden Menge und reiht ihn dann an seinen richtigen Platz ein.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "SelectionSort sucht bei jedem Schritt das kleinste bzw. gr\u00f6\u00dfte Element einer Menge und nimmt diese heraus und wiederholt dies solange bis die Menge sortiert ist.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Pro Durchgang wird aus der betrachteten Menge das Maximum gesucht und dann an die letzte Stelle der Menge gestellt, dann wird die Menge bis auf die letzte Stelle betrachtet, und es wird wieder das n\u00e4chste Maximum gesucht.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Man sucht immer den gr\u00f6\u00dften Wert und packt ihn ans Ende",
          "id": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a"
        },
        {
          "text":
            "bei Selection Sort wird in jedem Durchlauf das jeweils kleinste, bzw. gr\u00f6\u00dfte Element gesucht und dann entweder an den Anfang oder das Ende des zu sortierenden Arrays gestellt. Im n\u00e4chsten Durchlauf wird wieder das kleinste\\/ gr\u00f6\u00dfte Element au\u00dfer dem vorherigen gesucht und auch dieses wieder an den Anfang bzw ans Ende gestellt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "SelectionSort korrigiert Fehlstellungen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Menge durchzugehen und den gr\u00f6\u00dften Mitglied aufs Ende zu stellen. Dann in der Menge ohne den gr\u00f6\u00dften Mitglied das Gleiche zu machen und so weiter, bis die ganze Menge komplett sortiert ist.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text":
            "Das array nach dem maximum absuchen und dieses ans ende f\u00fcgen. Jede runde durchlauf um  1 verk\u00fcrzt",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "In jedem Durchlauf wird das gr\u00f6\u00dfte (oder kleinste) Element gesucht, um es an das Ende (oder Anfang) des Arrays zu verschieben. Der n\u00e4chste Durchlauf endet ein Element fr\u00fcher (oder beginnt ein Element sp\u00e4ter).",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "vergleiche erstes element mit allen anderen, tasusche wenn erstes kleiner, f\u00fcr alle elemente",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "wir gehen von vorne bis hinten durch die zahlen und vergleichen alle elemente miteinander und setzten das h\u00f6chste ans ende",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "ll,",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Das (Teil-)Array wird durchlaufen um das Maximum zu finden. Dieses wird dann ans Ende des (Teil-)Arrays verschoben. Dann wird das Gleiche mit dem Teilarray ohne den letzten Eintrag gemacht. Das Ganze wird so oft gemacht bis das  verbleibende Teilarray leer ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "SelectionSort macht sich das Prinzip der Maximum-Suche oder auch Minimum-Suche und schiebt das Element entweder nach ganz vorne oder nach ganz hinten.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Eine Menge wird mehrmals durchlaufen, wobei immer das Maximum gesucht wird und ans Ende gestellt wird. (Die zudruchlaufende Menge verk\u00fcrzt sich also nach jedem durchlauf um eins.)",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Man geht ein (unsortiertes) Array durch. Man sucht sich den gr\u00f6\u00dften Wert raus und tauscht ihn an die letzte Stelle. Dann sucht man den zweitgr\u00f6\u00dften Wert und tauscht diesen an die vorletzte Stelle und so weiter. Absteigend Sortieren verl\u00e4uft analog.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Wir gehen davon aus das unser erstes Element das Minimum ist. 1. Wir vergleichen das Minimum mit allen anderen Elementen. 2. Wenn wir ein kleineres Element finden wir dieses zum Minimum. 3. Wir wiederholen schritt 1-2 bis kein kleineres Element gefunden wird. Das Minimum wird an Stelle unseres aller ersten Minimums gesetzt. 4. Wir gehen an die zweite Stelle und wiederholen schritt 1-3",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Es wird die Menge durchgelaufen, nach dem Maximum gesucht und dieses ans Ende getauscht. Danach wird das Ende eins nach vorn gesetzt und das ganze wiederholt",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text":
            "es wird ein array nach dem maximun dursucht dieses ans ende gesetzt und dann der zweitgr\u00f6\u00dfte Wert gesucht, dadurch wird das array f\u00fcr jeden Wert einmal durchlaufen",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Immer das gr\u00f6\u00dfte element der unsortierten menge an das ende der unsortierten menge packen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Man nehme das gr\u00f6\u00dfte objekt einer me nge und bringt es nach hinten und so macht man weiter",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Es wird jeweils das Maximum gesucht und aussortiert.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text":
            "durch Vergleich mit jedem Element der Menge wird das Maximum gefunden, Das bislang gefundene Maximum wird markiert (wie merken uns den Index im Array), solange keine andere Zahl gefunden wird, die gr\u00f6\u00dfer ist. Wenn wir am Ende angelangt sind, wird das Maximum ans Ende des Arrays getauscht. Wir fangen von vorne an und vergleichen bis zum vorletzten Element des Arrays. Die Laufzeit ist immer O(n^2), weil im Algorithmus nicht festgestellt wird, wenn das Array schon sortiert ist.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Das ganze Array durchgehen um das gr\u00f6\u00dfte\\/kleinste Element zu finden und mit der letzen\\/ersten unsortierte Stelle tauschen",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Finde das gr\u00f6\u00dfte Objekt und tausche es an das Ende, wiederhole f\u00fcr zweitgr\u00f6\u00dftes und n-1",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das Maximum im jeweiligen Bereich wird gesucht und sich gemerkt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Idee von SelectionSort ist systematisch Nachbartausche durchzuf\u00fchren bis die Fehlstellung gleich null ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was macht SelectionSort so ineffizient?",
      "id": 50886,
      "title": "Ineffizienz von SelectionSort",
      "referenceAnswer":
        "Die f\u00fcr die Bestimmung des gr\u00f6\u00dften Elementes gemachten Vergleiche werden nicht wiederverwendet.",
      "answersAnnotation": [
        {
          "text": "Es werden nur wenig der gewonnen Daten verwendet",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "F\u00fcr jeden Durchlauf m\u00fcssen alle Elemente im unsortierten Bereich verglichen werden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Bei jedem Suchen eines gr\u00f6\u00dften (kleinsten) Elementes m\u00fcssen alle verbleibenden verglichen werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die f\u00fcr die Bestimmung des gr\u00f6\u00dften Elementes gemachten Vergleiche werden nicht wiederverwendet.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text": "Zu viele Vergleiche bzw. Durchl\u00e4ufe der Menge.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "SelectionSort vergleicht viele Werte, nutzt die meisten davon aber nicht. Pro Durchlauf wird nur eine Fehlstelle korrigiert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Der Anzahl an Elementen einsprechend h\u00e4ufig muss das Array durchlaufen werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es muss jedes Mal der gesamte Array durchlaufen werden.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Es werden jede Positionen immer durchgegangen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es sind sehr viele Nachbartausche notwendig.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Man macht keinen Nachbarvergleich und behandelt die Fehlstellungen nicht",
          "id": "6e680aa34a6a42a1b26318a46ede5692ed07ca9d850a34c462d23006"
        },
        {
          "text":
            "SelectionSort braucht die gleiche Laufzeit f\u00fcr ein sortiertes array wie f\u00fcr ein unsortiertes, weil es nicht fr\u00fcher abbricht, sondern den Algorithmus f\u00fcr alle stellen des arrays durchf\u00fchrt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Man nutzt die Information, die man durch jeden Vergleich erh\u00e4lt, nicht weiter, sondern k\u00fcmmert sich immer nur um ein Element.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Die gewonnenen Informationen der Vergleiche werden nicht effizient genutzt.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Die Menge wird in jedem Durchgang immer komplett durchgegangen und es gibt keine gesonderte Abbruchbedingung, au\u00dfer wenn die Menge einmal komplett durchlaufen wurde.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Man muss das Array im schlechtesten Fall zweimal durchlaufen",
          "id": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a"
        },
        {
          "text":
            "SelectionSort ist ineffizient da es immer wieder alle Elemente durchgeht und die Elemente bei jedem Durchgang nur um eins verringert werden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es hat IMMER die Laufzeit O(n\\u00b2).",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "W\u00e4hren des Durchlaufs werden keine Informationen gespeichert.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Dauert lange",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "Informationen, die man beim itarieren bekommt. Werden nicht genutzt. Jede Runde wir nur ein Element ver\u00e4ndert, l\u00e4uft demenstprechend immer gleich lang, egal wie die urspr\u00fcngliche Reihenfolge war.",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Vergleiche aus den einzelnen Durchg\u00e4ngen werden sofort wieder vergessen",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "l,l,",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Jedes Teilarray muss komplett durchlaufen werden um das Maximum zu finden und daher m\u00fcssen sehr viele Eintr\u00e4ge gepr\u00fcft werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Laufzeit betr\u00e4gt zu jeder Zeit O(n\\u00b2).",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Viele Vergleiche mit wenig gespeicherten Erkenntnissen.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Dass sich keine Informationen gemerkt werden, au\u00dfer der aktuell gr\u00f6\u00dfte Wert. Damit muss man in jedem Durchlauf Vergleiche machen, die man h\u00e4tte umgehen k\u00f6nnen, wenn w\u00e4hrend der ersten Durchl\u00e4ufe Informationen gesammelt h\u00e4tte. Au\u00dferdem erkennt SelectionSort nicht, wenn ein sortiertes Array vorliegt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Wir vergleichen jedes Element mit jedem, auch wenn die Datenstruktur vorsortiert ist.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Jedes Mal muss das gr\u00f6\u00dfte Element erneut gesucht werden, weil bei jedem Durchgang sich nur das aktuelle Element gemerkt wird",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text":
            "alle elemente werden miteinander verglichen, in jedem fall eine Laufzeit von O(n^2) die gamachten verglecihe werden nicht wieder verwendet",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "dass das Array f\u00fcr jeden Wert einmal durchlaufen wird und zwischenergebnisse nicht genutzt werden",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Das wir selbst bei einer sortierten reihe einmal jeden durchlauf machen m\u00fcssen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Seeeeeehr viele Vergleiche",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Vergleiche werden nicht mehrfach verwendet.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text":
            "F\u00fcr jedes Element des Arrays wird mit jedem verglichen. Der Algorithmus merkt nicht, ob das Array schon sortiert ist.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Bei jedem durchlauf muss jeder Eintrag verglichen werden.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Das Wissen aus den Vergleichen geht verloren",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Vergleichsergebnisse werden sich nicht gemerkt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text":
        "Was ist die gemeinsame Grundidee von Sortierverfahren die auf Nachbart\u00e4uschen basieren?",
      "id": 50887,
      "title": "Sortieren von Nachbarn",
      "referenceAnswer":
        "Die Sortierverfahren beruhen darauf benachbarte Elemente zu vergleichen und  Fehlstellungen zu korrigieren. Das Array wird so lange durchlaufen, bis alle Nachbarn richtig sortiert sind.",
      "answersAnnotation": [
        {
          "text": "Mit jedem Tausch wird das Array etwas sortierter",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Sortierverfahren beruhen darauf benachbarte Elemente zu vergleichen und Fehlstellungen zu korrigieren. Das Array wird so lange durchlaufen, bis alle Nachbarn richtig sortiert sind.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Die Sortierverfahren beruhen darauf benachbarte Elemente zu vergleichen und Fehlstellungen zu korrigieren. Das Array wird so lange durchlaufen, bis alle Nachbarn richtig sortiert sind.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es werden Fehlstellungen korrigiert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Bei jedem Tausch das Array sortierter bekommen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Keine unn\u00f6tigen Wege zu gehen.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Es wird entweder das gr\u00f6\u00dfte oder kleinste Element gesucht und an die richtige Stelle im Array gebracht. Dann wird mit dem n\u00e4chst kleineren bzw gr\u00f6\u00dferen fortgefahren.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "fehlstellungen korrigieren bis es keine mehr gibt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Man nutzt jeden Vergleich.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Die gemeinsame Grundidee ist die Anzahl der Vertauschten Elementen zu reduzieren.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Das jeder Vergleich einen nachhaltigen Unterschied macht und nicht mehrmals durchgef\u00fchrt werden muss.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "es wird immer das aktuelle Element mit dem vorherigen oder nachfolgenden verglichen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Fehlstellungen sollen korrigiert werden bis es keine mehr gibt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Nachbarn zu vergleichen und in die richtige Reihenfolge zu bringen.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text":
            "Dass jeder den Wert des Nachbarn kennt und so in Abh\u00e4ngigkeit dazu tauschen kann",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "Die Informationen die man beim Durchlaufen des Arrays verwenden, um schneller zu sortieren",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Mit jedem Tausch wird eine Fehlstellung im Array eliminiert",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "kmkm",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Dass bei angestrebter aufsteigender Sortierung gr\u00f6\u00dfere Eintr\u00e4ge dazu tendieren nach oben zu wandern und Kleinere nach unten.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das die Laufzeit sich gegenueber von SelectionSort verbessern kann.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Jedes verbessern einer Fehlstellung bringt uns einen Schritt n\u00e4her zum sortierten Array.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Dass man einzelne Werte nach und nach an die richtige Position tauscht.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Nacheinander werden zwei aufeinanderfolgende Elemente im Array miteinander verglichen und eventuell getauscht. Solange bis kein Tausch mehr durchgef\u00fchrt wird.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Die Grundidee ict es, Fehlstellungen zu korrigieren.",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "Wir gehen das Array  durch und vergleichen die nachbarn",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "man will das durchlaufen eines arrays reduzieren",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Fehlstellungen zu finden",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text":
            "Es werden jeweils benachbarte Elemente verglichen und im Falle einer Fehlstellung getauscht. Dies geschieht solange, bis keine Fehlstellungen mehr vorhanden sind.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Es sollen Fehlstellungen repariert werden.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Weniger Vergleiche zu ben\u00f6tigen",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Korigieren von Fehlstellungen wiederholen, bis keine mehr existieren",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Man vergleicht Element um das gr\u00f6\u00dfte Element zu finden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text":
        "Warum sind Sortierverfahren die darauf beruhen Fehlstellungen von Nachbarn zu beheben im best-case besser als n*log(n)?",
      "id": 50888,
      "title": "BubbleSort",
      "referenceAnswer":
        "Bei einem sortierten Array gibt es keine Fehlstellungen. Das Array muss deshalb nur einmal durchlaufen werden.",
      "answersAnnotation": [
        {
          "text": "Best case: Schon sortiert. Nach n-1 Vergleichen ist man dann fertig.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Bei einem sortierten Array gibt es keine Fehlstellungen. Das Array muss deshalb nur einmal durchlaufen werden.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Weil ein sortiertes Array nur genau n Vergleiche und somit eine Laufzeit von O(n) ben\u00f6tigt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Im Best-Case ist das Array schon sortiert. Der Algorithmus kann abbrechen, wenn das Array einmal durchgegangen wurde. Damit ist die Laufzeit n.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Da viele Fehlstellung bereits beim ersten Durchlauf korrigiert werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil im best case die Laufzeit n ist, da nur einmal durchgelaufen werden muss.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Da sie im best-case nur das Array durchlaufen und alle Nachbarn einmal vergleichen, also eine Laufzeit von O(n) haben.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das array wird nur einmal durchgelaufen dh die Laufzeit ist n",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Weil im besten Fall das Array schon vorsortiert ist und nur einmal durchlaufen werden muss (um festzustellen dass jede einzelne Position passt).",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Falls die Menge vorsortiert ist, wird dies durch ein einmaliges durchlaufen sofort festgestellt.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Weil sie dann in einem bereits sortierten Array nur die Laufzeit O(n) ben\u00f6tigen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Weil in dem best-case, d.h. wenn das Array schon vorsortiert war, laufen sie nur einmal durch. Wenn richtig implementiert, kommt ein One-Way-Flag - nichts zu tauschen - und der Algorithmus ist fertig. O(n)",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "dann ist es schon sortiert",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil das Array so immer in geordneterer Reihenfolge auftaucht",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "im best case liegt das array bereits sortiert vor und muss deshalb nur einmal durchlaufen werden",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Bei vorsortierten Arrays muss das Array nur einmal durchlaufen werden. Daher O(n)",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "kjkjk",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Weil sie, wenn alles schon sortiert ist nicht korrigieren m\u00fcssen, d.h. sie m\u00fcssen nur einmal das Array durchlaufen, was O(n) ben\u00f6tigt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil das Array im besten Fall nur einmal durchlaufen werden muss.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Solche Verahren werden abgebrochen, wenn kein Tausch durchgef\u00fchrt wurde. Wenn das Array sortiert war, passiert das in der Zeit n.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Weil sie nur einmal das Array durchlaufen und sofort erkennen (au\u00dfer unoptimiertes SelectionSort), wenn im gesamten Array keine Fehlstellung vorliegt. Die Laufzeit betr\u00e4gt dann O(n).",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Weil din dem Fall das Array im Best case vorsortiert ist, es also keine Fehlstellung gibt, die man beheben muss",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "das Array muss wenn es vorsortiert ist nur einmal durchlaufen werden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Weil im besten Fall schon eine sortierte Menge vorliegt und die Menge nur einmal durchlaufen werden muss um herauszufinden dass keine Fehlstellung vorliegt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "weil im Best Case, nur maximal ein durchlauf n\u00f6tig isst und somit nur O(n)",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Bei sortierten daten brauch man nur 1 durchlauf",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Vergleichsbasierend",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Im besten Fall muss der Datensatz nur einmal durchlaufen werden (O(n)).",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text":
            "Der best case ist, wenn das Array bereits sortiert ist. Dann werden n Vergleiche gemacht und kein Mal getauscht. Der Algorithmus bricht ab, wenn nict getauscht wurde in einem Durchgang.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Da ein bereits richtig sortiertes Array in einem Durchlauf abgearbeitet werden kann",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Nur ein Durchlauf erforderlich, wenn das Array bereits sortiert ist",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Da dass Array nur einmal durchlaufen werden muss",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was ist die Idee von Heapsort?",
      "id": 50889,
      "title": "Idee HeapSort",
      "referenceAnswer":
        "Die Elemente werden so in einem Bin\u00e4rbaum arrangiert, dass eine Kante immer einen Vergleich zwischen zwei Elementen darstellt, bei welchem der Vater das gr\u00f6\u00dfere Element ist. Die so gespeicherten Vergleichsinformationen verschnellern die Suche nach dem gr\u00f6\u00dften Element.",
      "answersAnnotation": [
        {
          "text":
            "M\u00f6glichst viele der gewonnen Daten zu verwenden, es wird ein Bin\u00e4rbaum konstruiert",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Elemente werden so in einem Bin\u00e4rbaum arrangiert, dass eine Kante immer einen Vergleich zwischen zwei Elementen darstellt, bei welchem der Vater das gr\u00f6\u00dfere Element ist. Die so gespeicherten Vergleichsinformationen verschnellern die Suche nach dem gr\u00f6\u00dften Element",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Ein Bin\u00e4rbaum wird erstellt, das Maximum\\/Minimum wird zum 0. Knoten, darunter sind die jeweiligen Kinder, welche aufsteigend bis zum 0. Knoten sortiert werden, danach wird dieser abgeschnitten.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Man strukturiert die Vergleiche so, dass eine Ver\u00e4nderung m\u00f6glichste viele Informationen erh\u00e4lt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "In einem Bin\u00e4rbaum wird der Vater als gr\u00f6\u00dferes Element mit seinen kleineren Kindern dargestellt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "DIe Elemente werden in einem bin\u00e4rbaum dargestellt und nacheinander ausgelesen.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Mit einem Bin\u00e4rbaum suchen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Man interpretiert die Daten in einem Baum. Mit heapify() wird dieser zu einem Heap gemacht und die Wurzel entfernt. Durch eine weitere Anwendung von heapify() wird der Baum wieder zu einem heap gemacht.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Alle Vergleiche werden genutzt. Die Beziehung des Vaters zu seinen Kindern ist stets, dass der Vater gr\u00f6\u00dfer als seine Kinder ist. Das Maximum ist die Wurzel d.h. immer bekannt in einem Heap. Die Wurzel wird abgeschnitten und in ein Array gepackt, anschlie\u00dfend das letzte Blatt an den Platz der Wurzel gesetzt und der Baum wird zu einem Heap repariert, woraufhin das Maximum wieder bekannt ist und wieder abgeschnitten werden kann...",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Heapsort schreibt alle Positionen eines Arrays in einen Baum, wo immer die Wurzel den gr\u00f6\u00dften Wert hat und immer die Wurzel eines Teilbaums den gr\u00f6\u00dften Wert des Teilbaums.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Bei dem Heapsort wird zun\u00e4chst aus der gegebenen Menge ein heap erstellt. Bei dem Heap ist die Wurzel das gr\u00f6\u00dfte Element. Nun nimmt man die Wurzel hinaus und setzt das letzte Element des Heaps als neue Wurzel und stellt erneut den heap durch heapify wieder her. Dies wird solange wiederholt bis der heap leer ist.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Die Menge wird als ein Heap betrachtet, bei dem der Vater immer gr\u00f6\u00dfer als seine Kinder ist. Dann entspricht die Wurzel immer dem Maximum und dieses kann mehrmals herausgelesen werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "die Idee ist das in einem Heap alles unter einem Knoten sortiert ist",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein Array als Baum zu definieren und dann die gr\u00f6\u00dften Elemente sortiert in ein neues Array zu \u00fcbertragen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Das Array als Bin\u00e4rbaum zu betrachten und den so zu sortieren, dass Vater gr\u00f6\u00dfer als jedes Kind ist.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Suchen in form von b\u00e4umen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "die idee ist es, das array in einen bin\u00e4rbaum zu sortieren, der voraussetzt, dass der Knoten immer gr\u00f6\u00dfer als die Kinder ist. Mit dieser Information kann man immer die Wurzel rausziehen und nach und nach den Heap abbauen",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Die zu sortierenden Elemente werden in einem Bin\u00e4rbaum angeordnet und mithilfe der Operation heapify () sortiert",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "kjk",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Das Array wird in einen Bin\u00e4rbaum mit der Eigenschaft, dass alle V\u00e4ter gr\u00f6\u00dfer als ihre Kinder sind, umgewandelt. Dadurch ist die Wurzel der gr\u00f6\u00dfte Eintrag. Diese wird rausgenommen, das letzte Blatt hochgetauscht und dann wird das Ganze mit dem verbleibenden Teilarray gemacht.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Bin\u00e4rbaum mit Vater-Kind-Beziehung.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Ein Array wird als bin\u00e4rer Baum interpretiert, der die Heapbedingung erf\u00fcllt. Die Maximumssuche kann jetzt n mal in der Zeit logn  durchgef\u00fchrt werden.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Ein Array wird als Bin\u00e4rbaum interpretiert, wodurch man bei jedem Vergleich Informationen speichert und somit wiederverwerten kann.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Elemente werden in einem Bin\u00e4rbaum angeordnet. Der Vater ist hierbei immer gr\u00f6\u00dfer als die Kinder. Um diese Bedingung zu erf\u00fcllen muss heapify auf jeder der Teilb\u00e4ume angewendet werden.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Die Elemente werden so in einem Bin\u00e4rbaum arrangiert, dass eine Kante immer einen Vergleich zwischen zwei Elementen darstellt, bei welchem der Vater das gr\u00f6\u00dfere Element ist. Die so gespeicherten Vergleichsinformationen verschnellern die Suche nach dem gr\u00f6\u00dften Element.",
          "id": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text":
            "Wir bauen einen Bin\u00e4rbaum wo der Vater gr\u00f6\u00dfer ist als seine Kinder (Heap) und ersetzen die Wurzel (das gr\u00f6\u00dfte Element ) immer mit einem Blatt und tauschen dann durch bis die Heapbedinngung wieder erf\u00fcllt ist",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "heapsort nutzt einen Baum um die Werte zu speichern mit der Bedingung Kinder sind kleiner als Eltern",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Ein Baum verwenden um so immer den gr\u00f6\u00dften ans ende zu packen",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Baum",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text":
            "Die Menge wird als Baum darestellt. Die Kanten bilden dabei jeweils Vergleiche, wobei der Knoten jeweils Gr\u00f6\u00dfer als seine Kinder ist.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text":
            "Wir interpretieren das Array als Baum, bei dem jeder Knoten im Wert gr\u00f6\u00dfer ist als seine Kinder. Beim Aufbau eines Heaps merken wir uns an den Kanten die schon erfolgten Vergleiche und nutzen diese sp\u00e4ter wieder. Wenn der Heap aufgebaut ist, steht auf jeden Fall das gr\u00f6\u00dfte Element in der Wurzel. Diese wird dann abgeschnitten und an die letzte Stelle im Array geschrieben. Das letzte Blatt (also der vorletzte Wert im Array) wird dann in die Wurzel geschrieben. Dann werden solange T\u00e4usche vorgenommen bis diese neue Zahl an der richtigen Stelle steht du somit der Baum wieder ein heap ist. dann steht wieder das gr\u00f6\u00dfte Element in der Wurzel und kann ins zweitletzte Element des Arrays geschrieben werden.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Bin\u00e4rer Baum, Kanten repr\u00e4sintieren Vergleiche, Vater gr\u00f6\u00dfer als Kinder",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein bin\u00e4rer Baum, bei dem jeder Vater gr\u00f6\u00dfer als seine beiden Kinder ist",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Welche Eigenschaften eines Heaps sind essentiell f\u00fcr das sortieren?",
      "id": 50890,
      "title": "Eigenschaften eines Heaps",
      "referenceAnswer":
        "Der gr\u00f6\u00dfte Wert aller Knoten in jedem Teilbaum ist in dessen Wurzel. Ein Heap besitzt eine maximale Tiefe von log(n).",
      "answersAnnotation": [
        {
          "text": "Der Vater ist gr\u00f6\u00dfer als die Kinder",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Der gr\u00f6\u00dfte Wert aller Knoten in jedem Teilbaum ist in dessen Wurzel. Ein Heap besitzt eine maximale Tiefe von log(n).",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text": "Bin\u00e4rbaum, also nur zwei Kinder pro Vater.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein Heap ist ein Bin\u00e4rbaum, in dem jeder Vater gr\u00f6\u00dfer oder gleich den Kindern ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Kinder sind kleiner als der Vater. Darstellung in einem Bin\u00e4rbaum. Wurzel ist das gr\u00f6\u00dfte Element.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die V\u00e4ter sind gr\u00f6\u00dfer als die Kinder",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Die Eigenschaft, dass er ein Bin\u00e4rbaum ist, also jeder Vater nur zwei Kinder hat, und dass der Vater immer gr\u00f6\u00dfer als die Kinder ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Der vater ist gr\u00f6\u00dfer als das kind un ddas maximum ist die wurzel also bekannt!",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Dass die Wurzel jedes Teilbaums immer der gr\u00f6\u00dfte Wert des Teilbaums ist.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Das gr\u00f6\u00dfte Element des Heaps steht in der Wurzel.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Der Vater ist immer gr\u00f6\u00dfer als seine Kinder, die Wurzel ist immer das Maximum.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "das jeder Teilbaum ein Heap ist",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Wurzel muss den gr\u00f6\u00dften Wert haben und die Kinder immer kleiner sein als ihre V\u00e4ter.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Das linke Kind = 2i+1, das rechte Kind 2i+2, Vater (i-1)\\/2 ist gr\u00f6\u00dfer als Kinder",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Dass der Vater und die Kinder bekannt sind",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text":
            "muss ein bin\u00e4rbaum mit tiefe log(n) sein und die V\u00e4ter gr\u00f6\u00dfer als ihre kinder.",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Die Wurzel ist das gr\u00f6\u00dfte Element. Die Kindsknoten bzw. Bl\u00e4tter sind kleiner als der Vater.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "lm,lm",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Dass der Vater gr\u00f6\u00dfer ist als seine Kinder, dass nur die letzte Ebene (die Bl\u00e4tter) und evtl. ein Teil der vorletzten Ebene keine Kinder hat.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Vater-Kind-Beziehung",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Die Heapbedingung ist erf\u00fcllt, die Wurzel jedes Teilbaums ist gr\u00f6\u00dfer als die Kinder.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Dass der Vater immer gr\u00f6\u00dfer ist als seine Kinder, somit die Wurzel der gr\u00f6\u00dfte Wert des gesamten Arrays ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Wurzel ist das Maximum",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Dass in der Wurzel immer das gr\u00f6\u00dfte Element steht",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Bedingung dass die Kinder immer kleiner sind als die Eltern",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Vater gr\u00f6\u00dfer als Kinder",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Alle Ebenen bis auf die letzte m\u00fcssen vollst\u00e4ndig gef\u00fcllt sein.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Der Bin\u00e4rbaum muss vorsortiert sein",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "F\u00fcr jeden Knoten gilt dass seine Kinder kleiner sind als er selbst. Wenn Kinder da sind.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text":
            "Die Kanten stelllen einen Vergleich da, der Vater ist gr\u00f6\u00dfer als seine beiden Kinder",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text":
        "Wie muss ein Bin\u00e4rbaum strukturiert sein um ihn in einer Laufzeit von n*log(n) in einen Heap transformiert werden zu k\u00f6nnen? Die Bin\u00e4rb\u00e4ume in den folgenden Aufgaben weisen stets diese Struktur auf.",
      "id": 50891,
      "title": "Struktur eines Heap",
      "referenceAnswer":
        "Alle Ebenen des Baumes, bis auf die letzte, m\u00fcssen vollst\u00e4ndig bef\u00fcllt sein. Die letzte Ebene muss vom linken Ende bis zum rechtesten Element vollst\u00e4ndig bef\u00fcllt sein.",
      "answersAnnotation": [
        {
          "text":
            "er muss sortiert sein der gr\u00f6\u00dfte wert in der wurzel die kleinsten in den Bl\u00e4tter, es muss ein bin\u00e4rbaum sein",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Alle Ebenen des Baumes, bis auf die letzte, m\u00fcssen vollst\u00e4ndig bef\u00fcllt sein. Die letzte Ebene muss vom linken Ende bis zum rechtesten Element vollst\u00e4ndig bef\u00fcllt sein.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Alle Ebenen des Baumes, bis auf die letzte, m\u00fcssen vollst\u00e4ndig bef\u00fcllt sein. Die letzte Ebene muss vom linken Ende bis zum rechtesten Element vollst\u00e4ndig bef\u00fcllt sein.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Knoten hat maximal zwei Kinder.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "geht das nicht bei jedem?",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Er muss eine Tiefe von maximal n*log(n) haben.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "er muss die maximale tiefe log(n) haben. Alle m\u00f6glichen Positionen sind besetzt. geringst m\u00f6gliche tiefe. Jeder Vater hat zwangsl\u00e4ufig 2 kinder au\u00dfer der letzte.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Er muss schon vorsortiert sein.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Der Bin\u00e4rbaum muss in den beiden Kindern der Wurzel Heaps besitzen.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Die Ebenen m\u00fcssen soweit aufgef\u00fcllt werden, wie es m\u00f6glich ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "unsortiert",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "darf nur 2 kinder haben, muss tiefe log(n) haben",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "klkl",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Egal wie.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Er muss konstanz gef\u00fcllt sein.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Wir f\u00fcllen die Knoten von oben nach unten und von links nach rechts auf, anschlie\u00dfend \u00fcberpr\u00fcfen wir jeden Knoten, ob er die Bedinngungen erf\u00fcllt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "geringe TIefe",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Er muss als Suchbaum strukturiert sein.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Bis auf die letzte Ebene vollst\u00e4ndig gef\u00fcllt, diese soweit wie m\u00f6glich von links nach rechts gef\u00fcllt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "alle Ebenen muss vollst\u00e4ndig gef\u00fcllt sein",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text":
        "Wie wird aus einem Bin\u00e4rbaum dessen beiden Teilb\u00e4ume selber Heaps sind ein Heap erstellt? Wieso ben\u00f6tigt diese Operation eine log(n) Schritte?",
      "id": 50892,
      "title": "Heap reparieren",
      "referenceAnswer":
        "Das Element in der Wurzel tauscht immer wieder die Position mit dem gr\u00f6\u00dferen seiner Kinder, bis es selber wieder ein Blatt ist oder gr\u00f6\u00dfer ist als beide Kinder. Der Bin\u00e4rbaum besitzt maximal log(n) Ebenen.",
      "answersAnnotation": [
        {
          "text":
            "das letzte (rechteste) Blatt wird die neue Wurzel und solange nach unten getauscht bis der heap wieder sortiert ist",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Das Element in der Wurzel tauscht immer wieder die Position mit dem gr\u00f6\u00dferen seiner Kinder, bis es selber wieder ein Blatt ist oder gr\u00f6\u00dfer ist als beide Kinder. Der Bin\u00e4rbaum besitzt maximal log(n) Ebenen.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Das Element in der Wurzel tauscht immer wieder die Position mit dem gr\u00f6\u00dferen seiner Kinder, bis es selber wieder ein Blatt ist oder gr\u00f6\u00dfer ist als beide Kinder. Der Bin\u00e4rbaum besitzt maximal log(n) Ebenen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Heapify auf die Teilb\u00e4ume anwenden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Das Letzte Blatt wird zur Wurzel und danach wird dieses mit dem jeweils gr\u00f6\u00dften Kind getauscht solange das Kinde gr\u00f6\u00dfer ist. Die Laufzeit ergibt sich daraus, dass die Tiefe des Baumes maximal log(n) ist.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "die zwei kinder werden verglichen und das gr\u00f6\u00dfte der kinder wird mit dem vater getauscht wenn es gr\u00f6\u00dfer als der vater ist. diese operation wird durchgef\u00fchrt solange v kinder hat, dh es werden alle knoten auf der strecke auf der getausht wurde \u00fcberpr\u00fcft, bis man bei einem blatt ankommt. Die strecke bis man bei einem Blatt ankommt ist die tiefe eines baums, die maximal log(n ) ist. Dh es werden maximal log(n) tauschs durchgef\u00fchrt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Heapify wird auf jeden Knoten der Teilb\u00e4ume angewandt. Weil man f\u00fcr jede Reparatur die Kanten entlang gehen muss, also dauert es die Tiefe des Baumes lang und die ist log(n).",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Bei einem Bin\u00e4rbaum, dessen Teilb\u00e4ume selber Heaps sind muss nur die Wurzel kontrolliert werden, dass f\u00fcr diese die Bedingung gilt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Man tauscht die Wurzel mit dem gr\u00f6\u00dften Kind und wiederholt dies bis es gr\u00f6\u00dfer ist als beide Kinder.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "heapify",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Weil log(n) ist die maximale Tiefe des Baumes. Die Wurzel (der Vater) wird mit beiden Kindern verglichen. Wenn kleiner, wird er mit dem gr\u00f6\u00dferen Kind vertauscht. und dann wieder mit den n\u00e4chsten Kindern usw. bis die Kinder Bl\u00e4tter sind.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text":
            "Das gr\u00f6\u00dfte Kind des obersten Knotens (bsp die Wurzel) wird mit dem Koten getauscht",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "die wurzel wird durch heapify mit dem gr\u00f6\u00dferen kind vertauscht, dadurch muss der komplette heap nochmals \u00fcberpr\u00fcft werden nach fehlstellungen",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "mkm",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Falls das gr\u00f6\u00dfere Kind gr\u00f6\u00dfer ist als der Vater werden diese getauscht. Das runtertauschen einer ung\u00fcltigen Wurzel ben\u00f6tigt h\u00f6chstens log(n) Schritte, weil es h\u00f6chstens f\u00fcr jede Ebene einmal gemacht werden muss und der Baum log(n) viele Ebenen hat.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird die Operation heapify() genutzt.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Die Wurzel muss mit den Kindern verglichen werden und m\u00f6glicherweise, mit dem gr\u00f6\u00dferen getsucht werden. Dieser Schritt muss iterativ, logn mal passieren (entspricht der Tiefe des Tielbaums).",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Indem die Wurzel des Baumes die gr\u00f6\u00dften Kinder entlang nach unten wandert. Wenn oben einer der kleinsten Wert des ganzen Arrays stand, muss der Knoten die komplette Tiefe des Baumes nach unten wandern. Diese betr\u00e4gt log(n).",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Wir wissen bereits, dass beide Teilb\u00e4ume ein Heap sind. Nun muss sichergestellt werden, dass die Wurzel unser Maximum ist. Ist dies nicht der Fall muss die Reparatur durchgef\u00fchrt werden und somit k\u00f6nnen wieder Fehler in den einzelnen Teilb\u00e4umen entstehen. Wir m\u00fcssen nach der \u00c4nderung der Wurzel f\u00fcr den ganzen Baum kontrollieren ob jeder Teilbaum noch ein Heap ist. Dies ben\u00f6tigt eine Zeit von log n",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Max. Log(n) ebenen Die Wurzel wandert runter bis sie gr\u00f6\u00dfer ist als ihre Kinder oder sie ein Blatt ist",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "es muss ein heapify durchgef\u00fchrt werden, welcher sich ggf bis zu einem Blatt durchziehen kann",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "kp",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text":
            "Das Element an der Wurzel wird mit dem letzten Kind getauscht. Daf\u00fcr wird es immer wieder mit dem rechten Kind getauscht. D ein Baum log(n) Tiefe hat, ben\u00f6tigt die Operation log(n) Schritte.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Die heapify Funktion muss auf den Bin\u00e4rbaum angewendet werden.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Die Wurzel wird durch sinnvolles Tauschen an die richtige Stelle gebracht. Immer am gr\u00f6\u00dften Kind entlang.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        }
      ]
    },
    {
      "text": "Wie wird der initiale Heap aus einem Bin\u00e4rbaum erstellt?",
      "id": 50893,
      "title": "Heap Initiierung",
      "referenceAnswer":
        "Es wird in der vorletzten Ebene angefangen und in den Ebenen aufsteigend aus jedem Teilbaum des Bin\u00e4rbaumes ein Heap erstellt. Alle Bl\u00e4tter des Bin\u00e4rbaumes sind bereits Heaps und k\u00f6nnen daher ausgelassen werden.",
      "answersAnnotation": [
        {
          "text":
            "die ebenen werden beginnend mit der wurzel von links nach rechts aufgef\u00fcllt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Es wird in der vorletzten Ebene angefangen und in den Ebenen aufsteigend aus jedem Teilbaum des Bin\u00e4rbaumes ein Heap erstellt. Alle Bl\u00e4tter des Bin\u00e4rbaumes sind bereits Heaps und k\u00f6nnen daher ausgelassen werden.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Es wird in der vorletzten Ebene angefangen und in den Ebenen aufsteigend aus jedem Teilbaum des Bin\u00e4rbaumes ein Heap erstellt. Alle Bl\u00e4tter des Bin\u00e4rbaumes sind bereits Heaps und k\u00f6nnen daher ausgelassen werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Von links nach rechts werden die Elemente aus dem Array in den Bin\u00e4rbaum eingetragen. Die erste Zahl ist also die Wurzel und anschlie\u00dfend werden der Reihe nach alle Ebenen gef\u00fcllt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "V\u00e4ter mit gr\u00f6\u00dftem Kind tauschen solange dieses gr\u00f6\u00dfer ist.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Es wird gepr\u00fcft, ob die Wurzel gr\u00f6\u00dfer als die Kinder ist. Ist dies nicht der Fall, wird mit dem gr\u00f6\u00dferen Kind getauscht.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "operation buildHeap f\u00e4ngt bei dem ersten Knoten von hinten das kein blatt ist( dh muss mindestens das linke kind haben welches im array die position 2i+1 hat wenn der knoten den index i hat) und f\u00fchrt die operation heapify. danach wird heapify bei dem knoten davor ausgef\u00fchrt usw bis man bei der wurzel angelangt ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Genau so wie ein Heap reperariert wird. Wenn ein Kind gr\u00f6\u00dfer als sein Vater ist werden diese getauscht, solange bis das Maximum oben steht.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Aus einem Bin\u00e4rbaum erstellt man einen Heap indem man von dem letzten Element welches kein Blatt ist bis zur Wuzel die Heapbedingung herstellt.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Wir beginnen zun\u00e4chst mit dem letzten Knoten, der kein Blatt ist und wenden dann heapify auf ihn und alle dar\u00fcber liegenden Knoten an (r\u00fcckw\u00e4rts bis zur Wurzel).",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "heapify gr\u00f6\u00dfter wert nach oben",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Heapify (Vergleich mit Kindern) wird auf dem letzten Knoten durchgef\u00fchrt, der sicher zumindest ein Kind hat und dann auf allen Knoten vor ihm, bis zu der Wurzel.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text":
            "heapify () beginnt beim rechtesten Blatt und vergleicht immer, ob die Wurzel gr\u00f6\u00dfer ist, als die Kinder, geht also immer eine Ebene h\u00f6her",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "durch heapify, man f\u00e4ngt bei dem tiefsten Knoten ganz rechts an und tauscht nach und nach aufsteigend die wurzel des teilbaums mit seinen kindern, falls diese gr\u00f6\u00dfer sind als die wurzel.",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "l,l,",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Mit der Funktion buildHeap()",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Man tauscht bei einem Knoten das gr\u00f6\u00dfere Kind mit dem Vater, falls es gr\u00f6\u00dfer als der Vater ist. Das Ganze macht man f\u00fcr jeden Knoten, beginnend mit dem letzten mit Kindern und durchl\u00e4uft dann alle Ebenen von unten nach oben.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Das Array wird asl Heap interpretiert. Die Kinder eines Knotens n sind links: an Stelle, 2n-1, und rechts bei, 2n-2. Dann muss n mal heapify aufgerufen werden. auf letztem Teilbaum, ...",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Mit der Methode heapify.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Ein Bin\u00e4rbaum ist ein Heap wenn alle seine Teilb\u00e4ume Heap sind. Also fange ich bei dem Teilbaum in der untersten Ebene an und wende heapify an. Dass mache ich f\u00fcr jeden einzelnen der Teilb\u00e4ume, bis ich bei der UWRZEL ANGEKOMMEN BIN, wo ich auch wieder heapify anwenden muss",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Wir fangen bei dem ersten Knoten, der kein Blatt mehr ist an und \u00fcberpr\u00fcfen seine Kinder, wenn n\u00f6tig wird getauscht, so gehen wir von unten nach oben und von links nach rechts durch den Baum, bis alle Vater gr\u00f6\u00dfer sind als ihre Kinder",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "der Bin\u00e4rbaum wird bef\u00fcllt und dann von den Bl\u00e4ttern an mittels heapify die Bedingung f\u00fcr jeden knoten erf\u00fcllt",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "heapify",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "heapify",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "heapify auf alle Knoten, angefangen von unten, anwenden",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Man beginnt am letzten Knoten, der kein blatt ist und ruft die Funktion heapify auf. Heapify tauscht das gr\u00f6\u00dfere Kind mit dem vater, wenn es gr\u00f6\u00dfer ist als der Vater.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Von der vorletzten Ebene aus werden alle Teilb\u00e4ume zu Heaps gemacht",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird solange getauscht bis jeder Vater gr\u00f6\u00dfer als eine Kinder ist",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was ist eine rekursive Operation?",
      "id": 50894,
      "title": "Rekursion",
      "referenceAnswer": "Das ist eine Operation, die sich selbst wieder aufruft.",
      "answersAnnotation": [
        {
          "text":
            "eine operation die immer wieder dasselbe tut bis eine bestimmte leich tzu l\u00f6sende situation eintrifft",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine Operation, die sich selbst aufruft und mit anderen Parametern weiter arbeitet.",
          "id": "4cfc3a1811fe40afa401b25ef7fa0379f1f7c1930a04f8755d678474"
        },
        {
          "text": "Das ist eine Operation, die sich selbst wieder aufruft.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Eine Operation, die sich in sich selbst aufruft. Irgendwann gelangt sie zum Rekursionsanfang\\/-ende\\/-anker und errechnet r\u00fcckw\u00e4rts (rekursiv) den zu berechnenden Wert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Operation welche sich selbst aufruft.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Operation, die sich selbst aufruft.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Eine Rekursive Operation ruft sich selbst wieder auf.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine rekursive Operation geht von einem gro\u00dfen Problem schrittweise zu einem kleineren Problem, bis dieses so klein ist, dass es gel\u00f6st werden kann. Dabei ruft die Operation sich selber immer wieder auf.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "eine operation die sich selbst aufruft (direkt oder indirekt)",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Eine Operation, die aus einem Rekursionanker besteht und sich selbst als Probleml\u00f6sen wieder aufruft.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine rekursive Operation ist eine Operation die sich selbst in ihr aufruft.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Das ist eine Operation, die sich immer wieder selbst aufruft.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "eine rekursive Operation ist eine Operation die sich immer wieder selbst aufruft und nach dem Prinzip divide and conquer ein gro\u00dfes Problem zerlegt und die Teilprobleme dann l\u00f6st",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Operation die sich selbst aufruft.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "ruft sich selbst immer wieder auf bis bedingung erf\u00fcllt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Operation, die sich selbst aufruft.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Operation, die sich selber aufruft",
          "id": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Eine Operation, die sich selbst aufruft",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "eine sich selbst aufrufende operation",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "l,l,",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Ein Aufruf einer Methode in einer Methode. Das ganze kann direkt oder indirekt sein.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Eine Operation die sich selbst aufruft.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Operation, die sich selbst aufruft (direkt oder indirekt).",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Eine Operation, die sich direkt oder indirekt selber auruft.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine rekursive Operation ist eine Operation, die sich selbst aufl\u00f6st.",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Eine Operation die sich selbst aufruft und dadurch die Aufgaben in zu bew\u00e4ltigende Teile zerteilt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "eine Operation die sich selbst aufruft",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Eine Operation die sich selber aufruft",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Operation die sich selbst aufruft.",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Eine Operation die sich selbst aufruft.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Eine Operation, die sich selbst aufruft.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Eine Operation ruft sich selber auf.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Eine Operation die sich selbst aufruft",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was ist die Idee des rekursiven MergeSort Algorithmus?",
      "id": 50895,
      "title": "Idee MergeSort",
      "referenceAnswer":
        "Der Mergesort Algorithmus halbiert die zu sortierende Menge, sofern die Menge mehr als zwei Elemente enth\u00e4lt. Anschlie\u00dfend ruft er sich selbst an beiden Teilmenge auf, bevor er die sortierten Ergebnisse dann zusammenf\u00fcgt. Eine Menge von 2 oder weniger Elementen wird einfach sortiert zur\u00fcckgegeben.",
      "answersAnnotation": [
        {
          "text": "die menge wird solange geteilt bis sie fertig sortiert ist",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Der Mergesort Algorithmus halbiert die zu sortierende Menge, sofern die Menge mehr als zwei Elemente enth\u00e4lt. Anschlie\u00dfend ruft er sich selbst an beiden Teilmenge auf, bevor er die sortierten Ergebnisse dann zusammenf\u00fcgt. Eine Menge von 2 oder weniger Elementen wird einfach sortiert zur\u00fcckgegeben.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Das Intervall einer Menge wird halbiert und vergleicht, wenn es bis auf zwei bzw. ein Element immer weiter rekursiv halbiert wurde die Elemente und vertauscht sie, falls n\u00f6tig. Danach werden die Intervalle (Stapel) wieder zusammengemischt (eigentlich eher wieder aneinandergelegt).",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Devide and Conquer",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Operation ruft sich solange selbst auf, bis nur noch 2 Zahlen zu vergleichen sind. Danach gibt sie diese sortiert wieder zur\u00fcck.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Bei MergeSort werden die zu sortierenden Elemente immer wieder in der H\u00e4lfte geteilt, bis jeweils nur noch zwei Elemente \u00fcbrig sind. Diese werden sortiert und mit einem anderen sortierten Stapel vermischt (sodass es insgesamt sortiert ist, nicht irgendwie mischen).",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Duvide and conquer. Ein Array wird so lange aufgeteilt bis es nur 1 element hat. Dann werden 2 sortierte teile des arrays in einem neu angelegten array gemischt dh sortiert und in das urspr\u00fcngliche array \u00fcbertragen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die gegebene Menge wird immer wieder aufgeteilt in zwei Mengen und rekursiv selbst weitergegeben. Hat man eine Menge von nur zwei Elementen sortiert man diese und gibt sie zur\u00fcck.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Das eine Menge immer wieder aufgeteilt wird bis nur noch <= 2 Elemente vorhanden sind, die einfach sortiert werden k\u00f6nnen. Somit wird die Menge in kleinere Probleme aufgeteilt und sobald diese kleinsten Probleme gel\u00f6st sind wieder zusammengef\u00fcgt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die Idee ist Divide and Conquer, dazu wird der zu sortierende Stapel immer wieder in zwei H\u00e4lften aufgeteilt und diese jeweils sortiert und sortiert wieder zusammengemischt.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "bei Merge Sort wird das Array in Teilarrays unterteilt und dann wieder geteilt und wieder geteilt bis die Elemente einzeln vorliegen. Diese werden dann mit den anderen Teilarrays gemergt und dabei sortiert",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "MergeSort sortiert immer weiter geteilte Stapel erst, wenn diese h\u00f6chstens zwei Elemente besitzen. Dann werden die einzelnen Elemente zusammengemischt und so sortiert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "teile und herrsche",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Divide & Conquer. Die Menge wird auf zwei geteilt und rekursiv wieder und wieder, bis jede Teilmenge nur ein Element enth\u00e4lt und dann je nach Gr\u00f6\u00dfe wieder zusammen geklebt.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text":
            "Divide & conquer Das zu sortierende Array wird solange in zwei Teilarrays aufgeteilt, bis die Teilarrays nur noch aus einem Element bestehen. Daraufhin geht die Rekursion r\u00fcckw\u00e4rts und f\u00fcgt dabei die Teilarrays so zusammen, dass sie sortiert sind. Das geschieht solange, bis das Array vollst\u00e4ndig sortiert ist.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "das array rekursiv in arrays der l\u00e4nge 2 oder 1 und diese zu sortieren und dann nach und nach die kurzen arrays mit anderen arrays zusammensortieren",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "ml,l,",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Devide and Conquer",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Ein (Teil-)Array wird so oft halbiert bis es nurnoch aus zwei Elementen besteht, diese werden dann sortiert. Dieses Teilarray wird mit einem anderen gemergt also so zusammengef\u00fchrt, dass es immernoch sortiert ist. Das macht man dann so oft bis man wieder beim urspr\u00fcnglichen Array angekommen ist.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Divide and conquer. Ein Problem wird in Teilprobleme aufgeteilt, die delegiert werden (auf denen die sort-operation rekursiv aufgerufen wird). Wenn die Probleme klein genug sind, k\u00f6nnen sie gel\u00f6st werden und die L\u00f6sungen k\u00f6nnen zur Probleml\u00f6sung kombiniert werden.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Man teilt ein gegebenes Array so lange in der H\u00e4lfte, bis es maximal aus 2 Werten besteht, diese kann man leicht sortieren, danach werden die Teilarrays zusammengemischt.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Der Datensatz mit n Elementen wird so h\u00e4ufig halbiert bis jeweils nur noch 1 Element da ist. dann wird er sortiert wieder zusammengef\u00fcgt",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "Wir Teilen das was wir bekommen in zwei Teile, die jeweils wieder zerteilt werden, bis nur noch ein einzelnes element \u00fcbrig ist, dann werden sie wieder zusammen gemischt, so dass immer die obersten elemente Zweier Teile verglichen werden und der Kleinere zu erst auf den Zusammenf\u00fcgestapel kommt, bis alle Einzelteile wieder zusammengef\u00fcgt wurden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Divide and Conquer",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Divide and Conquer",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Divide and Conquer",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text":
            "Der Datensatz wird so lange rekursiv aufgeteilt, bis er nur noch zwei Elemente miteinander vergleichen muss. Anschlie\u00dfend werden die Elemente wieder ebenenweise zusammengef\u00fcgt.",
          "id": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text":
            "Die Menge wird rekursiv immer weiter geteilt, bis nur noch zwei Elemente vorhanden sind. Diese und die zur\u00fcckgegebenen Mengen werden dann entsprechend wieder sortiert.",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text":
            "Die zu sortierende Menge wird immer weiter aufgeteilt, bis nur noch zwei oder weniger Objekte \u00fcbrig sind, diese werden dann zur\u00fcckgebeben und mit den anderen zusammengef\u00fcgt",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Wir brauchen nur einen Vergleich zu programmieren, da wir von Beginn an die zu sortierende Menge teilen und dann f\u00fcr beide H\u00e4lften das Sort aufrufen, m Sort dann wieder teilen und f\u00fcr beide H\u00e4lften Sort aufrufen. Das passiert so lange, bis die zu sortierende Menge nur noch 2 Elemente hat. die sind ganz leicht zu sortieren. Bein R\u00fcckkehren werden die beiden Mengen zusamengemischt und wieder zur\u00fcckgegeben.",
          "id": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Das zu sortierende Array wird immer weiter verkleinert",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text":
        "Stellen Sie sich die rekursive Aufteilung der zu sortierenden Menge in einem Bin\u00e4rbaum vor. Erkl\u00e4ren sie anhand der Struktur dieses Bin\u00e4rbaumes warum MergeSort in der Laufzeitklasse O(n*log(n)) liegt.",
      "id": 50896,
      "title": "Laufzeitherleitung MergeSort",
      "referenceAnswer":
        "Auf jeder Ebene des Baumes sind alle n Elemente vorhanden. Beim mischen m\u00fcssen also auf jeder Ebene insgesamt n Elemente wieder vermischt werden. Der Baum hat maximal log(n) Ebenen. Es m\u00fcssen also log(n) mal alle n Elemente gemischt werden.",
      "answersAnnotation": [
        {
          "text":
            "jede ebene des bin\u00e4rbaums entspricht einer aufteilung der menge, da der bin\u00e4rbaum n*logn tiefen (max) besitzt kann auch das array nicht \u00f6fter geteilt werden",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Auf jeder Ebene des Baumes sind alle n Elemente vorhanden. Beim mischen m\u00fcssen also auf jeder Ebene insgesamt n Elemente wieder vermischt werden. Der Baum hat maximal log(n) Ebenen. Es m\u00fcssen also log(n) mal alle n Elemente gemischt werden.",
          "id": "756c8bb0587e8f047fc555ff8a6379ac8af40d1e3ebcb178dcbe87d5"
        },
        {
          "text":
            "Auf jeder Ebene des Baumes sind alle n Elemente vorhanden. Beim mischen m\u00fcssen also auf jeder Ebene insgesamt n Elemente wieder vermischt werden. Der Baum hat maximal log(n) Ebenen. Es m\u00fcssen also log(n) mal alle n Elemente gemischt werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Da sich die Menge an zu sortierenden Elementen mit jedem Schritt halbiert.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "log(n) bezeichnet, wie h\u00e4ufig die Menge aufgeteilt werden muss, bis es auf den Vergliech von 2 Zahlen reduziert ist. n ergibt sich durch das Mischen.",
          "id": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text":
            "Die Datenmenge wird immer wieder durch 2 geteilt, also kann man sich den Ablauf von MergeSort in einem Bin\u00e4rbaum darstellen. Ein Bin\u00e4rbaum hat aber immer log(n) Ebenen. F\u00fcr die Laufzeit kommt noch das Zur\u00fcckgeben dazu, also liegt es insgesamt bei einer Laufzeit von O(n*log(n)).",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Weil der bin\u00e4rbaum h\u00f6chstens log(n)- Mal aufgeteilt werden muss um Mengen zu erreichen, die enifach sortiert werden k\u00f6nnen.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Der Mergesort halbiert immer die Menge der zu sortierenden Menge. Dies entspricht den beiden Kindern eines Knoten aus einem Baum. Ein Bin\u00e4rbaum besitzt h\u00f6chstens die Tiefe log(n) und dies kombiniert mit der Anzahl an Elementen ergibt die Laufzeitklasse O(n*log(n)).",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Jeder Knoten des Bin\u00e4rbaums hat wieder maximal 2 Kinder, deshalb hat er die Tiefe log(n) und man muss den Baum h\u00f6chstens n*log(n) mal durchlaufen.",
          "id": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text":
            "Tiefe ist maximal log(n) und daher m\u00fcssen maximal log(n) mal die n Elemente gemischt werden.",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil die Tiefe des Baumes log(n) ist und die Vergleiche n.",
          "id": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text":
            "man kann sich den bin\u00e4rbaum r\u00fcckw\u00e4rts\\/umgedreht vorstellen, dabei werden die ersten teil arrays gebildet und dann aufsteigend bis zur wurzel die restlichen",
          "id": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text":
            "Die Wurzel stellt die zu sortierende Menge dar, die Kinder die jeweiligen Teilmengen. Da der der Bin\u00e4rbaum eine Tiefe von log (n) hat, hat das Aufteilen der Mengen eine Laufzeit von log (n). Am Ende des MergeSort Algorithmus' wird die zusammengef\u00fcgte Menge noch ein letztes Mal sortiert, deshalb n * log (n).",
          "id": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "rrg",
          "id": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text":
            "Da das Array immer halbiert wird \u00e4hnelt es einem Bin\u00e4rbaum. Da ein Bin\u00e4rbaum die Tiefe log(n) hat, gilt das auch f\u00fcr wie oft wir unser Array aufteilen. F\u00fcr jeden Vater (davon gibt es log(n)-1) m\u00fcssen wir jetzt seine beiden Kinder mergen. Da wir immer nur den gr\u00f6\u00dferen vorderen Eintrag der beiden Kinder nehmen m\u00fcssen und wir in der Ebene eines Baumes so viele Eintr\u00e4ge haben wie die Eintr\u00e4ge im Ursprungsarray (n Eintr\u00e4ge) brauchen wir hierf\u00fcr h\u00f6chstens n Vergleiche. Da wir das f\u00fcr jede Ebene machen m\u00fcssen brauchen wir h\u00f6chstens n*log(n) Vergleiche. Daher O(n*log(n)).",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text":
            "Die kleinsten Teilmengen befinden sich in der Ebene log(n). Mergesort muss also n mal iterativ diese Ebene erreichen und die L\u00f6sungen rekombinieren.",
          "id": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text":
            "Weil ich n mal den Algorithmus aufrufen. Jedes mal hat eine Laufzeit von log n, da der Bin\u00e4rbaum log n ebenen besitzt",
          "id": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text":
            "bei jedem Aufruf halbieren wir die zu sortierende Menge, deslhalb O(logn), durch das vergleichen aller Elemente kommt das O(n)",
          "id": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Kann ich nicht",
          "id": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        }
      ]
    }
  ]
}
