{
  "questions": [
    {
      "text": "Was ist der konzeptuelle Unterschied zwischen dem Wert einer String Variablen und dem eines primitiven Datentyps?",
      "id": "50717",
      "title": "Wert von Objecten vs primitiven Datentypen",
      "type": "comparison",
      "aspects": [
        {
          "text": "Die Variable eines primitiven Datentyps speichert den Inhalt an sich"
        },
        {
          "text": "Die Variable eines Strings hat als Wert eine Referenz auf den eigentlichen Inhalt im Speicher"
        }
      ],
      "assignedWeights": {
        "Variable": 1,
        "primitiv": 2,
        "Datentyp": 2,
        "speichern": 4,
        "Inhalt": 5,
        "sich": 4,
        "String": 3,
        "haben": 2,
        "als": 2,
        "Wert": 4,
        "Referenz": 5,
        "auf": 4,
        "eigentlich": 3,
        "Speicher": 5
      },
      "referenceAnswers": [
        {
          "id": "ref1",
          "text": "Die Variable eines primitiven Datentyps speichert den Inhalt an sich. Die Variable eines Strings hat als Wert eine Referenz auf den eigentlichen Inhalt im Speicher.",
          "aspects": [
            {
              "text": "Die Variable eines primitiven Datentyps speichert den Inhalt an sich",
              "aIdx": 0,
              "elements": [
                [
                  0,
                  68
                ]
              ]
            },
            {
              "text": "Die Variable eines Strings hat als Wert eine Referenz auf den eigentlichen Inhalt im Speicher",
              "aIdx": 1,
              "elements": [
                [
                  70,
                  163
                ]
              ]
            }
          ]
        }
      ],
      "studentAnswers": [
        {
          "text": "stringvariablen sind zeichenketten, primitive datentypen sind zifernketten",
          "id": 0,
          "correctionOrComment": "Stringvariablen sind Zeichenketten, primitive Datentypen sind Ziffernketten",
          "answerCategory": "missconception",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "primitive Datendypen ben\u00f6tigen mmer gleich viel Speicherplatz. Bei Strings h\u00e4ngt das von der L\u00e4nge ab, Daher wird ihr Speicher dynamisch reserviert.",
          "id": 1,
          "correctionOrComment": "Primitive Datentypen ben\u00f6tigen immer gleich viel Speicherplatz. Bei Strings h\u00e4ngt das von der L\u00e4nge ab, Daher wird ihr Speicher dynamisch reserviert.",
          "answerCategory": "correct",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Wert eines Strings stellt lediglich eine Referenz dar.",
          "id": 2,
          "correctionOrComment": "Der Wert eines Strings stellt lediglich eine Referenz dar.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Der Wert eines Strings stellt lediglich eine Referenz dar",
              "elements": [
                [
                  0,
                  57
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "k",
          "id": 3,
          "correctionOrComment": "k",
          "answerCategory": "none",
          "aspects": [],
          "userId": "8a217ea5f39d0f20db42ef9bcb667eacd060a40b50a18655172ec4b8"
        },
        {
          "text": "Wert eines Strings ist seine Referenz, prim datentyp ist eine Bin\u00e4rzahl",
          "id": 4,
          "correctionOrComment": "Der Wert eines Strings ist seine Referenz, beim prim\u00e4ren Datentyp ist es eine Bin\u00e4rzahl",
          "answerCategory": "binary_correct",
          "aspects": [
            {
              "text": "beim prim\u00e4ren Datentyp ist es eine Bin\u00e4rzahl",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Der Wert eines Strings ist seine Referenz",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Auf Objekten k\u00f6nnen Operationen ausgef\u00fchrt werden. Auf primitiven Datentypen nicht.",
          "id": 5,
          "correctionOrComment": "Auf Objekten k\u00f6nnen Operationen ausgef\u00fchrt werden. Auf primitiven Datentypen nicht.",
          "answerCategory": "missconception",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Bei einfachen Datentypen wird direkt der Wert in einer Variable gespeichert, bei Objektvariablen wie Strings wird nur eine Referenz auf den eigentlichen String gespeichert.",
          "id": 6,
          "correctionOrComment": "Bei einfachen Datentypen wird direkt der Wert in einer Variable gespeichert. Bei Objektvariablen wie Strings wird nur eine Referenz auf den eigentlichen String gespeichert.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Bei einfachen Datentypen wird direkt der Wert in einer Variable gespeichert",
              "elements": [
                [
                  0,
                  75
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Bei Objektvariablen wie Strings wird nur eine Referenz auf den eigentlichen String gespeichert",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "primitiver Daten typ = call by value String = call by reference",
          "id": 7,
          "correctionOrComment": "primitiver Daten typ = call by value String = call by reference",
          "answerCategory": "missconception",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Strings werden durch Referenzen gespeichert.",
          "id": 8,
          "correctionOrComment": "Strings werden durch Referenzen gespeichert.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Strings werden durch Referenzen gespeichert",
              "elements": [
                [
                  0,
                  43
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "ea674ab55536a8b603be44d13510e32c7aab02088bf48c2802e4febd"
        },
        {
          "text": "Werden Strings verwendet, so werden nicht die Daten an sich aufgerufen, sondern deren Referenz. Bei primitiven Datentypen verwendet man die Daten an sich.",
          "id": 9,
          "correctionOrComment": "Werden Strings verwendet, so werden nicht die Daten an sich aufgerufen, sondern deren Referenz. Bei primitiven Datentypen verwendet man die Daten an sich.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Bei primitiven Datentypen verwendet man die Daten an sich",
              "elements": [
                [
                  96,
                  153
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Werden Strings verwendet, so werden nicht die Daten an sich aufgerufen, sondern deren Referenz",
              "elements": [
                [
                  0,
                  94
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "primitive Datentypen haben eine feste Gr\u00f6\u00dfe und k\u00f6nnen deshalb direkt gespeichert werden. String variablen hingegen haben keine festgelegte Gr\u00f6\u00dfe weshalb unklar ist wie viel Speicher man braucht. Deshalb wird in diesem Fall mit einem extra Speicherplatz gearbeitet, welcher mit einem Identifier versehen wird. In der variable selbst wird die Referenz zu diesem Speicherplatz gespeichert.",
          "id": 10,
          "correctionOrComment": "Primitive Datentypen haben eine feste Gr\u00f6\u00dfe und k\u00f6nnen deshalb direkt gespeichert werden. String variablen hingegen haben keine festgelegte Gr\u00f6\u00dfe weshalb unklar ist wie viel Speicher man braucht. Deshalb wird in diesem Fall mit einem extra Speicherplatz gearbeitet, welcher mit einem Identifier versehen wird. In der Variable selbst wird die Referenz zu diesem Speicherplatz gespeichert.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Primitive Datentypen haben eine feste Gr\u00f6\u00dfe und k\u00f6nnen deshalb direkt gespeichert werden",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "In der Variable selbst wird die Referenz zu diesem Speicherplatz gespeichert",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine String Variable enth\u00e4lt stets nur eine Referenz auf die Speicher, in der sich eine Zeichenkette befindet. Primitive Datentypen wie Integer enthalten deren Wert.",
          "id": 11,
          "correctionOrComment": "Eine String Variable enth\u00e4lt stets nur eine Referenz auf die Adresse im Speicher, in der sich eine Zeichenkette befindet. Primitive Datentypen wie Integer enthalten deren Wert.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Primitive Datentypen wie Integer enthalten deren Wert",
              "elements": [
                [
                  111,
                  164
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Eine String Variable enth\u00e4lt stets nur eine Referenz auf die Adresse im Speicher, in der sich eine Zeichenkette befindet",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Ein String stellt immer eine Zeichenkette dar.",
          "id": 12,
          "correctionOrComment": "Ein String stellt immer eine Zeichenkette dar.",
          "answerCategory": "irrelevant",
          "aspects": [],
          "userId": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Speicherplatzgr\u00f6\u00dfe Referenz",
          "id": 13,
          "correctionOrComment": "",
          "answerCategory": "partially_correct",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der String wird als Objekt angelegt, bei primitiven Datentypen ist dies nicht der Fall.",
          "id": 14,
          "correctionOrComment": "Der String wird als Objekt angelegt, bei primitiven Datentypen ist dies nicht der Fall.",
          "answerCategory": "partially_correct",
          "aspects": [],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Der Wert des Strings ist die Zuordnung im Speicher, nicht der Inhalt der Variable selbst.",
          "id": 15,
          "correctionOrComment": "Der Wert des Strings ist die Zuordnung im Speicher, nicht der Inhalt der Variable selbst.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Der Wert des Strings ist die Zuordnung im Speicher, nicht der Inhalt der Variable selbst",
              "elements": [
                [
                  0,
                  88
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "58b2aaa0bfae7acc021b3260e941117b529b2e69de878fd7d45c61a9"
        },
        {
          "text": "Strings werden mit Referenzen aufgerufen und primitive Datentypen mit ihrem Wert",
          "id": 16,
          "correctionOrComment": "Strings werden mit Referenzen aufgerufen und primitive Datentypen mit ihrem Wert",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": " primitive Datentypen mit ihrem Wert",
              "elements": [
                [
                  45,
                  80
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Strings werden mit Referenzen aufgerufen",
              "elements": [
                [
                  0,
                  40
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a"
        },
        {
          "text": "der Unterschied ist dass bei einem String mit Ketten von Zeichen oder Ziffern gearbeitet wird w\u00e4hrend bei primitiven Datentypen mit einzelnen Zahlen, Ziffern oder Zeichen gearbeitet wird",
          "id": 17,
          "correctionOrComment": "Der Unterschied ist, dass bei einem String mit Ketten von Zeichen oder Ziffern gearbeitet wird w\u00e4hrend bei primitiven Datentypen mit einzelnen Zahlen, Ziffern oder Zeichen gearbeitet wird",
          "answerCategory": "partially_correct",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Bei einem primitiven Datentypen wird bei der Initialisierung ein fester Speicherbereich daf\u00fcr angelegt. Bei Strings funktioniert das nicht, da diese keine festgelegte L\u00e4nge haben. Daher werden Strings mit Referenzen gespeichert. Es wird ein fester Speicherbereich angelegt, der lediglich die Referenz auf ein Stringobjekt speichert, welches allerdings woanders im Speicher liegt.",
          "id": 18,
          "correctionOrComment": "Bei einem primitiven Datentypen wird bei der Initialisierung ein fester Speicherbereich daf\u00fcr angelegt. Bei Strings funktioniert das nicht, da diese keine festgelegte L\u00e4nge haben. Daher werden Strings mit Referenzen gespeichert. Es wird ein fester Speicherbereich angelegt, der lediglich die Referenz auf ein Stringobjekt speichert, welches allerdings woanders im Speicher liegt.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Daher werden Strings mit Referenzen gespeichert",
              "elements": [
                [
                  180,
                  227
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "-",
          "id": 19,
          "correctionOrComment": "-",
          "answerCategory": "none",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Stings sind Arrays, also Listen von Chars",
          "id": 20,
          "correctionOrComment": "Stings sind Arrays, also Listen von Chars",
          "answerCategory": "irrelevant",
          "aspects": [],
          "userId": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Die String Variable speichert eine Referenz auf ein Objekt. Ein primitiver Datentyp wird nicht durch eine Referenz, sonder direkt gespeichert.",
          "id": 21,
          "correctionOrComment": "Die String Variable speichert eine Referenz auf ein Objekt. Ein primitiver Datentyp wird nicht durch eine Referenz, sonder direkt gespeichert.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Die String Variable speichert eine Referenz auf ein Objekt",
              "elements": [
                [
                  0,
                  58
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Ein primitiver Datentyp wird ;; direkt gespeichert",
              "elements": [
                [
                  60,
                  88
                ],
                [
                  123,
                  141
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Strings sind, im Gegensatz zu primitiven Datentypen, Objekte. Das hei\u00dft, sie speichern einen Wert bzw. Zeichenkette nicht direkt, sondern verweisen auf den Speicherplatz.",
          "id": 22,
          "correctionOrComment": "Strings sind, im Gegensatz zu primitiven Datentypen, Objekte. Das hei\u00dft, sie speichern einen Wert bzw. Zeichenkette nicht direkt, sondern verweisen auf den Speicherplatz.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "sie speichern einen Wert bzw. Zeichenkette nicht direkt, sondern verweisen auf den Speicherplatz",
              "elements": [
                [
                  73,
                  169
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Eine String Variable ist ein Objekt und speichert nicht die Daten selber sondern die Referenz auf die Daten.",
          "id": 23,
          "correctionOrComment": "Eine String Variable ist ein Objekt und speichert nicht die Daten selber sondern die Referenz auf die Daten.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Eine String Variable ist ein Objekt und speichert nicht die Daten selber sondern die Referenz auf die Daten",
              "elements": [
                [
                  0,
                  107
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein String ist eine eigene Klasse mit Attributen und Methoden und nutzt zum speichern der Informationen selbst primitive datatypes. Ein primitive datatype hat keine Methoden, sondern stellt selbst direkt seinen Wert dar. Zudem ist in Java ein Array kein primitive datatype, da diese in eine wrapper-class mit dessen L\u00e4nge eingebettet ist - anders als in C++, wo bei einem Array nur die primitive datatypes hintereinander im Speicher abgelegt werden.",
          "id": 24,
          "correctionOrComment": "Ein String ist eine eigene Klasse mit Attributen und Methoden und nutzt zum speichern der Informationen selbst primitive datatypes. Ein primitiver Datatype hat keine Methoden, sondern stellt selbst direkt seinen Wert dar. Zudem ist in Java ein Array kein primitive datatype, da diese in eine wrapper-class mit dessen L\u00e4nge eingebettet ist - anders als in C++, wo bei einem Array nur die primitive datatypes hintereinander im Speicher abgelegt werden.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein primitiver Datatype ;; stellt selbst direkt seinen Wert dar",
              "elements": [
                [
                  183,
                  219
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "ein String wird als Objekt im Speicher gespeichert, es wird nur mit einer referenz auf ihn verwiesen nicht mit dem Inhalt selbst gerechnet",
          "id": 25,
          "correctionOrComment": "Ein String wird als Objekt im Speicher gespeichert, es wird nur mit einer referenz auf ihn verwiesen nicht mit dem Inhalt selbst gerechnet",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein String wird als Objekt im Speicher gespeichert, es wird nur mit einer referenz auf ihn verwiesen",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "Ein String ist eine Verkettung verschiedener Zeichen, ein primitiver Datentyp hat nur einen Wert",
          "id": 26,
          "correctionOrComment": "Ein String ist eine Verkettung verschiedener Zeichen, ein primitiver Datentyp hat nur einen Wert",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "ein primitiver Datentyp hat nur einen Wert",
              "elements": [
                [
                  54,
                  96
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "jijijij",
          "id": 27,
          "correctionOrComment": "jijijij",
          "answerCategory": "none",
          "aspects": [],
          "userId": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Strings sind Objekte mit bestimmten Attributen und Operationen.",
          "id": 28,
          "correctionOrComment": "Strings sind Objekte mit bestimmten Attributen und Operationen.",
          "answerCategory": "irrelevant",
          "aspects": [],
          "userId": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Strings sind objektorientiert.",
          "id": 29,
          "correctionOrComment": "Strings sind objektorientiert.",
          "answerCategory": "irrelevant",
          "aspects": [],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Der Wert einer String variable wird in einem seperaten Speicherplatz verwaltet und der String selbst speichert nur die Referenz auf diesen Speicherplatz",
          "id": 30,
          "correctionOrComment": "Der Wert einer String Variable wird in einem seperaten Speicherplatz verwaltet und der String selbst speichert nur die Referenz auf diesen Speicherplatz",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Der Wert einer String Variable wird in einem seperaten Speicherplatz verwaltet und der String selbst speichert nur die Referenz auf diesen Speicherplatz",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der String speichert nur die Referenz auf den Wert, in einem primitiven Datentypen ist der Wert direkt gespeichert.",
          "id": 31,
          "correctionOrComment": "Der String speichert nur die Referenz auf den Wert, in einem primitiven Datentypen ist der Wert direkt gespeichert.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "in einem primitiven Datentypen ist der Wert direkt gespeichert",
              "elements": [
                [
                  52,
                  114
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Der String speichert nur die Referenz auf den Wert",
              "elements": [
                [
                  0,
                  50
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Bei primitiven Datentypen wird der Wert direkt in dem Datentypen gespeichert. Springs werden in Referenzen gespeichert, die auf den String verweisen.",
          "id": 32,
          "correctionOrComment": "Bei primitiven Datentypen wird der Wert direkt in dem Datentypen gespeichert. Strings werden in Referenzen gespeichert, die auf den String verweisen.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Bei primitiven Datentypen wird der Wert direkt in dem Datentypen gespeichert",
              "elements": [
                [
                  0,
                  76
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": " Strings werden in Referenzen gespeichert, die auf den String verweisen",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Eine String Variable verweist nur auf auf ein Objekt.",
          "id": 33,
          "correctionOrComment": "Eine String Variable verweist nur auf auf ein Objekt.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Eine String Variable verweist nur auf auf ein Objekt",
              "elements": [
                [
                  0,
                  52
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Werte von Strings werden als Referenzen gespeichert (call-by-reference), Werte von Datentypen als einzelne Werte (call-by-value).",
          "id": 34,
          "correctionOrComment": "Werte von Strings werden als Referenzen gespeichert (call-by-reference), Werte von Datentypen als einzelne Werte (call-by-value).",
          "answerCategory": "binary_correct",
          "aspects": [
            {
              "text": "Werte von Datentypen als einzelne Werte",
              "elements": [
                [
                  73,
                  112
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Werte von Strings werden als Referenzen gespeichert ",
              "elements": [
                [
                  0,
                  51
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "Die String variable ist eine Referenz auf einen im Speicher stehenden Wertes.",
          "id": 35,
          "correctionOrComment": "Die String Variable ist eine Referenz auf einen im Speicher stehenden Wert.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Die String Variable ist eine Referenz auf einen im Speicher stehenden Wert",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "x",
          "id": 36,
          "correctionOrComment": "x",
          "answerCategory": "none",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die String Variable speichert eine Referenz auf den Wert, primitive Datentypen speichern den Wert an sich.",
          "id": 37,
          "correctionOrComment": "Die String Variable speichert eine Referenz auf den Wert, primitive Datentypen speichern den Wert an sich.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "primitive Datentypen speichern den Wert an sich",
              "elements": [
                [
                  58,
                  105
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Die String Variable speichert eine Referenz auf den Wert",
              "elements": [
                [
                  0,
                  56
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Wert zeigt auf die Referenz",
          "id": 38,
          "correctionOrComment": "Der Wert zeigt auf die Referenz",
          "answerCategory": "irrelevant",
          "aspects": [
            {
              "text": "Der Wert zeigt auf die Referenz",
              "elements": [],
              "aIdx": 1,
              "label": 2
            }
          ],
          "userId": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Primitive Datentypen speichern den Wert selbst, Strings sind Objekte und enthalten eine Referenz auf das eigentliche Objekt",
          "id": 39,
          "correctionOrComment": "Primitive Datentypen speichern den Wert selbst, Strings sind Objekte und enthalten eine Referenz auf das eigentliche Objekt",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Primitive Datentypen speichern den Wert selbst",
              "elements": [
                [
                  0,
                  46
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Strings sind Objekte und enthalten eine Referenz auf das eigentliche Objekt",
              "elements": [
                [
                  48,
                  123
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Strings speichern Referenz zu Objekt",
          "id": 40,
          "correctionOrComment": "Strings speichern die Referenz zum Objekt",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Strings speichern die Referenz zum Objekt",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Bei primitven Datentypen werden die Werte direkt in dem reservierten Speicherplatz gespeichert, beim String wird eine Referenz auf einen Speicherplatz gespeichert, in dem dann wirklich die Daten stehen.",
          "id": 41,
          "correctionOrComment": "Bei primitven Datentypen werden die Werte direkt in dem reservierten Speicherplatz gespeichert, beim String wird eine Referenz auf einen Speicherplatz gespeichert, in dem dann wirklich die Daten stehen.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Bei primitven Datentypen werden die Werte direkt in dem reservierten Speicherplatz gespeichert",
              "elements": [
                [
                  0,
                  94
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "beim String wird eine Referenz auf einen Speicherplatz gespeichert, in dem dann wirklich die Daten stehen",
              "elements": [
                [
                  96,
                  201
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Speicherplatz",
          "id": 42,
          "correctionOrComment": "Speicherplatz",
          "answerCategory": "irrelevant",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was passiert bei der Anweisung new String()?",
      "id": "50721",
      "title": "Keyword 'new'",
      "type": "procedure",
      "aspects": [
        {
          "text": "Das Keyword 'new' erzeugt einen leeren String im Speicher"
        },
        {
          "text": "Eine Referenz auf den erzeugten Sting wird zur\u00fcckgegeben"
        }
      ],
      "assignedWeights": {
        "Keyword": 3,
        "'new'": 1,
        "erzeugen": 4,
        "leer": 5,
        "String": 3,
        "Speicher": 5,
        "geben": 4,
        "anschlie\u00dfend": 3,
        "Referenz": 5,
        "zur\u00fcck": 4
      },
      "referenceAnswers": [
        {
          "id": "ref1",
          "text": "Das Keyword 'new' erzeugt einen leeren String im Speicher und gibt anschlie\u00dfend die Referenz auf diesen String zur\u00fcck.",
          "aspects": [
            {
              "text": "Das Keyword 'new' erzeugt einen leeren String im Speicher",
              "aIdx": 0,
              "elements": [
                [
                  0,
                  57
                ]
              ]
            },
            {
              "text": "und gibt anschlie\u00dfend die Referenz auf diesen String zur\u00fcck",
              "aIdx": 1,
              "elements": [
                [
                  58,
                  117
                ]
              ]
            }
          ]
        }
      ],
      "studentAnswers": [
        {
          "text": "Es wird eine neue Referenz erstellt",
          "id": 0,
          "correctionOrComment": "Es wird eine neue Referenz erstellt",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es wird eine neue Referenz erstellt",
              "elements": [
                [
                  0,
                  35
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Mit der Anweisung new String() wird ein neuer Speicherort f\u00fcr einen neuen String angelegt.",
          "id": 1,
          "correctionOrComment": "Mit der Anweisung new String() wird ein neuer Speicherort f\u00fcr einen neuen String angelegt.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Mit der Anweisung new String() wird ein neuer Speicherort f\u00fcr einen neuen String angelegt.",
              "elements": [
                [
                  0,
                  90
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "8bbd52208353c14f154f1402cebf5829afb1708d06b5dc25064dff23"
        },
        {
          "text": "Ein String wird neu in einer Referenz gespeichert.",
          "id": 2,
          "correctionOrComment": "Ein String wird neu in einer Referenz gespeichert.",
          "answerCategory": "binary_correct",
          "aspects": [
            {
              "text": "Ein String wird neu in einer Referenz gespeichert",
              "elements": [
                [
                  0,
                  49
                ]
              ],
              "aIdx": 0,
              "label": 2
            }
          ],
          "userId": "4cfc3a1811fe40afa401b25ef7fa0379f1f7c1930a04f8755d678474"
        },
        {
          "text": "Es wird ein neuer String (Objekt) mit dem \u00fcbergebenen Inhalt erzeugt.",
          "id": 3,
          "correctionOrComment": "Es wird ein neuer String (Objekt) mit dem \u00fcbergebenen Inhalt erzeugt.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es wird ein neuer String (Objekt) mit dem \u00fcbergebenen Inhalt erzeugt",
              "elements": [
                [
                  0,
                  68
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "bei new String() wird ein neuer String erstellt, versehen mit der referenz und einer 0",
          "id": 4,
          "correctionOrComment": "Bei new String() wird ein neuer String erstellt, versehen mit der referenz und einer 0",
          "answerCategory": "missconception",
          "aspects": [
            {
              "text": "Bei new String() wird ein neuer String erstellt, versehen mit der referenz und einer 0",
              "elements": [],
              "aIdx": 0,
              "label": 2
            }
          ],
          "userId": "8a217ea5f39d0f20db42ef9bcb667eacd060a40b50a18655172ec4b8"
        },
        {
          "text": "Es wird ein inhaltsloser String erstellt, also nur eine Referenz f\u00fcr den String. Der Inhalt ist dann null.",
          "id": 5,
          "correctionOrComment": "Es wird ein inhaltsloser String erstellt, also nur eine Referenz f\u00fcr den String. Der Inhalt ist dann null.",
          "answerCategory": "missconception",
          "aspects": [
            {
              "text": "Der Inhalt ist dann null",
              "elements": [
                [
                  81,
                  105
                ]
              ],
              "aIdx": 0,
              "label": 2
            },
            {
              "text": "Es wird ein inhaltsloser String erstellt, also nur eine Referenz f\u00fcr den String",
              "elements": [
                [
                  0,
                  79
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird ein neues Objekt erzeugt.",
          "id": 6,
          "correctionOrComment": "Es wird ein neues Objekt erzeugt.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es wird ein neues Objekt erzeugt",
              "elements": [
                [
                  0,
                  32
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein neues Objekt der Klasse String wird angelegt.",
          "id": 7,
          "correctionOrComment": "Ein neues Objekt der Klasse String wird angelegt.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein neues Objekt der Klasse String wird angelegt",
              "elements": [
                [
                  0,
                  48
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "1e2c3eb4744dbc36de4e827f187dd2a073d91b8790a2ff117694dd7b"
        },
        {
          "text": "ein neues objekt vom typ string wird instanziert",
          "id": 8,
          "correctionOrComment": "Ein neues Objekt vom Typ String wird instanziert",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein neues Objekt vom Typ String wird instanziert",
              "elements": [],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Es wird ein neues Objekt des Typs String erstellt.",
          "id": 9,
          "correctionOrComment": "Es wird ein neues Objekt des Typs String erstellt.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es wird ein neues Objekt des Typs String erstellt",
              "elements": [
                [
                  0,
                  49
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine neue Referenz f\u00fcr einen String wird erstellt und in dieser kann dann ein String zugewiesen werden.",
          "id": 10,
          "correctionOrComment": "Eine neue Referenz f\u00fcr einen String wird erstellt und dieser kann dann ein String zugewiesen werden.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "dieser kann dann ein String zugewiesen werden",
              "elements": [
                [
                  57,
                  102
                ]
              ],
              "aIdx": 0,
              "label": 2
            },
            {
              "text": "Eine neue Referenz f\u00fcr einen String wird erstellt",
              "elements": [
                [
                  0,
                  49
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "ein neuer leerer String wird erstellt und seine Referenz wird zur\u00fcck gegeben",
          "id": 11,
          "correctionOrComment": "Ein neuer leerer String wird erstellt und seine Referenz wird zur\u00fcck gegeben",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Ein neuer leerer String wird erstellt",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "seine Referenz wird zur\u00fcck gegeben",
              "elements": [
                [
                  42,
                  76
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird eine Referenz angelegt, die momentan auf nichts zeigt. Also null ist.",
          "id": 12,
          "correctionOrComment": "Es wird eine Referenz angelegt, die momentan auf nichts zeigt. Also null ist.",
          "answerCategory": "missconception",
          "aspects": [
            {
              "text": "die momentan auf nichts zeigt. Also null ist",
              "elements": [
                [
                  32,
                  76
                ]
              ],
              "aIdx": 0,
              "label": 2
            },
            {
              "text": "Es wird eine Referenz angelegt",
              "elements": [
                [
                  0,
                  30
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "userId": "ea674ab55536a8b603be44d13510e32c7aab02088bf48c2802e4febd"
        },
        {
          "text": "Es wird ein neues Objekt der Klasse String erstellt. Dieses ist leer.",
          "id": 13,
          "correctionOrComment": "Es wird ein neues Objekt der Klasse String erstellt. Dieses ist leer.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es wird ein neues Objekt der Klasse String erstellt. Dieses ist leer",
              "elements": [
                [
                  0,
                  68
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Eine neue Variable f\u00fcr einen String wird angelegt. Sie enth\u00e4lt zun\u00e4chst die Referenz NUL",
          "id": 14,
          "correctionOrComment": "Eine neue Variable f\u00fcr einen String wird angelegt. Sie enth\u00e4lt zun\u00e4chst die Referenz null",
          "answerCategory": "missconception",
          "aspects": [
            {
              "text": "Sie enth\u00e4lt zun\u00e4chst die Referenz null",
              "elements": [],
              "aIdx": 1,
              "label": 2
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird ein neuer String angelegt",
          "id": 15,
          "correctionOrComment": "Es wird ein neuer String angelegt",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es wird ein neuer String angelegt",
              "elements": [
                [
                  0,
                  33
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird ein neuer String erschaffen.",
          "id": 16,
          "correctionOrComment": "Es wird ein neuer String erschaffen.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es wird ein neuer String erschaffen",
              "elements": [
                [
                  0,
                  35
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine neue leere Zeichenkette wird gespeichert und die Variable wird auf sie zeigen,",
          "id": 17,
          "correctionOrComment": "Eine neue leere Zeichenkette wird gespeichert und die Variable wird auf sie zeigen,",
          "answerCategory": "binary_correct",
          "aspects": [
            {
              "text": "Eine neue leere Zeichenkette wird gespeichert ",
              "elements": [
                [
                  0,
                  45
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "die Variable wird auf sie zeigen",
              "elements": [
                [
                  50,
                  82
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "userId": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Ein neuer, noch leerer String wird erstellt (und eine neue Referenz).",
          "id": 18,
          "correctionOrComment": "Ein neuer, noch leerer String wird erstellt und eine neue Referenz.",
          "answerCategory": "binary_correct",
          "aspects": [
            {
              "text": "Ein neuer, noch leerer String wird erstellt",
              "elements": [
                [
                  0,
                  43
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "und eine neue Referenz",
              "elements": [
                [
                  45,
                  67
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "userId": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "es wird nicht \u00fcberpr\u00fcft ob es schon einen string mit dem gleichen inhalt gibt, sondern ein neuer speicher mit einer neuen Referenz f\u00fcr den String erstellt.",
          "id": 19,
          "correctionOrComment": "Es wird nicht \u00fcberpr\u00fcft ob es schon einen String mit dem gleichen inhalt gibt, sondern ein neuer Speicher mit einer neuen Referenz f\u00fcr den String erstellt.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es wird nicht \u00fcberpr\u00fcft ob es schon einen String mit dem gleichen inhalt gibt, sondern ein neuer speicher ;; erstellt",
              "elements": [
                [
                  146,
                  154
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "Es wird ;;  ein neuer Speicher mit einer neuen Referenz ;: erstellt",
              "elements": [],
              "aIdx": 1,
              "label": 1
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein neuer leerer String wird initialisiert.",
          "id": 20,
          "correctionOrComment": "Ein neuer leerer String wird initialisiert.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein neuer leerer String wird initialisiert",
              "elements": [
                [
                  0,
                  42
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Ein neues Objekt des Typs String wird erzeugt.",
          "id": 21,
          "correctionOrComment": "Ein neues Objekt des Typs String wird erzeugt.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein neues Objekt des Typs String wird erzeugt",
              "elements": [
                [
                  0,
                  45
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "58b2aaa0bfae7acc021b3260e941117b529b2e69de878fd7d45c61a9"
        },
        {
          "text": "Ein neuer leerer String wird angelegt",
          "id": 22,
          "correctionOrComment": "Ein neuer leerer String wird angelegt",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein neuer leerer String wird angelegt",
              "elements": [
                [
                  0,
                  37
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a"
        },
        {
          "text": "neuer speicherplatz wird angelegt und konstruktor von der klasse string wird ausgef\u00fchrt",
          "id": 23,
          "correctionOrComment": "Neuer speicherplatz wird angelegt und  der Konstruktor von der Klasse String wird ausgef\u00fchrt",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Neuer speicherplatz wird angelegt und  der Konstruktor von der Klasse String wird ausgef\u00fchrt",
              "elements": [],
              "aIdx": 0,
              "label": 1
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "es wird ein neuer String angelegt mit der Referenz null da dem String noch kein Wert zugewiesen wurde",
          "id": 24,
          "correctionOrComment": "Es wird ein neuer String angelegt mit der Referenz null da dem String noch kein Wert zugewiesen wurde",
          "answerCategory": "missconception",
          "aspects": [
            {
              "text": "Es wird ein neuer String angelegt",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "mit der Referenz null da dem String noch kein Wert zugewiesen wurde",
              "elements": [
                [
                  34,
                  101
                ]
              ],
              "aIdx": 1,
              "label": 2
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein neues Stringobjekt wird angelegt. Wenn nicht direkt ein bestimmter Inhalt zugewiesen wird, existiert nur die Referenz die auf Null zeigt.",
          "id": 25,
          "correctionOrComment": "Ein neues Stringobjekt wird angelegt. Wenn nicht direkt ein bestimmter Inhalt zugewiesen wird, existiert nur die Referenz die auf Null zeigt.",
          "answerCategory": "missconception",
          "aspects": [
            {
              "text": "Ein neues Stringobjekt wird angelegt",
              "elements": [
                [
                  0,
                  36
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Wenn nicht direkt ein bestimmter Inhalt zugewiesen wird, existiert nur die Referenz die auf Null zeigt",
              "elements": [
                [
                  38,
                  140
                ]
              ],
              "aIdx": 1,
              "label": 2
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein neuer, leerer String wird initalisiert.",
          "id": 26,
          "correctionOrComment": "Ein neuer, leerer String wird initalisiert.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein neuer, leerer String wird initalisiert",
              "elements": [
                [
                  0,
                  42
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Neues Objekt erstellt auf das referenziert wird",
          "id": 27,
          "correctionOrComment": "Es wird ein neues Objekt erstellt auf das referenziert wird",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es wird ein neues Objekt erstellt",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "auf das referenziert wird",
              "elements": [
                [
                  22,
                  47
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird eine neue String Operation erstellt",
          "id": 28,
          "correctionOrComment": "Es wird eine neue String Operation erstellt",
          "answerCategory": "missconception",
          "aspects": [
            {
              "text": "Es wird eine neue String Operation erstellt",
              "elements": [
                [
                  0,
                  43
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "userId": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Es wird ein leerer String erzeugt, dessen Referenz keine von schon vorhandenen Strings ist.",
          "id": 29,
          "correctionOrComment": "Es wird ein leerer String erzeugt, dessen Referenz keine von schon vorhandenen Strings ist.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es wird ein leerer String erzeugt",
              "elements": [
                [
                  0,
                  33
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "dessen Referenz keine von schon vorhandenen Strings ist",
              "elements": [
                [
                  35,
                  90
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird ein neues Objekt vom Typ String erstellt.",
          "id": 30,
          "correctionOrComment": "Es wird ein neues Objekt vom Typ String erstellt.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es wird ein neues Objekt vom Typ String erstellt",
              "elements": [
                [
                  0,
                  48
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Es wird im Speicher Platz f\u00fcr einen neuen String erstellt.",
          "id": 31,
          "correctionOrComment": "Es wird im Speicher Platz f\u00fcr einen neuen String erstellt.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es wird im Speicher Platz f\u00fcr einen neuen String erstellt",
              "elements": [
                [
                  0,
                  57
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird intern ein Pointer auf eine neue Instanz der string-class erstellt. In Java wird einfach ein neues Objekt erzeugt.",
          "id": 32,
          "correctionOrComment": "Es wird intern ein Pointer auf eine neue Instanz der String Klasse erstellt. In Java wird einfach ein neues Objekt erzeugt.",
          "answerCategory": "binary_correct",
          "aspects": [
            {
              "text": "Es wird ;; eine neue Instanz der String Klasse erstellt",
              "elements": [
                [
                  0,
                  7
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Es wird intern ein Pointer auf eine neue Instanz der String Klasse erstellt",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Es wird eine neue leere Zeichenkette erstellt",
          "id": 33,
          "correctionOrComment": "Es wird eine neue leere Zeichenkette erstellt",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es wird eine neue leere Zeichenkette erstellt",
              "elements": [
                [
                  0,
                  45
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "neuer speicherbereich wird angelegt",
          "id": 34,
          "correctionOrComment": "Ein neuer Speicherbereich wird angelegt",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein neuer Speicherbereich wird angelegt",
              "elements": [],
              "aIdx": 0,
              "label": 1
            }
          ],
          "userId": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "jojiji",
          "id": 35,
          "correctionOrComment": "jojiji",
          "answerCategory": "none",
          "aspects": [],
          "userId": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Es wird eine neue Referenz erzeugt.",
          "id": 36,
          "correctionOrComment": "Es wird eine neue Referenz erzeugt.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es wird eine neue Referenz erzeugt",
              "elements": [
                [
                  0,
                  34
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Dem String wird ein (leerer) Speicherbereich zugewiesen\\/ eine Referenz auf diesen Bereich.",
          "id": 37,
          "correctionOrComment": "Dem String wird ein leerer Speicherbereich zugewiesen und eine Referenz auf diesen Bereich wird erstellt.",
          "answerCategory": "binary_correct",
          "aspects": [
            {
              "text": "Dem String wird ein leerer Speicherbereich zugewiesen",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "nd eine Referenz auf diesen Bereich wird erstellt",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Ein neues Objekt der Klasse string wird erstellt",
          "id": 38,
          "correctionOrComment": "Ein neues Objekt der Klasse String wird erstellt",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein neues Objekt der Klasse String wird erstellt",
              "elements": [],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Ein neuer String wird initialisiert.",
          "id": 39,
          "correctionOrComment": "Ein neuer String wird initialisiert.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein neuer String wird initialisiert",
              "elements": [
                [
                  0,
                  35
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein neuer String mit neuer Referenz wird angelegt.",
          "id": 40,
          "correctionOrComment": "Ein neuer String mit neuer Referenz wird angelegt.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein neuer String mit neuer Referenz wird angelegt",
              "elements": [
                [
                  0,
                  49
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Ein neuer String mit neuer Referenz wird angelegt",
              "elements": [
                [
                  0,
                  49
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "es wird ein neuer Leerer String erstellt und somit schon mal die Adresse im Speicher reserviert",
          "id": 41,
          "correctionOrComment": "Es wird ein neuer Leerer String erstellt und somit schon mal die Adresse im Speicher reserviert",
          "answerCategory": "binary_correct",
          "aspects": [
            {
              "text": "Es wird ein neuer Leerer String erstellt",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "und somit schon mal die Adresse im Speicher reserviert",
              "elements": [
                [
                  41,
                  95
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "ein neuer String wird erstellt (neue referenz)",
          "id": 42,
          "correctionOrComment": "Ein neuer String wird erstellt mit neuer Referenz",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein neuer String wird erstellt",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Ein neuer String wird erstellt mit neuer Referenz",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird ein neuer leerer String im Speicher erstellt. Anschlie\u00dfend zeigt die Variable auf diesen Speicherplatz.",
          "id": 43,
          "correctionOrComment": "Es wird ein neuer leerer String im Speicher erstellt. Anschlie\u00dfend zeigt die Variable auf diesen Speicherplatz.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Es wird ein neuer leerer String im Speicher erstellt",
              "elements": [
                [
                  0,
                  52
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Anschlie\u00dfend zeigt die Variable auf diesen Speicherplatz",
              "elements": [
                [
                  54,
                  110
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Es wird ein neuer Speicherplatz angelegt, auf den der String verweist, wessen Referenz gespeichert wird.",
          "id": 44,
          "correctionOrComment": "Es wird ein neuer Speicherplatz angelegt, auf den der String verweist, wessen Referenz gespeichert wird.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Es wird ein neuer Speicherplatz angelegt, auf den der String verweist",
              "elements": [
                [
                  0,
                  69
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "wessen Referenz gespeichert wird",
              "elements": [
                [
                  71,
                  103
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein neuer leerer String wird erstellt und eine Referenz die darauf zeigt wird gespeichert",
          "id": 45,
          "correctionOrComment": "Ein neuer leerer String wird erstellt und eine Referenz die darauf zeigt wird gespeichert",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Ein neuer leerer String wird erstellt ",
              "elements": [
                [
                  0,
                  37
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "und eine Referenz die darauf zeigt wird gespeichert",
              "elements": [
                [
                  38,
                  89
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein neuer String wird angelegt.",
          "id": 46,
          "correctionOrComment": "Ein neuer String wird angelegt.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein neuer String wird angelegt",
              "elements": [
                [
                  0,
                  30
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "ein neuer leerer String wird erstellt, die Referanz zeigt auf Inhalt im Speicher",
          "id": 47,
          "correctionOrComment": "Ein neuer leerer String wird erstellt, die Referanz zeigt auf dessen Inhalt im Speicher",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Ein neuer leerer String wird erstellt,",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "die Referanz zeigt auf dessen Inhalt im Speicher",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "eine neue Referenz wird erschaffen",
          "id": 48,
          "correctionOrComment": "Eine neue Referenz wird erschaffen",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Eine neue Referenz wird erschaffen",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was ist ein Array?",
      "id": "50722",
      "title": "Datenstruktur Array",
      "type": "definition",
      "aspects": [
        {
          "text": "eine Datenstruktur fester Gr\u00f6\u00dfe"
        },
        {
          "text": "enh\u00e4lt eine Sequenz von Variablen"
        },
        {
          "text": "alle Variablen m\u00fcssen den gleichen Typ haben"
        }
      ],
      "assignedWeights": {
        "sein": 2,
        "Datenstruktur": 4,
        "fest": 5,
        "Gr\u00f6\u00dfe": 5,
        "Sequenz": 4,
        "Daten": 3,
        "gleich": 5,
        "Typ": 5,
        "enthalten": 4
      },
      "referenceAnswers": [
        {
          "id": "ref1",
          "text": "Ein Array ist eine Datenstruktur fester Gr\u00f6\u00dfe, die eine Sequenz von Daten gleichen Typs enth\u00e4lt.",
          "aspects": [
            {
              "text": "Ein Array ist eine Datenstruktur fester Gr\u00f6\u00dfe",
              "aIdx": 0,
              "elements": [
                [
                  0,
                  45
                ]
              ]
            },
            {
              "text": "die eine Sequenz von Variablen ;; enth\u00e4lt",
              "aIdx": 1,
              "elements": [
                [
                  47,
                  73
                ],
                [
                  88,
                  95
                ]
              ]
            },
            {
              "text": "die ;; Variablen gleichen Typs enth\u00e4lt",
              "aIdx": 2,
              "elements": [
                [
                  47,
                  50
                ],
                [
                  68,
                  95
                ]
              ]
            }
          ]
        }
      ],
      "studentAnswers": [
        {
          "text": "ein array ist ein Feld in dem Daten gespeichert werden",
          "id": 0,
          "correctionOrComment": "Ein Array ist ein Feld in dem Daten gespeichert werden",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ist ein Feld in dem Daten gespeichert werden",
              "elements": [],
              "aIdx": 0,
              "label": 1
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Array dient zur Speicherung mehrerer Elemente eines bestimmten Datentyps. Seine L\u00e4nge ist konstant und wird bei seiner Erstellung festgelegt. Arrays k\u00f6nnen auch andere Arrays enthalten, dabei spricht man von mehrdimensionalen Arrays.",
          "id": 1,
          "correctionOrComment": "Ein Array dient zur Speicherung mehrerer Elemente eines bestimmten Datentyps. Seine L\u00e4nge ist konstant und wird bei seiner Erstellung festgelegt. Arrays k\u00f6nnen auch andere Arrays enthalten, dabei spricht man von mehrdimensionalen Arrays.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Seine L\u00e4nge ist konstant und wird bei seiner Erstellung festgelegt",
              "elements": [
                [
                  78,
                  144
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Ein Array dient zur Speicherung mehrerer Elemente eines bestimmten Datentyps",
              "elements": [
                [
                  0,
                  76
                ]
              ],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "8bbd52208353c14f154f1402cebf5829afb1708d06b5dc25064dff23"
        },
        {
          "text": "Ein Array ist ein Datentyp, der zur Speicherung und Verwendung mehrerer Werte eines Typs dient.",
          "id": 2,
          "correctionOrComment": "Ein Array ist ein Datentyp, der zur Speicherung und Verwendung mehrerer Werte eines Typs dient.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ist ein Datentyp, der zur Speicherung und Verwendung mehrerer Werte eines Typs dient",
              "elements": [
                [
                  0,
                  94
                ]
              ],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "4cfc3a1811fe40afa401b25ef7fa0379f1f7c1930a04f8755d678474"
        },
        {
          "text": "Ein Feld von Daten des gleichen Typs. Die Elemente folgen unmittelbar aufeinander und k\u00f6nnen \u00fcber einen Index adressiert werden.",
          "id": 3,
          "correctionOrComment": "Ein Feld von Daten des gleichen Typs. Die Elemente folgen unmittelbar aufeinander und k\u00f6nnen \u00fcber einen Index adressiert werden.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": " Die Elemente folgen unmittelbar aufeinander und k\u00f6nnen \u00fcber einen Index adressiert werden",
              "elements": [
                [
                  38,
                  127
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Ein Feld von Daten des gleichen Typs",
              "elements": [
                [
                  0,
                  36
                ]
              ],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "In einem array k\u00f6nnen Werte gespeichert werden er kann auch mehrdemensional sein",
          "id": 4,
          "correctionOrComment": "In einem array k\u00f6nnen Werte gespeichert werden er kann auch mehrdemensional sein",
          "answerCategory": "partially_correct",
          "aspects": [],
          "userId": "8a217ea5f39d0f20db42ef9bcb667eacd060a40b50a18655172ec4b8"
        },
        {
          "text": "Ein Array ist ein Objekt, welches eine Reihe von Elementen beinhalten kann. Bei bestimmten Datentypen-Arrays k\u00f6nnen nur Elemente dieses Datentyps enthalten sein.",
          "id": 5,
          "correctionOrComment": "Ein Array ist ein Objekt, welches eine Reihe von Elementen beinhalten kann. Bei bestimmten Datentypen-Arrays k\u00f6nnen nur Elemente dieses Datentyps enthalten sein.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ist ein Objekt, welches eine Reihe von Elementen beinhalten kann",
              "elements": [
                [
                  0,
                  74
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Bei bestimmten Datentypen-Arrays k\u00f6nnen nur Elemente dieses Datentyps enthalten sein",
              "elements": [
                [
                  76,
                  160
                ]
              ],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Array kann Daten eines gleichen Typs speichern. Die L\u00e4nge eines Arrays ist fest. Die Daten k\u00f6nnen durch einen Index aufgerufen werden.",
          "id": 6,
          "correctionOrComment": "Ein Array kann Daten eines gleichen Typs speichern. Die L\u00e4nge eines Arrays ist fest. Die Daten k\u00f6nnen durch einen Index aufgerufen werden.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Die L\u00e4nge eines Arrays ist fest",
              "elements": [
                [
                  52,
                  83
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Die Daten k\u00f6nnen durch einen Index aufgerufen werden",
              "elements": [
                [
                  85,
                  137
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Ein Array kann Daten eines gleichen Typs speichern",
              "elements": [
                [
                  0,
                  50
                ]
              ],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "k",
          "id": 7,
          "correctionOrComment": "k",
          "answerCategory": "none",
          "aspects": [],
          "userId": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Ist eine Gruppe von Objekten mit denselben Attributen.",
          "id": 8,
          "correctionOrComment": "Ist eine Gruppe von Objekten mit denselben Attributen.",
          "answerCategory": "missconception",
          "aspects": [
            {
              "text": "Ist eine Gruppe von Objekten mit denselben Attributen",
              "elements": [
                [
                  0,
                  53
                ]
              ],
              "aIdx": 2,
              "label": 1
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Array ist ein Objekt indem eine Sequenz von Daten gespeichert werden kann, welche dann mit Zahlenindexen referenziert werden.",
          "id": 9,
          "correctionOrComment": "Ein Array ist ein Objekt indem eine Sequenz von Daten gespeichert werden kann, welche dann mit Zahlenindexen referenziert werden.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ist ein Objekt indem eine Sequenz von Daten gespeichert werden kann",
              "elements": [
                [
                  0,
                  77
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Datentyp in welchem eine Art von Daten in einer Reihenfolge gespeichert und durchlaufen werden k\u00f6nnen. Die gr\u00f6\u00dfe wird vorher festgelegt.",
          "id": 10,
          "correctionOrComment": "Ein Datentyp in welchem eine Art von Daten in einer Reihenfolge gespeichert und durchlaufen werden k\u00f6nnen. Die Gr\u00f6\u00dfe wird vorher festgelegt.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Ein Datentyp in welchem eine Art von Daten ;; gespeichert ;; werden",
              "elements": [
                [
                  0,
                  42
                ],
                [
                  64,
                  75
                ],
                [
                  92,
                  98
                ]
              ],
              "aIdx": 2,
              "label": 0
            },
            {
              "text": "Ein Datentyp in welchem eine Art von Daten in einer Reihenfolge gespeichert und durchlaufen werden k\u00f6nnenG",
              "elements": [],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Die Gr\u00f6\u00dfe wird vorher festgelegt",
              "elements": [],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es \u00e4hnelt vom Aufbau einem String.",
          "id": 11,
          "correctionOrComment": "Es \u00e4hnelt vom Aufbau einem String.",
          "answerCategory": "irrelevant",
          "aspects": [],
          "userId": "ea674ab55536a8b603be44d13510e32c7aab02088bf48c2802e4febd"
        },
        {
          "text": "Ein Array ist ein Datentyp, bei dem mehrer Daten aneinandergereiht werden k\u00f6nnen.",
          "id": 12,
          "correctionOrComment": "Ein Array ist ein Datentyp, bei dem mehrer Daten aneinandergereiht werden k\u00f6nnen.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ist ein Datentyp, bei dem mehrer Daten aneinandergereiht werden k\u00f6nnen",
              "elements": [
                [
                  0,
                  80
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Ein Array ist eine Anreihung von Daten.",
          "id": 13,
          "correctionOrComment": "Ein Array ist eine Anreihung von Daten.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ist eine Anreihung von Daten",
              "elements": [
                [
                  0,
                  38
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "ein array ist eine datenstruktur die sequenz von variablen gleichen typs enth\u00e4lt. einzelne eintr\u00e4ge werden durchnummeriert",
          "id": 14,
          "correctionOrComment": "Ein Array ist eine Datenstruktur die eine Sequenz von Variablen gleichen Typs enth\u00e4lt. einzelne eintr\u00e4ge werden durchnummeriert",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ist eine Datenstruktur die eine Sequenz von Variablen ;; enth\u00e4lt",
              "elements": [
                [
                  73,
                  80
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Ein Array ist eine Datenstruktur die eine Sequenz von Variablen gleichen Typs enth\u00e4lt",
              "elements": [],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "ein Array ist eine KEtte von Zahlen.",
          "id": 15,
          "correctionOrComment": "Ein Array ist eine Kette von Zahlen.",
          "answerCategory": "missconception",
          "aspects": [
            {
              "text": "Ein Array ist eine Kette von Zahlen",
              "elements": [],
              "aIdx": 2,
              "label": 2
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Datenstruktur, die eine Menge, die unterschiedlich gro\u00df und unterschiedlich strukturiert sein kann, vom gleichen Datentyp (Integer, Char...) speichert.",
          "id": 16,
          "correctionOrComment": "Eine Datenstruktur, die eine Menge, die unterschiedlich gro\u00df und unterschiedlich strukturiert sein kann, vom gleichen Datentyp (Integer, Char...) speichert.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "eine Menge, die unterschiedlich gro\u00df und unterschiedlich strukturiert sein kann",
              "elements": [
                [
                  24,
                  103
                ]
              ],
              "aIdx": 0,
              "label": 2
            },
            {
              "text": "Eine Datenstruktur, die eine Menge ;; vom gleichen Datentyp (Integer, Char...) speichert",
              "elements": [
                [
                  0,
                  34
                ],
                [
                  105,
                  155
                ]
              ],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Ein Array ist ein Datentyp, der eine Reihe von Werten hintereinander speichern kann.  Man kann seine einzelnen Positionen abfragen, aber nicht mit dem Array an sich z.B. rechnen oder ihn ausgeben.",
          "id": 17,
          "correctionOrComment": "Ein Array ist ein Datentyp, der eine Reihe von Werten hintereinander speichern kann. Man kann seine einzelnen Positionen abfragen, aber nicht mit dem Array an sich z.B. rechnen oder ihn ausgeben.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ist ein Datentyp, der eine Reihe von Werten hintereinander speichern kann",
              "elements": [
                [
                  0,
                  83
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "kann mehrdimensional sein. Speichert einzelne primitive Datentypen in einer Reihenfolge und versieht sie mit Indizes, leichter zugriff. feste gr\u00f6\u00dfe.",
          "id": 18,
          "correctionOrComment": "Ein Array kann mehrdimensional sein, speichert einzelne primitive Datentypen in einer Reihenfolge und versieht sie mit Indizes, erlaubt leichten einen Zugriff und hat eine feste gr\u00f6\u00dfe.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ;; hat eine feste gr\u00f6\u00dfe ",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Ein Array ;; speichert ;; Datentypen in einer Reihenfolge",
              "elements": [
                [
                  56,
                  87
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Ein Array ;; speichert einzelne primitive Datentypen",
              "elements": [],
              "aIdx": 2,
              "label": 2
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Array ist eine Liste von beliebigen Daten. Auf diese k\u00f6nnen via deren Index zugegruffen werden.",
          "id": 19,
          "correctionOrComment": "Ein Array ist eine Liste von beliebigen Daten. Auf diese k\u00f6nnen via deren Index zugegriffen werden.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ist eine Liste von beliebigen Daten",
              "elements": [
                [
                  0,
                  45
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Ein Array ist eine Liste von beliebigen Daten",
              "elements": [
                [
                  0,
                  45
                ]
              ],
              "aIdx": 2,
              "label": 2
            }
          ],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Datentyp der eine Sequenz von Werten den gleichen Datentyps speichert",
          "id": 20,
          "correctionOrComment": "Datentyp der eine Sequenz von Werten des gleichen Datentyps speichert",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Datentyp der eine Sequenz von Werten ;; speichert",
              "elements": [
                [
                  0,
                  36
                ],
                [
                  60,
                  69
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Datentyp der eine Sequenz von Werten des gleichen Datentyps speichert",
              "elements": [],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "8a1c55283fd2fc15f72ad8c88c9dcc447f528814a41bf2a7ab51950a"
        },
        {
          "text": "Ein Array ist eine Datenstruktur, die es erm\u00f6glicht iterative auf Datens\u00e4tze gleichen Types zuzugreifen. Ein Array, kann mehrere Dimensionen besitzen.",
          "id": 21,
          "correctionOrComment": "Ein Array ist eine Datenstruktur, die es erm\u00f6glicht iterative auf Datens\u00e4tze gleichen Types zuzugreifen. Ein Array, kann mehrere Dimensionen besitzen.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ist eine Datenstruktur, die es erm\u00f6glicht iterative auf Datens\u00e4tze gleichen Types zuzugreifen",
              "elements": [
                [
                  0,
                  103
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Ein Array ist eine Datenstruktur, die es erm\u00f6glicht iterative auf Datens\u00e4tze gleichen Types zuzugreifen",
              "elements": [
                [
                  0,
                  103
                ]
              ],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "58b2aaa0bfae7acc021b3260e941117b529b2e69de878fd7d45c61a9"
        },
        {
          "text": "Eine Datenstruktur zur Speicherung von gleichartigen Werten",
          "id": 22,
          "correctionOrComment": "Eine Datenstruktur zur Speicherung von gleichartigen Werten",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Eine Datenstruktur zur Speicherung von gleichartigen Werten",
              "elements": [
                [
                  0,
                  59
                ]
              ],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "6332531eeafc6e0ede272192be898f549950fb32b209d04f0a98306a"
        },
        {
          "text": "ein datentyp",
          "id": 23,
          "correctionOrComment": "ein datentyp",
          "answerCategory": "irrelevant",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Array ist ein Datentyp in dem Ziffern oder Zeichen gespeichert und worauf mit Hilfe von Indices zugegriffen werden kann",
          "id": 24,
          "correctionOrComment": "Array ist ein Datentyp in dem Ziffern oder Zeichen gespeichert und worauf mit Hilfe von Indices zugegriffen werden kann",
          "answerCategory": "missconception",
          "aspects": [
            {
              "text": "Array ist ein Datentyp ;; worauf mit Hilfe von Indices zugegriffen werden kann",
              "elements": [
                [
                  0,
                  22
                ],
                [
                  67,
                  119
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Array ist ein Datentyp in dem Ziffern oder Zeichen gespeichert ;; werden kann",
              "elements": [
                [
                  0,
                  62
                ],
                [
                  108,
                  119
                ]
              ],
              "aIdx": 2,
              "label": 2
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine Array ist Objekt, in dem eine Sequenz von Variablen gleichen Typs gespeichert werden.",
          "id": 25,
          "correctionOrComment": "Eine Array ist ein Objekt, in dem eine Sequenz von Variablen gleichen Typs gespeichert wird.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Eine Array ist ein Objekt, in dem eine Sequenz von Variablen ;; gespeichert wird",
              "elements": [],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Eine Array ist ein Objekt, in dem eine Sequenz von Variablen gleichen Typs gespeichert wird",
              "elements": [],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Einen Reihung von gleichen Datentypen.",
          "id": 26,
          "correctionOrComment": "Einen Reihung von gleichen Datentypen.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Einen Reihung von gleichen Datentypen",
              "elements": [
                [
                  0,
                  37
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Einen Reihung von gleichen Datentypen",
              "elements": [
                [
                  0,
                  37
                ]
              ],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Indizierte liste",
          "id": 27,
          "correctionOrComment": "Das ist eine Indizierte Liste",
          "answerCategory": "binary_correct",
          "aspects": [
            {
              "text": "Das ist eine Indizierte Liste",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Array ist eine Aneinanderreihung von verschiedenen Werten",
          "id": 28,
          "correctionOrComment": "Ein Array ist eine Aneinanderreihung von verschiedenen Werten",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ist eine Aneinanderreihung von verschiedenen Werten",
              "elements": [
                [
                  0,
                  61
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Ein Array ist eine Aneinanderreihung von verschiedenen Werten",
              "elements": [
                [
                  0,
                  61
                ]
              ],
              "aIdx": 2,
              "label": 2
            }
          ],
          "userId": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Ein Objekt, dass viele Werte eines einzigen Datentyps speichert.",
          "id": 29,
          "correctionOrComment": "Ein Objekt, dass viele Werte eines einzigen Datentyps speichert.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Objekt, dass viele Werte eines einzigen Datentyps speicher",
              "elements": [
                [
                  0,
                  62
                ]
              ],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Ein Array ist ein Datentyp der mehrere Daten eines Datentypes abspeichert.",
          "id": 30,
          "correctionOrComment": "Ein Array ist ein Datentyp der mehrere Daten eines Datentypes abspeichert.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ist ein Datentyp der mehrere Daten eines Datentypes abspeichert",
              "elements": [
                [
                  0,
                  73
                ]
              ],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Array ist eine Reihe von Variablen gleichen Typs.",
          "id": 31,
          "correctionOrComment": "Ein Array ist eine Reihe von Variablen gleichen Typs.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ist eine Reihe von Variablen gleichen Typs",
              "elements": [
                [
                  0,
                  52
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Ein Array ist eine Reihe von Variablen gleichen Typs",
              "elements": [
                [
                  0,
                  52
                ]
              ],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Eine lineare Anordnung an Daten im Speicher. Dies k\u00f6nnen auch Pointer-Arrays sein (Refernzen).",
          "id": 32,
          "correctionOrComment": "Eine lineare Anordnung an Daten im Speicher. Dies k\u00f6nnen auch Pointer-Arrays sein (Refernzen).",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Eine lineare Anordnung an Daten im Speicher",
              "elements": [
                [
                  0,
                  43
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Ein Objekt mit Integer Werten, die unter Index gespeichert werden",
          "id": 33,
          "correctionOrComment": "Ein Objekt mit Integer Werten, die unter Index gespeichert werden",
          "answerCategory": "missconception",
          "aspects": [
            {
              "text": "die unter Index gespeichert werden",
              "elements": [
                [
                  31,
                  65
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Ein Objekt mit Integer Werten",
              "elements": [
                [
                  0,
                  29
                ]
              ],
              "aIdx": 2,
              "label": 2
            }
          ],
          "userId": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "Eine Reihe gleicher Datentypen",
          "id": 34,
          "correctionOrComment": "Das ist eine Reihe gleicher Datentypen",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Das ist eine Reihe gleicher Datentypen",
              "elements": [],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Das ist eine Reihe gleicher Datentypen",
              "elements": [],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "mkmkmk",
          "id": 35,
          "correctionOrComment": "mkmkmk",
          "answerCategory": "none",
          "aspects": [],
          "userId": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Ein Array ist ein statischer Datentyp. Er wird mit einer bestimmten L\u00e4nge festgelegt und kann Werte eines bestimmten Datentyps speichern.",
          "id": 36,
          "correctionOrComment": "Ein Array ist ein statischer Datentyp. Es wird mit einer bestimmten L\u00e4nge festgelegt und kann Werte eines bestimmten Datentyps speichern.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es ;; kann Werte eines bestimmten Datentyps speichern",
              "elements": [
                [
                  39,
                  41
                ],
                [
                  89,
                  136
                ]
              ],
              "aIdx": 2,
              "label": 0
            },
            {
              "text": "Es wird mit einer bestimmten L\u00e4nge festgelegt",
              "elements": [],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Ein Array ist ein Objekt, dass \u00fcber die Referenz auf einen Speicherbereich, mehrere Werte eines Datentyps in einer Reihenfolge speichert.",
          "id": 37,
          "correctionOrComment": "Ein Array ist ein Objekt, dass \u00fcber die Referenz auf einen Speicherbereich, mehrere Werte eines Datentyps in einer Reihenfolge speichert.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ist ein Objekt, dass ;; mehrere Werte ;; in einer Reihenfolge speichert",
              "elements": [
                [
                  0,
                  30
                ],
                [
                  76,
                  89
                ],
                [
                  106,
                  136
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Ein Array ist ein Objekt, dass ;; Werte eines Datentyps ;; speichert",
              "elements": [
                [
                  0,
                  30
                ],
                [
                  84,
                  105
                ],
                [
                  127,
                  136
                ]
              ],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Datenstruktur, die eine Sequenz von Variablen gleichen Typs enth\u00e4lt",
          "id": 38,
          "correctionOrComment": "Das ist ein Datenstruktur, die eine Sequenz von Variablen gleichen Typs enth\u00e4lt",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "die ;; Variablen gleichen Typs enth\u00e4lt",
              "elements": [
                [
                  15,
                  18
                ],
                [
                  36,
                  67
                ]
              ],
              "aIdx": 2,
              "label": 0
            },
            {
              "text": "Das ist ein Datenstruktur, die eine Sequenz von Variablen ;; enth\u00e4lt",
              "elements": [
                [
                  60,
                  67
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Ein Array ist eine Datenstruktur, die eine Sequenz von Variablen des gleichen Typs enth\u00e4lt.",
          "id": 39,
          "correctionOrComment": "Ein Array ist eine Datenstruktur, die eine Sequenz von Variablen des gleichen Typs enth\u00e4lt.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ist eine Datenstruktur, die eine Sequenz von Variablen ;; enth\u00e4lt",
              "elements": [
                [
                  0,
                  64
                ],
                [
                  83,
                  90
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Ein Array ist eine Datenstruktur, die Variablen des gleichen Typs enth\u00e4lt",
              "elements": [],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Array ist Sammlung von Werten. Jeder Wert hat einen Index, unter dem er im Array gespeichert wird und abgerufen werden kann, \u00e4hnlich einer Tabelle.",
          "id": 40,
          "correctionOrComment": "Ein Array ist Sammlung von Werten. Jeder Wert hat einen Index, unter dem er im Array gespeichert wird und abgerufen werden kann, \u00e4hnlich einer Tabelle.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ist Sammlung von Werten. Jeder Wert hat einen Index, unter dem er im Array gespeichert wird und abgerufen werden kann",
              "elements": [
                [
                  0,
                  127
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "Speichersequenz von gleichen Datentypen",
          "id": 41,
          "correctionOrComment": "Es dient zur Speichersequenz von gleichen Datentypen",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es dient zur Speichersequenz von gleichen Datentypen",
              "elements": [],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ist eine Anreihung von Werten eines Datentyps ohne f\u00fcr jeden Wert eine neue deklaration zu definieren",
          "id": 42,
          "correctionOrComment": "Es ist eine Anreihung von Werten eines Datentyps ohne f\u00fcr jeden Wert eine neue deklaration zu definieren",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es ist eine Anreihung von Werten",
              "elements": [],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Es ist eine Anreihung von Werten eines Datentyps",
              "elements": [],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Datenstruktur",
          "id": 43,
          "correctionOrComment": "Datenstruktur",
          "answerCategory": "none",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Array ist eine durchnummerierte Ansammlung von Daten eines Typs.",
          "id": 44,
          "correctionOrComment": "Ein Array ist eine durchnummerierte Ansammlung von Daten eines Typs.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Array ist eine durchnummerierte Ansammlung von Daten ",
              "elements": [
                [
                  0,
                  56
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Ein Array ist eine  Ansammlung von Daten eines Typs",
              "elements": [],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Eine Datenstruktur, die eine festbestimmte Gr\u00f6\u00dfe hat und auf mehrere Objekte durch Referenzen verweisen kann.",
          "id": 45,
          "correctionOrComment": "Eine Datenstruktur, die eine festbestimmte Gr\u00f6\u00dfe hat und auf mehrere Objekte durch Referenzen verweisen kann.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Eine Datenstruktur, die eine festbestimmte Gr\u00f6\u00dfe hat",
              "elements": [
                [
                  0,
                  52
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "In einem Array k\u00f6nnen mehrere Werte des gleichen Typs gespeichert werden.",
          "id": 46,
          "correctionOrComment": "In einem Array k\u00f6nnen mehrere Werte des gleichen Typs gespeichert werden.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "In einem Array k\u00f6nnen mehrere Werte des gleichen Typs gespeichert werden",
              "elements": [
                [
                  0,
                  72
                ]
              ],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "0aebf04a018e3de3078a2580a53f660b420bea77865d71caed9f8690"
        },
        {
          "text": "Im \u00fcbertragenen Sinn ein Vektor (bei mehrdimensionalen Arrays eine Matrix). Man kann auf jede Position des Array zugreifen.",
          "id": 47,
          "correctionOrComment": "Im \u00fcbertragenen Sinn ein Vektor (bei mehrdimensionalen Arrays eine Matrix). Man kann auf jede Position des Array zugreifen.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Im \u00fcbertragenen Sinn ein Vektor (bei mehrdimensionalen Arrays eine Matrix). Man kann auf jede Position des Array zugreifen",
              "elements": [
                [
                  0,
                  122
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Matrix, die Reihe von Werten des gleichen Datentyps speichert",
          "id": 48,
          "correctionOrComment": "Es ist eine Matrix, die eine Reihe von Werten des gleichen Datentyps speichert",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es ist eine Matrix",
              "elements": [],
              "aIdx": 1,
              "label": 2
            },
            {
              "text": "die eine Reihe von Werten des gleichen Datentyps speich",
              "elements": [],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "index zeichenkette",
          "id": 49,
          "correctionOrComment": "index zeichenkette",
          "answerCategory": "missconception",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Warum ist die Laufzeit f\u00fcr das Sortieren von Strings im Gegensatz zu Integern nicht allein von der Anzahl der zu sortierenden Elemente abh\u00e4ngig?",
      "id": "50726",
      "title": "Komplexit\u00e4t Sortieren von Strings",
      "type": "reason",
      "aspects": [
        {
          "text": "die L\u00e4nge eines Strings ist theoretisch nicht beschr\u00e4nkt"
        },
        {
          "text": "Die Laufzeit f\u00fcr den Vergleich von zwei Strings ist nicht konstant wie bei Integern"
        }
      ],
      "assignedWeights": {
        "weil": 3,
        "L\u00e4nge": 5,
        "String": 3,
        "theoretisch": 4,
        "nicht": 5,
        "beschr\u00e4nkt": 5,
        "sein": 1,
        "Laufzeit": 2,
        "Vergleich": 4,
        "zwei": 1,
        "daher": 2,
        "konstant": 4,
        "wie": 1,
        "Integer": 1
      },
      "referenceAnswers": [
        {
          "id": "ref1",
          "text": "Weil die L\u00e4nge eines Strings theoretisch nicht beschr\u00e4nkt ist. Die Laufzeit f\u00fcr den Vergleich von zwei Strings ist daher nicht konstant wie bei Integern.",
          "aspects": [
            {
              "text": "Weil die L\u00e4nge eines Strings theoretisch nicht beschr\u00e4nkt ist",
              "aIdx": 0,
              "elements": [
                [
                  0,
                  61
                ]
              ]
            },
            {
              "text": "Die Laufzeit f\u00fcr den Vergleich von zwei Strings ist daher nicht konstant wie bei Integern",
              "aIdx": 1,
              "elements": [
                [
                  63,
                  152
                ]
              ]
            }
          ]
        }
      ],
      "studentAnswers": [
        {
          "text": "strings selber k\u00f6nnen nochmal unterschiedlich gro\u00df sein und damit unterschiedlich viele Rechenschritte brauchen",
          "id": 0,
          "correctionOrComment": "Strings selber k\u00f6nnen nochmal unterschiedlich gro\u00df sein und damit unterschiedlich viele Rechenschritte brauchen",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Strings selber k\u00f6nnen nochmal unterschiedlich gro\u00df sein ",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Strings selber k\u00f6nnen ;; unterschiedlich viele Rechenschritte brauchen",
              "elements": [
                [
                  66,
                  111
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil Strings einen gr\u00f6\u00dferen Speicherbedarf haben.",
          "id": 1,
          "correctionOrComment": "Weil Strings einen gr\u00f6\u00dferen Speicherbedarf haben.",
          "answerCategory": "partially_correct",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Da Strings mit Referenzen arbeiten.",
          "id": 2,
          "correctionOrComment": "Da Strings mit Referenzen arbeiten.",
          "answerCategory": "irrelevant",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es ist auch von der l\u00e4nge der Strings abh\u00e4ngig",
          "id": 3,
          "correctionOrComment": "Es ist auch von der l\u00e4nge der Strings abh\u00e4ngig",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Es ist auch von der l\u00e4nge der Strings abh\u00e4ngig",
              "elements": [
                [
                  0,
                  46
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Wegen Typecasts.",
          "id": 4,
          "correctionOrComment": "Wegen Typecasts.",
          "answerCategory": "missconception",
          "aspects": [],
          "userId": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "we",
          "id": 5,
          "correctionOrComment": "we",
          "answerCategory": "none",
          "aspects": [],
          "userId": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Ist der String ung\u00fcnstig sortiert, m\u00fcssen mehr Tauschaktionen durchgef\u00fchrt werden, als wenn er zb schon sortiert ist.",
          "id": 6,
          "correctionOrComment": "Ist der String ung\u00fcnstig sortiert, m\u00fcssen mehr Tauschaktionen durchgef\u00fchrt werden, als wenn er zb schon sortiert ist.",
          "answerCategory": "missconception",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil es auch von den Referenzen der Strings abh\u00e4ngt.",
          "id": 7,
          "correctionOrComment": "Weil es auch von den Referenzen der Strings abh\u00e4ngt.",
          "answerCategory": "missconception",
          "aspects": [],
          "userId": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Strings k\u00f6nnen in ihrer L\u00e4nge variieren, was bei der Sortierung beachtet werden muss. Integer haben eine feste Gr\u00f6\u00dfe.",
          "id": 8,
          "correctionOrComment": "Strings k\u00f6nnen in ihrer L\u00e4nge variieren, was bei der Sortierung beachtet werden muss. Integer haben eine feste Gr\u00f6\u00dfe.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Strings k\u00f6nnen in ihrer L\u00e4nge variieren",
              "elements": [
                [
                  0,
                  39
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Weil Strings aufw\u00e4ndiger sortiert werden m\u00fcssen, da sie nicht so einfach zu vergleichen sind.",
          "id": 9,
          "correctionOrComment": "Weil Strings aufw\u00e4ndiger sortiert werden m\u00fcssen, da sie nicht so einfach zu vergleichen sind.",
          "answerCategory": "partially_correct",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil Strings Referenzen besitzen. Das hei\u00dft zus\u00e4tzlicher Speicher wird ben\u00f6tigt. Das Sortieren geschieht nicht insitu.",
          "id": 10,
          "correctionOrComment": "Weil Strings Referenzen besitzen, das hei\u00dft zus\u00e4tzlicher Speicher wird ben\u00f6tigt. Das Sortieren geschieht nicht insitu.",
          "answerCategory": "irrelevant",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil die Strings eine theoretisch unedliche L\u00e4nge haben k\u00f6nnen, w\u00e4hrend die gr\u00f6\u00dfe von Integer begrenzt ist.",
          "id": 11,
          "correctionOrComment": "Weil die Strings eine theoretisch unendliche L\u00e4nge haben k\u00f6nnen, w\u00e4hrend die gr\u00f6\u00dfe von Integer begrenzt ist.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Weil die Strings eine theoretisch unendliche L\u00e4nge haben k\u00f6nnen",
              "elements": [],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Weil es auch auf die L\u00e4nge der einzelnen Strings ankommt",
          "id": 12,
          "correctionOrComment": "Weil es auch auf die L\u00e4nge der einzelnen Strings ankommt",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Weil es auch auf die L\u00e4nge der einzelnen Strings ankommt",
              "elements": [
                [
                  0,
                  56
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Es h\u00e4ngt auch noch von der L\u00e4nge der Strings ab. Au\u00dferdem muss ja die Referenz verglichen werden.",
          "id": 13,
          "correctionOrComment": "Es h\u00e4ngt auch noch von der L\u00e4nge der Strings ab. Au\u00dferdem muss ja die Referenz verglichen werden.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es h\u00e4ngt auch noch von der L\u00e4nge der Strings ab",
              "elements": [
                [
                  0,
                  47
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Die einzelnen Zeichen eines Strings m\u00fcssen erst in Integer umgewandelt werden, bevor sie sortiert werden k\u00f6nnen.",
          "id": 14,
          "correctionOrComment": "Die einzelnen Zeichen eines Strings m\u00fcssen erst in Integer umgewandelt werden, bevor sie sortiert werden k\u00f6nnen.",
          "answerCategory": "missconception",
          "aspects": [],
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Weil Strings wiederrum verschiedene L\u00e4ngen haben - diese sind wiederrum nichts anderes als Arrays mit chars und einer eigenen L\u00e4nge.",
          "id": 15,
          "correctionOrComment": "Weil Strings wiederrum verschiedene L\u00e4ngen haben - diese sind wiederrum nichts anderes als Arrays mit chars und einer eigenen L\u00e4nge.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Weil Strings wiederrum verschiedene L\u00e4ngen haben",
              "elements": [
                [
                  0,
                  48
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Weil jeder einzelne String aus mehreren chars besteht und Integer keine solche Eigenschaft haben.",
          "id": 16,
          "correctionOrComment": "Weil jeder einzelne String aus mehreren chars besteht und Integer keine solche Eigenschaft haben.",
          "answerCategory": "binary_correct",
          "aspects": [
            {
              "text": "Weil jeder einzelne String aus mehreren chars besteht",
              "elements": [
                [
                  0,
                  53
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil die gr\u00f6\u00dfe der zu sortierenden Strings variabel ist",
          "id": 17,
          "correctionOrComment": "Weil die gr\u00f6\u00dfe der zu sortierenden Strings variabel ist",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Weil die gr\u00f6\u00dfe der zu sortierenden Strings variabel ist",
              "elements": [
                [
                  0,
                  55
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "In einem Integer muss nur der Wert des Ints vergleichen werden, bei einem String muss der ganze String durchlaufen und jedes Zeichen verglichen werden.",
          "id": 18,
          "correctionOrComment": "In einem Integer muss nur der Wert des Ints vergleichen werden, bei einem String muss der ganze String durchlaufen und jedes Zeichen verglichen werden.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "bei einem String muss der ganze String durchlaufen und jedes Zeichen verglichen werden",
              "elements": [
                [
                  64,
                  150
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "njnjni",
          "id": 19,
          "correctionOrComment": "njnjni",
          "answerCategory": "none",
          "aspects": [],
          "userId": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Bei Strings werden immer die Objekte angesprochen und deswegen ist dies nicht allein von den sortierten Elementen abh\u00e4ngig.",
          "id": 20,
          "correctionOrComment": "Bei Strings werden immer die Objekte angesprochen und deswegen ist dies nicht allein von den sortierten Elementen abh\u00e4ngig.",
          "answerCategory": "irrelevant",
          "aspects": [],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Strings repr\u00e4sentieren Zeichenkette, haben also auch eine variable Eingabegr\u00f6\u00dfe in sich.",
          "id": 21,
          "correctionOrComment": "Strings repr\u00e4sentieren Zeichenkette, haben also auch eine variable Eingabegr\u00f6\u00dfe in sich.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Strings repr\u00e4sentieren Zeichenkette, haben also auch eine variable Eingabegr\u00f6\u00dfe in sich",
              "elements": [
                [
                  0,
                  87
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Ein String hat keine obere schranke f\u00fcr seine l\u00e4nge, die als konstante genommen werden kann (vereinfacht nach oben abgesch\u00e4tzt), auch von der l\u00e4nge der strings abh\u00e4ngig",
          "id": 22,
          "correctionOrComment": "Ein String hat keine obere Schranke f\u00fcr seine l\u00e4nge, die als konstante genommen werden kann (vereinfacht nach oben abgesch\u00e4tzt), auch von der l\u00e4nge der strings abh\u00e4ngig",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Ein String hat keine obere Schranke f\u00fcr seine l\u00e4nge, die als konstante genommen werden kann ",
              "elements": [],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil in Strings der Inhalt der Referenzen verglichen werden muss.",
          "id": 23,
          "correctionOrComment": "Weil in Strings der Inhalt der Referenzen verglichen werden muss.",
          "answerCategory": "irrelevant",
          "aspects": [],
          "userId": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "x",
          "id": 24,
          "correctionOrComment": "x",
          "answerCategory": "none",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Anders als Integer k\u00f6nnen Strings eine unendliche L\u00e4nge haben.",
          "id": 25,
          "correctionOrComment": "Anders als Integer k\u00f6nnen Strings eine unendliche L\u00e4nge haben.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Anders als Integer k\u00f6nnen Strings eine unendliche L\u00e4nge haben",
              "elements": [
                [
                  0,
                  61
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Es werden unterschiedlichviele Vergleiche ben\u00f6tigt",
          "id": 26,
          "correctionOrComment": "Es werden unterschiedlich viele Vergleiche ben\u00f6tigt",
          "answerCategory": "binary_correct",
          "aspects": [
            {
              "text": "Es werden unterschiedlich viele Vergleiche ben\u00f6tigt",
              "elements": [],
              "aIdx": 1,
              "label": 1
            }
          ],
          "userId": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Da f\u00fcr das Sortieren auch die einzelnen Symbole der Sstrings relevant sind, ist die Laufzeit ebenso davon abh\u00e4ngig, wieviele Zeichen die Strings ausmachen.",
          "id": 27,
          "correctionOrComment": "Da f\u00fcr das Sortieren auch die einzelnen Symbole der Strings relevant sind, ist die Laufzeit ebenso davon abh\u00e4ngig, wieviele Zeichen die Strings ausmachen.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "wieviele Zeichen die Strings ausmachen",
              "elements": [
                [
                  116,
                  154
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Da f\u00fcr das Sortieren auch die einzelnen Symbole der Strings relevant sind, ist die Laufzeit ebenso davon abh\u00e4ngig, wieviele Zeichen die Strings ausmachen",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Da die L\u00e4nge eines Strings nicht festgelegt ist, anders als die eines Ints,",
          "id": 28,
          "correctionOrComment": "Da die L\u00e4nge eines Strings nicht festgelegt ist, anders als die eines Ints,",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Da die L\u00e4nge eines Strings nicht festgelegt ist",
              "elements": [
                [
                  0,
                  47
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Strings sind nicht wirklich nach oben beschr\u00e4nkt, es kommt also auf Inhalt an",
          "id": 29,
          "correctionOrComment": "Strings sind nicht wirklich nach oben beschr\u00e4nkt, es kommt also auf den Inhalt an",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Strings sind nicht wirklich nach oben beschr\u00e4nkt, es kommt also auf den Inhalt an",
              "elements": [],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Beschreibe das Vorgehen bei der bin\u00e4ren Suche.",
      "id": "50731",
      "title": "Bin\u00e4re Suche",
      "type": "procedure",
      "aspects": [
        {
          "text": "Es wird immer nur das mittlere Element der Menge mit dem gesuchten Element verglichen"
        },
        {
          "text": "Das Ergebnis des Vergleichs bestimmt die neue noch zu durchsuchende Menge"
        }
      ],
      "assignedWeights": {
        "werden": 3,
        "immmer": 4,
        "nur": 3,
        "mittel": 5,
        "Element": 5,
        "Menge": 4,
        "mit": 3,
        "suchen": 3,
        "vergleichen": 5,
        "Ergebnis": 4,
        "Vergleich": 4,
        "bestimmen": 4,
        "neu": 3,
        "noch": 3,
        "durchsuchen": 3
      },
      "referenceAnswers": [
        {
          "id": "ref1",
          "text": "Es wird immer nur das mittlere Element der Menge mit dem gesuchten Element verglichen. Das Ergebnis des Vergleichs bestimmt die neue noch zu durchsuchende Menge.",
          "aspects": [
            {
              "text": "Es wird immer nur das mittlere Element der Menge mit dem gesuchten Element verglichen",
              "aIdx": 0,
              "elements": [
                [
                  0,
                  85
                ]
              ]
            },
            {
              "text": "Das Ergebnis des Vergleichs bestimmt die neue noch zu durchsuchende Menge",
              "aIdx": 1,
              "elements": [
                [
                  87,
                  160
                ]
              ]
            }
          ]
        }
      ],
      "studentAnswers": [
        {
          "text": "die elemente m\u00fcssen vorsortiert sein, es wird immer das mittlere element verglichen und dann in der entsprechenden h\u00e4lfte weitergesucht",
          "id": 0,
          "correctionOrComment": "Die elemente m\u00fcssen vorsortiert sein. Es wird immer das mittlere Element verglichen und dann in der entsprechenden H\u00e4lfte weitergesucht",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Es wird immer das mittlere Element verglichen",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Es wird ;; in der entsprechenden H\u00e4lfte weitergesucht",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Da das Array bei der bin\u00e4ren Suche sortiert ist, wird dieses in zwei H\u00e4lften aufgeteilt und das Array so verkleinert, bis der gesuchte Wert gefunden ist. Hierbei kann nat\u00fcrlich auch der Anfang, das Ende oder die Mitte der gesuchte Wert sein.",
          "id": 1,
          "correctionOrComment": "Da das Array bei der bin\u00e4ren Suche sortiert ist, wird dieses in zwei H\u00e4lften aufgeteilt und das Array so verkleinert, bis der gesuchte Wert gefunden ist. Hierbei kann nat\u00fcrlich auch der Anfang, das Ende oder die Mitte der gesuchte Wert sein.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "wird dieses in zwei H\u00e4lften aufgeteilt und das Array so verkleinert",
              "elements": [
                [
                  49,
                  116
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "4cfc3a1811fe40afa401b25ef7fa0379f1f7c1930a04f8755d678474"
        },
        {
          "text": "Anders als bei der linearen Suche, wird hier das Intervall halbiert, sodass die Chance besteht das gesuchte Element schneller zu finden.",
          "id": 2,
          "correctionOrComment": "Anders als bei der linearen Suche, wird hier das Intervall halbiert, sodass die Chance besteht das gesuchte Element schneller zu finden.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "wird hier das Intervall halbiert",
              "elements": [
                [
                  35,
                  67
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein vergleich Element wird ungef\u00e4hr in der Mitte des Arrays bestimmt. Anschlie\u00dfend wird das gesuchte Element mit diesem verglichen und geguckt ob die Elemente gleich sind. Oder das gesuchte Element kleiner oder gr\u00f6\u00dfer ist. Ist der gesuchte Wert gr\u00f6\u00dfer wird Start auf vergleich + 1 gesetzt. Ist der gesuchte Wert kleiner wird Ende auf vergeleich - 1 gesetzt. Dies wird so lange wiederholt bis das gesuchte Element gefunden wurde oder Start > Ende.",
          "id": 3,
          "correctionOrComment": "Ein vergleich Element wird ungef\u00e4hr in der Mitte des Arrays bestimmt. Anschlie\u00dfend wird das gesuchte Element mit diesem verglichen und geguckt ob die Elemente gleich sind. Oder das gesuchte Element kleiner oder gr\u00f6\u00dfer ist. Ist der gesuchte Wert gr\u00f6\u00dfer wird Start auf Vergleich + 1 gesetzt. Ist der gesuchte Wert kleiner wird Ende auf Vergleich - 1 gesetzt. Dies wird so lange wiederholt bis das gesuchte Element gefunden wurde oder Start > Ende.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Ein vergleich Element wird ungef\u00e4hr in der Mitte des Arrays bestimmt. Anschlie\u00dfend wird das gesuchte Element mit diesem verglichen",
              "elements": [
                [
                  0,
                  130
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Ist der gesuchte Wert gr\u00f6\u00dfer wird Start auf Vergleich + 1 gesetzt. Ist der gesuchte Wert kleiner wird Ende auf Vergleich - 1 gesetzt",
              "elements": [],
              "aIdx": 1,
              "label": 1
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Bei der Bin\u00e4ren Suche betrachten wir drei Punkte im Array, Ende, Start und den Vergleichswert. Entspricht der vergleichswert dem gesuchten wird sein index ausgegeben. ist der vergleichswert gr\u00f6\u00dfer wird er zum neuen Ende, wenn kleicher zum neuen start. so halbieren wir pro Runde die l\u00e4nge der zu durchlaufenden elemente",
          "id": 4,
          "correctionOrComment": "Bei der Bin\u00e4ren Suche betrachten wir drei Punkte im Array, Ende, Start und den Vergleichswert. Entspricht der Vergleichswert dem gesuchten wird sein index ausgegeben. ist der Vergleichswert gr\u00f6\u00dfer wird er zum neuen Ende, wenn kleiner zum neuen Start. So halbieren wir pro Runde die l\u00e4nge der zu durchlaufenden Elemente",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "So halbieren wir pro Runde die l\u00e4nge der zu durchlaufenden Elemente",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird immer der mittlere Wert zwischen Start und Ende mit dem gesuchten Wert verglichen. Ist dieser gr\u00f6\u00dfer, wird der Vergleichswert zum neuen Startwert, sonst zum Endwert.",
          "id": 5,
          "correctionOrComment": "Es wird immer der mittlere Wert zwischen Start und Ende mit dem gesuchten Wert verglichen. Ist dieser gr\u00f6\u00dfer, wird der Vergleichswert zum neuen Startwert, sonst zum Endwert.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Es wird immer der mittlere Wert zwischen Start und Ende mit dem gesuchten Wert verglichen",
              "elements": [
                [
                  0,
                  89
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "st dieser gr\u00f6\u00dfer, wird der Vergleichswert zum neuen Startwert, sonst zum Endwert",
              "elements": [
                [
                  92,
                  172
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Bei der bin\u00e4ren Suche liegt ein vorsortiertes Array vor. Man arbeitet mit einem Index Start und einem Index Ende. Das Element in der Mitte wird betrachtet. Ist es kleiner als gesucht, wird Ende auf den aktuellen Index gesetzt, ist es gr\u00f6\u00dfer als gesucht, wird Start auf den aktuellen Index gesetzt.",
          "id": 6,
          "correctionOrComment": "Bei der bin\u00e4ren Suche liegt ein vorsortiertes Array vor. Man arbeitet mit einem Index Start und einem Index Ende. Das Element in der Mitte wird betrachtet. Ist es kleiner als gesucht, wird Ende auf den aktuellen Index gesetzt, ist es gr\u00f6\u00dfer als gesucht, wird Start auf den aktuellen Index gesetzt.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Das Element in der Mitte wird betrachtet",
              "elements": [
                [
                  114,
                  154
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Ist es kleiner als gesucht, wird Ende auf den aktuellen Index gesetzt, ist es gr\u00f6\u00dfer als gesucht, wird Start auf den aktuellen Index gesetzt",
              "elements": [
                [
                  156,
                  296
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird ein start, ein ende und ein vergleichselement festgelegt. anschlie\u00dfend wird das gesuchte element mit dem vergleichselement verglichen. ist es das gesuchte element bricht die suche ab und die l\u00f6sung wird ausgegeben. ist der verglichene wert gr\u00f6\u00dfer als der gesuchte, wird ende = vergleich-1 gesetzt. ist der verglichene wert kleiner als der gesuchte wird start = x+1 gesetzt.",
          "id": 7,
          "correctionOrComment": "Es wird ein Start, ein Ende und ein Vergleichselement festgelegt. Anschlie\u00dfend wird das gesuchte Element mit dem vergleichselement verglichen. Ist es das gesuchte Element bricht die Suche ab und die L\u00f6sung wird ausgegeben. Ist der verglichene Wert gr\u00f6\u00dfer als der Gesuchte, wird Ende = Vergleich-1 gesetzt. Ist der verglichene Wert kleiner als der gesuchte wird Start = x+1 gesetzt.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Ist der verglichene Wert gr\u00f6\u00dfer als der Gesuchte, wird Ende = Vergleich-1 gesetzt. Ist der verglichene Wert kleiner als der gesuchte wird Start = x+1 gesetzt.",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das sortierte Array wird in zwei Teile aufgeteilt. Bei der Mitte wird geguckt, ob das gesuchte Element gr\u00f6\u00dfer, kleiner oder gleich die Mitte ist. JE nach Antwort wird dann in diesem Teil des Arrays weiter gesucht.",
          "id": 8,
          "correctionOrComment": "Das sortierte Array wird in zwei Teile aufgeteilt. Bei der Mitte wird geguckt, ob das gesuchte Element gr\u00f6\u00dfer, kleiner oder gleich die Mitte ist. Je nach Antwort wird dann in diesem Teil des Arrays weiter gesucht.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Bei der Mitte wird geguckt, ob das gesuchte Element gr\u00f6\u00dfer, kleiner oder gleich die Mitte ist",
              "elements": [
                [
                  51,
                  144
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Je nach Antwort wird dann in diesem Teil des Arrays weiter gesucht",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "das gesuchte gibt an, ob man in der hinteren oder vorderen h\u00e4lfte des arrays sucht und so immer weiter",
          "id": 9,
          "correctionOrComment": "das gesuchte gibt an, ob man in der hinteren oder vorderen h\u00e4lfte des arrays sucht und so immer weiter",
          "answerCategory": "partially_correct",
          "aspects": [],
          "userId": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Bei der bin\u00e4ren Suche wird der Array mittels der Indizes immer halbiert und das gesuchte Element mit dem Mittelwert verglichen. Ist es gr\u00f6\u00dfer, sucht man nur in der zweiten H\u00e4lfte weiter, ist es kleiner, nur in der ersten.",
          "id": 10,
          "correctionOrComment": "Bei der bin\u00e4ren Suche wird das Array mittels der Indizes immer halbiert und das gesuchte Element mit dem Mittelwert verglichen. Ist es gr\u00f6\u00dfer, sucht man nur in der zweiten H\u00e4lfte weiter, ist es kleiner, nur in der ersten.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Bei der bin\u00e4ren Suche wird das Array mittels der Indizes immer halbiert und das gesuchte Element mit dem Mittelwert verglichen",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Ist es gr\u00f6\u00dfer, sucht man nur in der zweiten H\u00e4lfte weiter, ist es kleiner, nur in der ersten",
              "elements": [
                [
                  128,
                  220
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Bei der bin\u00e4ren Suche halbiert man den Bereich den man durchsucht jeden Schritt. Bei jedem Schritt wird \u00fcberpr\u00fcft, ob das aktuelle Element das gesuchte Element ist. Wenn nicht, schaut man ob es kleiner ist als das gesuchte Element. Falls es kleiner ist, setzt man den Suchbereich auf die obere H\u00e4lfte des Suchbereich, sonst auf die untere H\u00e4lfte.",
          "id": 11,
          "correctionOrComment": "Bei der bin\u00e4ren Suche halbiert man den Bereich den man durchsucht jeden Schritt. Bei jedem Schritt wird \u00fcberpr\u00fcft, ob das aktuelle Element das gesuchte Element ist. Wenn nicht, schaut man ob es kleiner ist als das gesuchte Element. Falls es kleiner ist, setzt man den Suchbereich auf die obere H\u00e4lfte des Suchbereich, sonst auf die untere H\u00e4lfte.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Falls es kleiner ist, setzt man den Suchbereich auf die obere H\u00e4lfte des Suchbereich, sonst auf die untere H\u00e4lfte",
              "elements": [
                [
                  232,
                  345
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Die Menge an Zahlen muss sortiert sein, dann wird das mittlere Element betrachtet und mit der gesuchten Zahl verglichen. Wenn die Zahl gleich der gesuchten Zahl ist, ist das Programm fertig. Wenn die gesuchte Zahl gr\u00f6\u00dfer ist, werden anschlie\u00dfend nur noch die Elemente rechts von der Mitte betrachtet, wenn die gesuchte Zahl kleiner ist nur noch die linke H\u00e4lfte. Dann wird das Verfahren f\u00fcr diese Teilarrays wiederholt.",
          "id": 12,
          "correctionOrComment": "Die Menge an Zahlen muss sortiert sein, dann wird das mittlere Element betrachtet und mit der gesuchten Zahl verglichen. Wenn die Zahl gleich der gesuchten Zahl ist, ist das Programm fertig. Wenn die gesuchte Zahl gr\u00f6\u00dfer ist, werden anschlie\u00dfend nur noch die Elemente rechts von der Mitte betrachtet, wenn die gesuchte Zahl kleiner ist nur noch die linke H\u00e4lfte. Dann wird das Verfahren f\u00fcr diese Teilarrays wiederholt.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "dann wird das mittlere Element betrachtet und mit der gesuchten Zahl verglichen",
              "elements": [
                [
                  40,
                  119
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Wenn die gesuchte Zahl gr\u00f6\u00dfer ist, werden anschlie\u00dfend nur noch die Elemente rechts von der Mitte betrachtet, wenn die gesuchte Zahl kleiner ist nur noch die linke H\u00e4lfte",
              "elements": [
                [
                  191,
                  361
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "bei der bin\u00e4ren Suche wird das Array zun\u00e4chst halbiert und das Element in der Mitte mit dem gesuchten verglichen. Ist das gesuchte Element gr\u00f6\u00dfer als das Element Mitte wird im n\u00e4chsten Schritt nur die zweite H\u00e4lfte des Arrays angeguckt, ist das gesuchte Element kleiner als das Element Mitte wird nur die vordere H\u00e4lfte des Arrays auf das gesuchte Element untersucht.  Dann wird das Teilarray wieder halbiert, die Mitte mit dem gesuchten Element verglichen und der Vorgang immer weiter wiederholt.",
          "id": 13,
          "correctionOrComment": "Bei der bin\u00e4ren Suche wird das Array zun\u00e4chst halbiert und das Element in der Mitte mit dem gesuchten verglichen. Ist das gesuchte Element gr\u00f6\u00dfer als das Element Mitte wird im n\u00e4chsten Schritt nur die zweite H\u00e4lfte des Arrays angeguckt, ist das gesuchte Element kleiner als das Element Mitte wird nur die vordere H\u00e4lfte des Arrays auf das gesuchte Element untersucht. Dann wird das Teilarray wieder halbiert, die Mitte mit dem gesuchten Element verglichen und der Vorgang immer weiter wiederholt.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Bei der bin\u00e4ren Suche wird das Array zun\u00e4chst halbiert und das Element in der Mitte mit dem gesuchten verglichen",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Ist das gesuchte Element gr\u00f6\u00dfer als das Element Mitte wird im n\u00e4chsten Schritt nur die zweite H\u00e4lfte des Arrays angeguckt, ist das gesuchte Element kleiner als das Element Mitte wird nur die vordere H\u00e4lfte des Arrays auf das gesuchte Element untersucht.",
              "elements": [
                [
                  114,
                  367
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Bei der bin\u00e4ren Suche ist es wichtig, dass die zu durchsuchende Menge vorsortiert ist. Diese wird in zwei Teile geteilt : Start bis Mitte und Mitte+1 bis Ende. Es wird nach und nach verglichen, ob der gesuchte Wert gr\u00f6\u00dfer oder kleiner als die Mitte ist. Solange er kleiner ist, wird Ende auf Mitte gesetzt, wenn er gr\u00f6\u00dfer ist wird Start auf Mitte gesetzt. Wenn er gleich dem Wert der Mitte ist, ist der Wert gefunden.",
          "id": 14,
          "correctionOrComment": "Bei der bin\u00e4ren Suche ist es wichtig, dass die zu durchsuchende Menge vorsortiert ist. Diese wird in zwei Teile geteilt : Start bis Mitte und Mitte+1 bis Ende. Es wird nach und nach verglichen, ob der gesuchte Wert gr\u00f6\u00dfer oder kleiner als die Mitte ist. Solange er kleiner ist, wird Ende auf Mitte gesetzt, wenn er gr\u00f6\u00dfer ist wird Start auf Mitte gesetzt. Wenn er gleich dem Wert der Mitte ist, ist der Wert gefunden.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Es wird nach und nach verglichen, ob der gesuchte Wert gr\u00f6\u00dfer oder kleiner als die Mitte ist",
              "elements": [
                [
                  160,
                  252
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Solange er kleiner ist, wird Ende auf Mitte gesetzt, wenn er gr\u00f6\u00dfer ist wird Start auf Mitte gesetzt",
              "elements": [
                [
                  254,
                  354
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "In einem Sortierten Datensatz grenzen wir nach und nach den Bereich ein in dem das gesuchte element liegen kann. Ein vergleichselement auf der h\u00e4lfte des infrage kommenden Bereichs wird mit dem dem gesuchten element verglichen. wenn das gesuchte element gr\u00f6\u00dfer als das vergleichselement ist, liegt es zwischen vergleich und ende, sonst zwischen start und ende!",
          "id": 15,
          "correctionOrComment": "In einem Sortierten Datensatz grenzen wir nach und nach den Bereich ein in dem das gesuchte Element liegen kann. Ein Vergleichselement auf der H\u00e4lfte des infrage kommenden Bereichs wird mit dem dem gesuchten Element verglichen. Wenn das gesuchte Element gr\u00f6\u00dfer als das Vergleichselement ist, liegt es zwischen Vergleich und Ende, sonst zwischen Start und Ende!",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Ein Vergleichselement auf der H\u00e4lfte des infrage kommenden Bereichs wird mit dem dem gesuchten Element verglichen",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Wenn das gesuchte Element gr\u00f6\u00dfer als das Vergleichselement ist, liegt es zwischen Vergleich und Ende, sonst zwischen Start und Ende",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird in der Mitte begonnen und immer geschaut, ob das gesuchte Element kleiner oder gr\u00f6\u00dfer ist. Solange bis ende < start oder gesucht gefunden wurde.",
          "id": 16,
          "correctionOrComment": "Es wird in der Mitte begonnen und immer geschaut, ob das gesuchte Element kleiner oder gr\u00f6\u00dfer ist. Solange bis ende < start oder gesucht gefunden wurde.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Es wird in der Mitte begonnen und immer geschaut, ob das gesuchte Element kleiner oder gr\u00f6\u00dfer ist",
              "elements": [
                [
                  0,
                  97
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die aufsteigend vorsortierte durchsuchende Menge wird halbiert, das Element in der Mitte wird mit dem gesuchten Wert verglichen, wenn entspricht, dann sind wir fertig, wenn nicht und das gesuchte Element gr\u00f6\u00dfer ist, suchen wir in der oberen H\u00e4fte, sonst in der unteren. Usw. bis wir finden oder nicht finden (die duchsuchende H\u00e4lfte ist leer).",
          "id": 17,
          "correctionOrComment": "Die aufsteigend vorsortierte durchsuchende Menge wird halbiert, das Element in der Mitte wird mit dem gesuchten Wert verglichen, wenn entspricht, dann sind wir fertig, wenn nicht und das gesuchte Element gr\u00f6\u00dfer ist, suchen wir in der oberen H\u00e4fte, sonst in der unteren, bis wir finden oder nicht finden (die duchsuchende H\u00e4lfte ist leer).",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "das Element in der Mitte wird mit dem gesuchten Wert verglichen",
              "elements": [
                [
                  64,
                  127
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "wenn nicht und das gesuchte Element gr\u00f6\u00dfer ist, suchen wir in der oberen H\u00e4fte, sonst in der unteren",
              "elements": [
                [
                  168,
                  268
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "immer wieder halbieren des suchbereiches und links und recht davon wird geschaut",
          "id": 18,
          "correctionOrComment": "Immer wieder halbieren des Suchbereiches und links und recht davon wird geschaut",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Immer wieder halbieren des Suchbereiches",
              "elements": [],
              "aIdx": 1,
              "label": 1
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird zun\u00e4chst sortiert und anschlie\u00dfend in Abschnitte geteilt, bei denen verglichen wird, ob das gesuchte Element gr\u00f6\u00dfer oder kleiner als das Vergleichselement ist. Je nachdem geht der Algorithmus links (wenn kleiner) oder rechts (wenn gr\u00f6\u00dfer) weiter oder beendet, wenn das gesuchte Element gefunden wurde",
          "id": 19,
          "correctionOrComment": "Es wird zun\u00e4chst sortiert und anschlie\u00dfend in Abschnitte geteilt, bei denen verglichen wird, ob das gesuchte Element gr\u00f6\u00dfer oder kleiner als das Vergleichselement ist. Je nachdem geht der Algorithmus links (wenn kleiner) oder rechts (wenn gr\u00f6\u00dfer) weiter oder beendet, wenn das gesuchte Element gefunden wurde",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Je nachdem geht der Algorithmus links (wenn kleiner) oder rechts (wenn gr\u00f6\u00dfer) weiter oder beendet, wenn das gesuchte Element gefunden wurde",
              "elements": [
                [
                  168,
                  308
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "userId": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "das zu durchsuchende (sortierte) Array wird in der Mitte geteilt. In jedem Schritt wird entschieden, ob die gesuchte Zahl (wenn die in dem Array enthalten ist) in der rechten oder linken Seite sein muss. So wird das zu durchsuchende Teilst\u00fcck des Arrays immer halbiert.",
          "id": 20,
          "correctionOrComment": "Das zu durchsuchende (sortierte) Array wird in der Mitte geteilt. In jedem Schritt wird entschieden, ob die gesuchte Zahl (wenn die in dem Array enthalten ist) in der rechten oder linken Seite sein muss. So wird das zu durchsuchende Teilst\u00fcck des Arrays immer halbiert.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "So wird das zu durchsuchende Teilst\u00fcck des Arrays immer halbiert",
              "elements": [
                [
                  204,
                  268
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Die bin\u00e4re Suche funktioniert nur bei einer sortierten Menge an Elementen. Bei jedem Durchgang wird ein Vergleichselement aus der Mitte herausgepickt und mit dem gesuchten Element verglichen.  Es werden drei F\u00e4lle unterschieden:  Stimmt das Vergleichselement mit dem gesuchten \u00fcberein, wird die Schleife beendet. Ist das gesuchte Element kleiner als das Vergleichselement, wird nun der bisherige Vorgang im Bereich links neben dem Vergleichselement durchgef\u00fchrt. Ist das gesuchte Element gr\u00f6\u00dfer als das Vergleichselement, wird der bisherige Vorgang im Bereich rechts neben dem Vergleichselement durchgef\u00fchrt.  Die letzten beiden F\u00e4lle werden so oft durchgef\u00fchrt, bis das gesuchte Element mit dem Vergleichselement \u00fcbereinstimmt.",
          "id": 21,
          "correctionOrComment": "Die bin\u00e4re Suche funktioniert nur bei einer sortierten Menge an Elementen. Bei jedem Durchgang wird ein Vergleichselement aus der Mitte herausgepickt und mit dem gesuchten Element verglichen. Es werden drei F\u00e4lle unterschieden: Stimmt das Vergleichselement mit dem gesuchten \u00fcberein, wird die Schleife beendet. Ist das gesuchte Element kleiner als das Vergleichselement, wird nun der bisherige Vorgang im Bereich links neben dem Vergleichselement durchgef\u00fchrt. Ist das gesuchte Element gr\u00f6\u00dfer als das Vergleichselement, wird der bisherige Vorgang im Bereich rechts neben dem Vergleichselement durchgef\u00fchrt. Die letzten beiden F\u00e4lle werden so oft durchgef\u00fchrt, bis das gesuchte Element mit dem Vergleichselement \u00fcbereinstimmt.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Bei jedem Durchgang wird ein Vergleichselement aus der Mitte herausgepickt und mit dem gesuchten Element verglichen",
              "elements": [
                [
                  75,
                  190
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "st das gesuchte Element kleiner als das Vergleichselement, wird nun der bisherige Vorgang im Bereich links neben dem Vergleichselement durchgef\u00fchrt. Ist das gesuchte Element gr\u00f6\u00dfer als das Vergleichselement, wird der bisherige Vorgang im Bereich rechts neben dem Vergleichselement durchgef\u00fchrt",
              "elements": [
                [
                  312,
                  605
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Ein vorsortierter Array. Mittleres Element wird mit gesuchten Element verglichen. Ist das gesuchte Element gr\u00f6\u00dfer, wird das Mittlerem Element zu Ende",
          "id": 22,
          "correctionOrComment": "Ein vorsortierter Array. Mittleres Element wird mit gesuchten Element verglichen. Ist das gesuchte Element gr\u00f6\u00dfer, wird das Mittlerem Element zu Ende",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Mittleres Element wird mit gesuchten Element verglichen",
              "elements": [
                [
                  25,
                  80
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Man teilt die Menge der zu durchsuchenden Menge an Daten in einen Teil, der gr\u00f6\u00dfer und einen der kleiner als das geuchte Element ist ein. Dann entscheidet man sich in welchen der beiden Teile weitergesucht wird - so lange bis man es gefunden hat, oder man keine zu durchsuchenden Element mehr hat. Daf\u00fcr muss eben diese Menge bereits vorsortiert sein oder irgendwie gewichtbar sein.",
          "id": 23,
          "correctionOrComment": "Man teilt die Menge der zu durchsuchenden Menge an Daten in einen Teil, der gr\u00f6\u00dfer und einen der kleiner als das geuchte Element ist ein. Dann entscheidet man sich in welchen der beiden Teile weitergesucht wird - so lange bis man es gefunden hat, oder man keine zu durchsuchenden Element mehr hat. Daf\u00fcr muss eben diese Menge bereits vorsortiert sein oder irgendwie gewichtbar sein.",
          "answerCategory": "missconception",
          "aspects": [],
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Man schaut sich den mittleren Wert einer sortierten (Teil-)Menge an und pr\u00fcft, ob das der gesuchte Wert ist. Falls ja hat man ihn gefunden. Falls nicht, dann wiederholt man den Schritt in der Teilmenge mit den kleineren Eintr\u00e4gen, falls der gesuchte Wert kleiner als der gepr\u00fcfte Wert ist und sonst in der Teilmenge mit den gr\u00f6\u00dferen Eintr\u00e4gen.",
          "id": 24,
          "correctionOrComment": "Man schaut sich den mittleren Wert einer sortierten (Teil-)Menge an und pr\u00fcft, ob das der gesuchte Wert ist. Falls ja hat man ihn gefunden. Falls nicht, dann wiederholt man den Schritt in der Teilmenge mit den kleineren Eintr\u00e4gen, falls der gesuchte Wert kleiner als der gepr\u00fcfte Wert ist und sonst in der Teilmenge mit den gr\u00f6\u00dferen Eintr\u00e4gen.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Man schaut sich den mittleren Wert einer sortierten (Teil-)Menge an und pr\u00fcft, ob das der gesuchte Wert ist",
              "elements": [
                [
                  0,
                  107
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Falls nicht, dann wiederholt man den Schritt in der Teilmenge mit den kleineren Eintr\u00e4gen, falls der gesuchte Wert kleiner als der gepr\u00fcfte Wert ist und sonst in der Teilmenge mit den gr\u00f6\u00dferen Eintr\u00e4gen",
              "elements": [
                [
                  140,
                  342
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das Array wird vorsortiert. Das gesuchte Element wird mit dem Mittleren Element verglichen, Suchbereich wird ver\u00e4ndert, je nachdem ob gesuchtes Element gr\u00f6\u00dfer oder kleiner ist als Mitte",
          "id": 25,
          "correctionOrComment": "Das Array wird vorsortiert. Das gesuchte Element wird mit dem Mittleren Element verglichen, Suchbereich wird ver\u00e4ndert, je nachdem ob gesuchtes Element gr\u00f6\u00dfer oder kleiner ist als Mitte",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Das gesuchte Element wird mit dem Mittleren Element verglichen",
              "elements": [
                [
                  28,
                  90
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Suchbereich wird ver\u00e4ndert, je nachdem ob gesuchtes Element gr\u00f6\u00dfer oder kleiner ist als Mitte",
              "elements": [
                [
                  92,
                  185
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "Das zu suchende Element wird mit dem mittleren Element des sortierten Datensatzes verglichen. Ist es gr\u00f6\u00dfer, wird das mittlere Element zur linken, ist es kleiner zur rechten Grenze des neuen zu durchsuchenden Intervalls.",
          "id": 26,
          "correctionOrComment": "Das zu suchende Element wird mit dem mittleren Element des sortierten Datensatzes verglichen. Ist es gr\u00f6\u00dfer, wird das mittlere Element zur linken, ist es kleiner zur rechten Grenze des neuen zu durchsuchenden Intervalls.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "as zu suchende Element wird mit dem mittleren Element des sortierten Datensatzes verglichen",
              "elements": [
                [
                  1,
                  92
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": " Ist es gr\u00f6\u00dfer, wird das mittlere Element zur linken, ist es kleiner zur rechten Grenze des neuen zu durchsuchenden Intervalls",
              "elements": [
                [
                  94,
                  219
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "h",
          "id": 27,
          "correctionOrComment": "h",
          "answerCategory": "none",
          "aspects": [],
          "userId": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Bei der Bin\u00e4ren Suche wird nicht linear vorgegangen, sondern das Array immer geschickt aufgeteilt, sodass die Laufzeit gegen\u00fcber der linearen Suche verbessert werden kann.",
          "id": 28,
          "correctionOrComment": "Bei der Bin\u00e4ren Suche wird nicht linear vorgegangen, sondern das Array immer geschickt aufgeteilt, sodass die Laufzeit gegen\u00fcber der linearen Suche verbessert werden kann.",
          "answerCategory": "partially_correct",
          "aspects": [],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Die bin\u00e4re Suche l\u00e4uft auf einem sortierten Array. Hier wird ein Vergleichswert mit dem gesuchten ELement verglichen. Je nach Resultat, kann das Element als gefunden angesehen, bzw. der Suchbereich verk\u00fcrzt (meist halbiert) werden. Nach einer Endlichen Zahl von Halbierungen(Ologn) und Vergleichen wird klar, ob das Element enthalten ist, oder nicht.",
          "id": 29,
          "correctionOrComment": "Die bin\u00e4re Suche l\u00e4uft auf einem sortierten Array. Hier wird ein Vergleichswert mit dem gesuchten ELement verglichen. Je nach Resultat, kann das Element als gefunden angesehen, bzw. der Suchbereich verk\u00fcrzt (meist halbiert) werden. Nach einer Endlichen Zahl von Halbierungen(Ologn) und Vergleichen wird klar, ob das Element enthalten ist, oder nicht.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Hier wird ein Vergleichswert mit dem gesuchten ELement verglichen. Je nach Resultat, kann das Element als gefunden angesehen, bzw. der Suchbereich verk\u00fcrzt (meist halbiert) werden",
              "elements": [
                [
                  51,
                  230
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Ich habe ein Element Gesucht. Ich habe Start und Ende des Datensatzes.  Ich halbiere den Datensatz. Ich erhalte das Element Vergleich. Ich Vergleiche Vergleich mit Gesucht, ist das Element gefunden gebe ich es zur\u00fcck. Je nachdem ob Gesucht gr\u00f6\u00dfer oder kleiner Vergleich ist, suche ich in der obere oder unteren h\u00e4lfte des Datensatzes weiter.  Die wiederhole ich, bis gesucht gefunden ist, oder Start > Ende.",
          "id": 30,
          "correctionOrComment": "Ich habe ein Element Gesucht. Ich habe Start und Ende des Datensatzes. Ich halbiere den Datensatz. Ich erhalte das Element Vergleich. Ich Vergleiche Vergleich mit Gesucht, ist das Element gefunden gebe ich es zur\u00fcck. Je nachdem ob Gesucht gr\u00f6\u00dfer oder kleiner Vergleich ist, suche ich in der obere oder unteren h\u00e4lfte des Datensatzes weiter. Die wiederhole ich, bis gesucht gefunden ist, oder Start > Ende.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": " Ich halbiere den Datensatz. Ich erhalte das Element Vergleich. Ich Vergleiche Vergleich mit Gesucht",
              "elements": [
                [
                  71,
                  170
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "Je nachdem ob Gesucht gr\u00f6\u00dfer oder kleiner Vergleich ist, suche ich in der obere oder unteren h\u00e4lfte des Datensatzes weiter",
              "elements": [
                [
                  217,
                  339
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Die bin\u00e4re Suche wird in einem sortierten Datensatz durchgef\u00fchrt. Es wird gepr\u00fcft, ob das gesuchte Element gefunden wurde. Dazu wird zuerst das mittlere Element des Intervalls mit dem gesuchten Element verglichen. Wenn es nicht das gesuchte Element ist, wird gepr\u00fcft, ob das gesuchte Element kleiner oder gr\u00f6\u00dfer als das mittlere Element ist. Ist es kleiner, wird ende=vergleich gesetzt, ist es gr\u00f6\u00dfer wird start=vergleich gesetzt. Es wird also jeweils in der entsprechenden H\u00e4lfte des Intervalls weitergesucht und dort erneut anhand des mittleren Wertes verglichen.",
          "id": 31,
          "correctionOrComment": "Die bin\u00e4re Suche wird in einem sortierten Datensatz durchgef\u00fchrt. Es wird gepr\u00fcft, ob das gesuchte Element gefunden wurde. Dazu wird zuerst das mittlere Element des Intervalls mit dem gesuchten Element verglichen. Wenn es nicht das gesuchte Element ist, wird gepr\u00fcft, ob das gesuchte Element kleiner oder gr\u00f6\u00dfer als das mittlere Element ist. Ist es kleiner, wird ende=vergleich gesetzt, ist es gr\u00f6\u00dfer wird start=vergleich gesetzt. Es wird also jeweils in der entsprechenden H\u00e4lfte des Intervalls weitergesucht und dort erneut anhand des mittleren Wertes verglichen.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Dazu wird zuerst das mittlere Element des Intervalls mit dem gesuchten Element verglichen",
              "elements": [
                [
                  123,
                  212
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Wenn es nicht das gesuchte Element ist, wird gepr\u00fcft, ob das gesuchte Element kleiner oder gr\u00f6\u00dfer als das mittlere Element ist. Ist es kleiner, wird ende=vergleich gesetzt, ist es gr\u00f6\u00dfer wird start=vergleich gesetzt. Es wird also jeweils in der entsprechenden H\u00e4lfte des Intervalls weitergesucht und dort erneut anhand des mittleren Wertes verglichen",
              "elements": [
                [
                  214,
                  564
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die bin\u00e4re Suche sucht in einem sortierten Array. Sie beginnt in der Mitte (start+ende\\/2) und pr\u00fcft, ob das aktuelle Element gleich, gr\u00f6\u00dfer oder kleiner als das gesuchte ist. Entsprechend werden start oder ende neu gesetzte und die Suche nur in der entsprechenden H\u00e4lfte weiterdurchgef\u00fchrt.",
          "id": 32,
          "correctionOrComment": "Die bin\u00e4re Suche sucht in einem sortierten Array. Sie beginnt in der Mitte (start+ende\\/2) und pr\u00fcft, ob das aktuelle Element gleich, gr\u00f6\u00dfer oder kleiner als das gesuchte ist. Entsprechend werden start oder ende neu gesetzte und die Suche nur in der entsprechenden H\u00e4lfte weiterdurchgef\u00fchrt.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Sie beginnt in der Mitte (start+ende\\/2) und pr\u00fcft, ob das aktuelle Element gleich, gr\u00f6\u00dfer oder kleiner als das gesuchte ist",
              "elements": [
                [
                  50,
                  174
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Entsprechend werden start oder ende neu gesetzte und die Suche nur in der entsprechenden H\u00e4lfte weiterdurchgef\u00fchrt",
              "elements": [
                [
                  176,
                  290
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "bei der bin\u00e4ren Suche wird der Suchbereich in einem geordneten Array in zwei bereiche aufgeteilt und je nachdem ob der Wert kleiner ist als der mittlere Wert des sortierten Arrays dann links oder rechts von dem Vergleichsindex weiter gesucht. Dann werden die Start und End indizies angepasst und das selbe nochmal durchgef\u00fchrt.",
          "id": 33,
          "correctionOrComment": "Bei der bin\u00e4ren Suche wird der Suchbereich in einem geordneten Array in zwei bereiche aufgeteilt und je nachdem ob der Wert kleiner ist als der mittlere Wert des sortierten Arrays dann links oder rechts von dem Vergleichsindex weiter gesucht. Dann werden die Start und End indizies angepasst und das selbe nochmal durchgef\u00fchrt.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "je nachdem ob der Wert kleiner ist als der mittlere Wert des sortierten Arrays dann links oder rechts von dem Vergleichsindex weiter gesucht",
              "elements": [
                [
                  101,
                  241
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "je nachdem ob der Wert kleiner ist als der mittlere Wert des sortierten Arrays dann links oder rechts von dem Vergleichsindex weiter gesucht",
              "elements": [
                [
                  101,
                  241
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Es wird immer in die h\u00e4lfte geteilt & dann geguckt ob es gr\u00f6\u00dfer oder kleiner ist & dann wieder das gleiche",
          "id": 34,
          "correctionOrComment": "Es wird immer in die H\u00e4lfte geteilt & dann geguckt ob es gr\u00f6\u00dfer oder kleiner ist & dann wieder das gleiche",
          "answerCategory": "partially_correct",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird jeweils nur das mittlere Element mit dem gesuchten Element verglichen. Je nachdem ob es gr\u00f6\u00dfer oder kleiner ist, bildet es die neue vordere oder hintere Intervallsgrenze.",
          "id": 35,
          "correctionOrComment": "Es wird jeweils nur das mittlere Element mit dem gesuchten Element verglichen. Je nachdem ob es gr\u00f6\u00dfer oder kleiner ist, bildet es die neue vordere oder hintere Intervallsgrenze.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "je nachdem ob der Wert kleiner ist als der mittlere Wert des sortierten Arrays dann links oder rechts von dem Vergleichsindex weiter gesucht",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Je nachdem ob es gr\u00f6\u00dfer oder kleiner ist, bildet es die neue vordere oder hintere Intervallsgrenze",
              "elements": [
                [
                  79,
                  177
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Immer das mittlere Elemente wird mit dem gesuchten Element verglichen, entsprechend des Verh\u00e4ltnisses des gesuchten zur Mitte wird danach nur eine der H\u00e4lften betrachtet",
          "id": 36,
          "correctionOrComment": "Immer das mittlere Elemente wird mit dem gesuchten Element verglichen, entsprechend des Verh\u00e4ltnisses des gesuchten zur Mitte wird danach nur eine der H\u00e4lften betrachtet",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Immer das mittlere Elemente wird mit dem gesuchten Element verglichen",
              "elements": [
                [
                  0,
                  69
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "entsprechend des Verh\u00e4ltnisses des gesuchten zur Mitte wird danach nur eine der H\u00e4lften betrachtet",
              "elements": [
                [
                  71,
                  169
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was geh\u00f6rt zu der Signatur einer Operation in Java?",
      "id": "50809",
      "title": "Signatur in Java",
      "type": "definition",
      "aspects": [
        {
          "text": "der Name"
        },
        {
          "text": "die Parameter",
          "implied": true
        },
        {
          "text": "die Parameterzahl und Reihenfolge der Typen"
        }
      ],
      "assignedWeights": {
        "Signatur": 1,
        "geh\u00f6ren": 1,
        "Name": 5,
        "Parameter": 5,
        "insbesondere": 0,
        "Parameterzahl": 4,
        "Reihenfolge": 5,
        "Typ": 5
      },
      "referenceAnswers": [
        {
          "id": "ref1",
          "text": "Zur Signatur geh\u00f6ren der Name und die Parameter, insbesondere die Parameterzahl und Reihenfolge der Typen.",
          "aspects": [
            {
              "text": "Zur Signatur geh\u00f6ren der Name",
              "aIdx": 0,
              "elements": [
                [
                  0,
                  29
                ]
              ]
            },
            {
              "text": "Zur Signatur geh\u00f6ren ;; die Parameter",
              "aIdx": 1,
              "elements": [
                [
                  0,
                  20
                ],
                [
                  34,
                  47
                ]
              ],
              "implied": true
            },
            {
              "text": "Zur Signatur geh\u00f6ren ;; insbesondere die Parameterzahl und Reihenfolge der Typen",
              "aIdx": 2,
              "elements": [
                [
                  0,
                  20
                ],
                [
                  49,
                  105
                ]
              ]
            }
          ]
        }
      ],
      "studentAnswers": [
        {
          "text": "Ein Methodenkopf",
          "id": 0,
          "correctionOrComment": "Ein Methodenkopf",
          "answerCategory": "irrelevant",
          "aspects": [],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Name der Operation, Anzahl und Typ ihrer Parameter.",
          "id": 1,
          "correctionOrComment": "Dazu geh\u00f6ren der Name der Operation und Anzahl und Typ ihrer Parameter.",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Dazu geh\u00f6ren der Name der Operation",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Dazu geh\u00f6ren ;; Anzahl und Typ ihrer Parameter",
              "elements": [
                [
                  24,
                  54
                ]
              ],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "4cfc3a1811fe40afa401b25ef7fa0379f1f7c1930a04f8755d678474"
        },
        {
          "text": "Name der Operation, Parameter und R\u00fcckgabetyp.",
          "id": 2,
          "correctionOrComment": "Name der Operation, Parameter und R\u00fcckgabetyp.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Name der Operation",
              "elements": [
                [
                  0,
                  18
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Parameter",
              "elements": [
                [
                  20,
                  29
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Name und die \u00dcbergabeparameter.",
          "id": 3,
          "correctionOrComment": "Der Name und die \u00dcbergabeparameter.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Der Name",
              "elements": [
                [
                  0,
                  8
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "die \u00dcbergabeparameter",
              "elements": [
                [
                  13,
                  34
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "R\u00fcckgabewert, Methodenname, Parameter",
          "id": 4,
          "correctionOrComment": "R\u00fcckgabewert, Methodenname, Parameter",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Methodenname",
              "elements": [
                [
                  14,
                  26
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Parameter",
              "elements": [
                [
                  28,
                  37
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Public oder private, die \u00fcbergebenen Argumente und zur\u00fcckgegebener Datentyp oder void.",
          "id": 5,
          "correctionOrComment": "Public oder private, die \u00fcbergebenen Argumente und zur\u00fcckgegebener Datentyp oder void.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": " die \u00fcbergebenen Argumente",
              "elements": [
                [
                  21,
                  46
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Der R\u00fcckgabewert, die Sichtbarkeit und der Name.",
          "id": 6,
          "correctionOrComment": "Der R\u00fcckgabewert, die Sichtbarkeit und der Name.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "der Name",
              "elements": [
                [
                  39,
                  47
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "lol",
          "id": 7,
          "correctionOrComment": "lol",
          "answerCategory": "none",
          "aspects": [],
          "userId": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Die Sichtweise (public, private, protected etc).",
          "id": 8,
          "correctionOrComment": "Die Sichtweise (public, private, protected etc).",
          "answerCategory": "missconception",
          "aspects": [],
          "userId": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Die R\u00fcckgabe und Eingabe der Operation.",
          "id": 9,
          "correctionOrComment": "Die R\u00fcckgabe und Eingabe der Operation.",
          "answerCategory": "missconception",
          "aspects": [
            {
              "text": "Die ;; Eingabe der Operation",
              "elements": [
                [
                  0,
                  3
                ],
                [
                  17,
                  38
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Der R\u00fcckgabetyp, der Operationsname und die \u00fcbergebenen Parameter.",
          "id": 10,
          "correctionOrComment": "Der R\u00fcckgabetyp, der Operationsname und die \u00fcbergebenen Parameter.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "der Operationsname",
              "elements": [
                [
                  17,
                  35
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "die \u00fcbergebenen Parameter",
              "elements": [
                [
                  40,
                  65
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "In die Signatur einer Operation geh\u00f6ren Name der Operation, R\u00fcckgabetyp und die Parameter, die der Operation \u00fcbergeben werden sollen",
          "id": 11,
          "correctionOrComment": "In die Signatur einer Operation geh\u00f6ren Name der Operation, R\u00fcckgabetyp und die Parameter, die der Operation \u00fcbergeben werden sollen",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "In die Signatur einer Operation geh\u00f6ren Name der Operation",
              "elements": [
                [
                  0,
                  58
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "die Parameter, die der Operation \u00fcbergeben werden soll",
              "elements": [
                [
                  76,
                  130
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "\u00d6ffentlichkeit \\/ statisch? \\/ R\u00fcckgabewert \\/ Name \\/ Parameter",
          "id": 12,
          "correctionOrComment": "\u00d6ffentlichkeit, statisch?, R\u00fcckgabewert, Name, Parameter",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Name",
              "elements": [
                [
                  47,
                  51
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Parameter",
              "elements": [
                [
                  55,
                  64
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Name, Parameter.",
          "id": 13,
          "correctionOrComment": "Name, Parameter.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Name",
              "elements": [
                [
                  0,
                  4
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Parameter",
              "elements": [
                [
                  6,
                  15
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "public private protected void dateneingabe",
          "id": 14,
          "correctionOrComment": "public private protected void dateneingabe",
          "answerCategory": "irrelevant",
          "aspects": [
            {
              "text": "dateneingabe",
              "elements": [
                [
                  30,
                  42
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Um die Operation dem Aufruf zuordnen zu k\u00f6nnen",
          "id": 15,
          "correctionOrComment": "Um die Operation dem Aufruf zuordnen zu k\u00f6nnen",
          "answerCategory": "irrelevant",
          "aspects": [],
          "userId": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Sichtbarkeit, R\u00fcckgabewert, name (parameter)",
          "id": 16,
          "correctionOrComment": "Sichtbarkeit, R\u00fcckgabewert, Name, Parameter",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Name",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Parameter",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Methodenkopf, sowie Methodenrumpf. Im Methodenkopf steht der Name, der Operation, der R\u00fcckgabetyp, die zu \u00fcbergebenen Parameter und die Sichtbarkeit.",
          "id": 17,
          "correctionOrComment": "Ein Methodenkopf, sowie Methodenrumpf. Im Methodenkopf steht der Name, der Operation, der R\u00fcckgabetyp, die zu \u00fcbergebenen Parameter und die Sichtbarkeit.",
          "answerCategory": "missconception",
          "aspects": [
            {
              "text": "Im Methodenkopf steht der Name, der Operation ",
              "elements": [
                [
                  39,
                  84
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": " Im Methodenkopf steht ;; die zu \u00fcbergebenen Parameter",
              "elements": [
                [
                  39,
                  60
                ],
                [
                  103,
                  131
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Funktionsname und deren Parameter. Nicht der R\u00fcckgabewert.",
          "id": 18,
          "correctionOrComment": "Funktionsname und deren Parameter. Nicht der R\u00fcckgabewert.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Funktionsname",
              "elements": [
                [
                  0,
                  13
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "deren Parameter",
              "elements": [
                [
                  18,
                  33
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Der Name der Operation und ihre Parameter.",
          "id": 19,
          "correctionOrComment": "Der Name der Operation und ihre Parameter.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Der Name der Operation",
              "elements": [
                [
                  0,
                  22
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "ihre Parameter",
              "elements": [
                [
                  27,
                  41
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "public <R\u00fcckgabetyp> <Name der Klasse> (PArameter)",
          "id": 20,
          "correctionOrComment": "public, R\u00fcckgabetyp, Name der Klasse, Parameter",
          "answerCategory": "irrelevant",
          "aspects": [
            {
              "text": "Name der Klasse",
              "elements": [
                [
                  22,
                  37
                ]
              ],
              "aIdx": 0,
              "label": 2
            },
            {
              "text": "Parameter",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "Sichtbarkeit, R\u00fcckgabewert, Name",
          "id": 21,
          "correctionOrComment": "Sichtbarkeit, R\u00fcckgabewert, Name",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Name",
              "elements": [
                [
                  28,
                  32
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Sichtbarkeits dekalration: public, private, protected Wiedergabe Wert: void, Object, boolean etc. Name ggf: Parameter ggf static",
          "id": 22,
          "correctionOrComment": "Sichtbarkeits dekalration: public, private, protected Wiedergabe Wert: void, Object, boolean etc. Name ggf: Parameter ggf static",
          "answerCategory": "irrelevant",
          "aspects": [
            {
              "text": "Name",
              "elements": [
                [
                  98,
                  102
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Parameter",
              "elements": [
                [
                  108,
                  117
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Kopf mit R\u00fcckgabeart und Parametern und der Rumpf mit dem Algorythmus",
          "id": 23,
          "correctionOrComment": "Der Kopf mit R\u00fcckgabeart und Parametern und der Rumpf mit dem Algorithmus",
          "answerCategory": "missconception",
          "aspects": [
            {
              "text": "Der Kopf mit ;; Parametern",
              "elements": [
                [
                  0,
                  12
                ],
                [
                  29,
                  39
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "userId": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "nnb",
          "id": 24,
          "correctionOrComment": "nnb",
          "answerCategory": "none",
          "aspects": [],
          "userId": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "R\u00fcckgabewert + Methodenname + zu \u00fcbergebene Parameter",
          "id": 25,
          "correctionOrComment": "R\u00fcckgabewert, Methodenname, zu \u00fcbergebene Parameter",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Methodenname",
              "elements": [
                [
                  15,
                  27
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "zu \u00fcbergebene Parameter",
              "elements": [
                [
                  30,
                  53
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "In Java umfasst die Signatur Operationsname und Parameter.",
          "id": 26,
          "correctionOrComment": "In Java umfasst die Signatur Operationsname und Parameter.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "In Java umfasst die Signatur Operationsname",
              "elements": [
                [
                  0,
                  43
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "In Java umfasst die Signatur ;; Parameter",
              "elements": [
                [
                  0,
                  28
                ],
                [
                  48,
                  57
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Name, Parameter und R\u00fcckgabetyp",
          "id": 27,
          "correctionOrComment": "Name, Parameter und R\u00fcckgabetyp",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Name",
              "elements": [
                [
                  0,
                  4
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Parameter",
              "elements": [
                [
                  6,
                  15
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Sichtbarkeit, R\u00fcckgabetyp, Name, evtl. \u00dcbergabewerte",
          "id": 28,
          "correctionOrComment": "Sichtbarkeit, R\u00fcckgabetyp, Name, evtl. \u00dcbergabewerte",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Name",
              "elements": [
                [
                  27,
                  31
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "\u00dcbergabewerte",
              "elements": [
                [
                  39,
                  52
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "ein Funktionskopf (R\u00fcckgabewert Name und ggf. \u00dcbergabeparameter) und ein Funktionsrumpf die Ansammlung von Anweisungen.",
          "id": 29,
          "correctionOrComment": "ein Funktionskopf mit R\u00fcckgabewert, Name und \u00dcbergabeparameter und ein Funktionsrumpf die Ansammlung von Anweisungen.",
          "answerCategory": "missconception",
          "aspects": [
            {
              "text": "ein Funktionskopf mit ;; Name ",
              "elements": [
                [
                  32,
                  36
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "ein Funktionskopf mit ;; \u00dcbergabeparameter",
              "elements": [
                [
                  46,
                  63
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "R\u00fcckgabewert, Parameter und Datentyp",
          "id": 30,
          "correctionOrComment": "R\u00fcckgabewert, Parameter und Datentyp",
          "answerCategory": "binary_correct",
          "aspects": [
            {
              "text": "Parameter",
              "elements": [
                [
                  14,
                  23
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Datentyp",
              "elements": [
                [
                  28,
                  36
                ]
              ],
              "aIdx": 2,
              "label": 1
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "R\u00fcckgabe, Parameter",
          "id": 31,
          "correctionOrComment": "R\u00fcckgabe, Parameter",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Parameter",
              "elements": [
                [
                  10,
                  19
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Der Name und der\\/die Parameter.",
          "id": 32,
          "correctionOrComment": "Der Name und die Parameter.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Der Name",
              "elements": [
                [
                  0,
                  8
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "die Parameter",
              "elements": [
                [
                  18,
                  31
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "R\u00fcckgabetyp, Name und Variablen, die \u00fcbergeben werden",
          "id": 33,
          "correctionOrComment": "R\u00fcckgabetyp, Name und Variablen, die \u00dcbergeben werden",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Name",
              "elements": [
                [
                  13,
                  17
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Variablen, die \u00dcbergeben werden",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Der R\u00fcckgabetyp einer Methode, der Name der Operation und m\u00f6glichweise noch die Werte die der Operation beim Aufruf \u00fcbergeben wird.",
          "id": 34,
          "correctionOrComment": "Der R\u00fcckgabetyp einer Methode, der Name der Operation und m\u00f6glichweise noch die Werte die der Operation beim Aufruf \u00fcbergeben wird.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "der Name der Operation",
              "elements": [
                [
                  31,
                  53
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "m\u00f6glichweise noch die Werte die der Operation beim Aufruf \u00fcbergeben wird",
              "elements": [
                [
                  58,
                  130
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Name und Parameter.",
          "id": 35,
          "correctionOrComment": "Name und Parameter.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "Name",
              "elements": [
                [
                  0,
                  4
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Parameter",
              "elements": [
                [
                  9,
                  18
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "name, anzahl, typ der Parameter",
          "id": 36,
          "correctionOrComment": "Name, Anzahl und Typ der Parameter",
          "answerCategory": "correct",
          "aspects": [
            {
              "text": "Name",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Anzahl und Typ der Parameter",
              "elements": [],
              "aIdx": 2,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es geh\u00f6rt die Sichtbarkeit, der R\u00fcckgabetyp, der Name und die Parameter dazu.",
          "id": 37,
          "correctionOrComment": "Es geh\u00f6rt die Sichtbarkeit, der R\u00fcckgabetyp, der Name und die Parameter dazu.",
          "answerCategory": "partially_correct",
          "aspects": [
            {
              "text": "der Name",
              "elements": [
                [
                  45,
                  53
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "die Parameter",
              "elements": [
                [
                  58,
                  71
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was ist das Prinzip von 'call by value'?",
      "id": "50817",
      "title": "'Call by value'",
      "type": "definition",
      "aspects": [
        {
          "text": "bei der Parameter\u00fcbergabe wird die Kopie des Wertes einer Variablen \u00fcbergeben"
        },
        {
          "text": "\u00c4nderungen dieses Wertes innerhalb der Funktion haben keinen Effekte auf den urspr\u00fcnglichen Wert"
        }
      ],
      "assignedWeights": {
        "'Call by value'": 1,
        "bedeuten": 1,
        "Parameter\u00fcbergabe": 5,
        "Kopie": 5,
        "Wert": 3,
        "Variable": 2,
        "\u00fcbergeben": 4,
        "werden": 2,
        "so": 3,
        "haben": 2,
        "\u00c4nderung": 5,
        "innerhalb": 5,
        "Funktion": 4,
        "kein": 5,
        "Effekt": 3,
        "urspr\u00fcnglich": 5
      },
      "referenceAnswers": [
        {
          "id": "ref1",
          "text": "'Call by value' bedeutet, dass bei der Parameter\u00fcbergabe die Kopie des Wertes einer Variablen \u00fcbergeben wird. So haben \u00c4nderungen dieses Wertes innerhalb der Funktion keinen Effekte auf den urspr\u00fcnglichen Wert.",
          "aspects": [
            {
              "text": "'Call by value' bedeutet, dass bei der Parameter\u00fcbergabe die Kopie des Wertes einer Variablen \u00fcbergeben wird",
              "aIdx": 0,
              "elements": [
                [
                  0,
                  108
                ]
              ]
            },
            {
              "text": "So haben \u00c4nderungen dieses Wertes innerhalb der Funktion keinen Effekte auf den urspr\u00fcnglichen Wert",
              "aIdx": 1,
              "elements": [
                [
                  110,
                  209
                ]
              ]
            }
          ]
        }
      ],
      "studentAnswers": [
        {
          "text": "die Variable wird \u00fcber ihren Wert definiert bsp Int, flow, long",
          "id": 0,
          "aspects": [],
          "correctionOrComment": "die Variable wird \u00fcber ihren Wert definiert bsp Int, flow, long",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Bezieht sich auf eine Variable die als Wert den tats\u00e4chlichen Wert gespeichert hat.",
          "id": 1,
          "aspects": [
            {
              "text": "Bezieht sich auf eine Variable die als Wert den tats\u00e4chlichen Wert gespeichert hat",
              "elements": [
                [
                  0,
                  82
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Bezieht sich auf eine Variable die als Wert den tats\u00e4chlichen Wert gespeichert hat.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Wert ist direkt in der Variable gespeichert",
          "id": 2,
          "aspects": [
            {
              "text": "Der Wert ist direkt in der Variable gespeichert",
              "elements": [
                [
                  0,
                  47
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Der Wert ist direkt in der Variable gespeichert",
          "userId": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Das Prinzip von call by value ist, dass wenn die Variable abgerufen wird, mit dem Wert an sich gearbeitet wird.",
          "id": 3,
          "aspects": [
            {
              "text": "Das Prinzip von call by value ist, dass wenn die Variable abgerufen wird, mit dem Wert an sich gearbeitet wird",
              "elements": [
                [
                  0,
                  110
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Das Prinzip von call by value ist, dass wenn die Variable abgerufen wird, mit dem Wert an sich gearbeitet wird.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "wird durch wert aufgerufen",
          "id": 4,
          "aspects": [],
          "correctionOrComment": "wird durch wert aufgerufen",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "der eigentliche wert einer variablen wird aufgerufen",
          "id": 5,
          "aspects": [
            {
              "text": "der eigentliche Wert einer Variablen wird aufgerufen",
              "elements": [],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "der eigentliche Wert einer Variablen wird aufgerufen",
          "userId": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Call by value bedeutet, dass eine Ver\u00e4nderung eines Parameters keine Auswirkungen auf die aufgerufene Variable hat.",
          "id": 6,
          "aspects": [
            {
              "text": "Call by value bedeutet, dass eine Ver\u00e4nderung eines Parameters keine Auswirkungen auf die aufgerufene Variable hat",
              "elements": [
                [
                  0,
                  114
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Call by value bedeutet, dass eine Ver\u00e4nderung eines Parameters keine Auswirkungen auf die aufgerufene Variable hat.",
          "userId": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Beim Aufrufen einer Operation werden die Parameter kopiert, sodass diese innerhalb der Operation ver\u00e4ndert werden k\u00f6nnen, und au\u00dferhalb der Operation sich nicht ver\u00e4ndern.",
          "id": 7,
          "aspects": [
            {
              "text": "Beim Aufrufen einer Operation werden die Parameter kopiert",
              "elements": [
                [
                  0,
                  58
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "sodass diese innerhalb der Operation ver\u00e4ndert werden k\u00f6nnen, und au\u00dferhalb der Operation sich nicht ver\u00e4ndern",
              "elements": [
                [
                  60,
                  170
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Beim Aufrufen einer Operation werden die Parameter kopiert, sodass diese innerhalb der Operation ver\u00e4ndert werden k\u00f6nnen, und au\u00dferhalb der Operation sich nicht ver\u00e4ndern.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Wenn eine Variable direkt einen Wert verwaltet, wie bei integer oder boolean.",
          "id": 8,
          "aspects": [],
          "correctionOrComment": "Wenn eine Variable direkt einen Wert verwaltet, wie bei integer oder boolean.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "beim call by value wird der Wert kopiert",
          "id": 9,
          "aspects": [
            {
              "text": "Beim call by value wird der Wert kopiert",
              "elements": [],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Beim call by value wird der Wert kopiert",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ruft einen primitiven Datentyp auf.",
          "id": 10,
          "aspects": [],
          "correctionOrComment": "Ruft einen primitiven Datentyp auf.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Ver\u00e4nderung des Parameters hat keine Auswirkung auf die \u00fcbergegebene Variable des primitiven Datentyps.",
          "id": 11,
          "aspects": [
            {
              "text": "Die Ver\u00e4nderung des Parameters hat keine Auswirkung auf die \u00fcbergegebene Variable des primitiven Datentyps",
              "elements": [
                [
                  0,
                  106
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Ver\u00e4nderung des Parameters hat keine Auswirkung auf die \u00fcbergegebene Variable des primitiven Datentyps.",
          "userId": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "aufrufen im programm",
          "id": 12,
          "aspects": [],
          "correctionOrComment": "aufrufen im programm",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Aufrufen, wenn bestimmter Wert gefunden",
          "id": 13,
          "aspects": [],
          "correctionOrComment": "Aufrufen, wenn bestimmter Wert gefunden",
          "userId": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Man ruft direkt die Variable ab - nicht den Pointer.",
          "id": 14,
          "aspects": [
            {
              "text": "Man ruft direkt die Variable ab",
              "elements": [
                [
                  0,
                  31
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Man ruft direkt die Variable ab, nicht den Pointer.",
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Dass nicht die Referenz von Daten sondern die tats\u00e4chlichen Daten abgerufen werden.",
          "id": 15,
          "aspects": [
            {
              "text": "Dass ;; die tats\u00e4chlichen Daten abgerufen werden",
              "elements": [
                [
                  0,
                  4
                ],
                [
                  42,
                  82
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Dass nicht die Referenz von Daten sondern die tats\u00e4chlichen Daten abgerufen werden.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "man bezieht sich auf den Inhalt eines Objektes, nicht auf dessen Namen",
          "id": 16,
          "aspects": [],
          "correctionOrComment": "man bezieht sich auf den Inhalt eines Objektes, nicht auf dessen Namen",
          "userId": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "Wenn wir einen einfachen Datentypen aufrufen, schauen wir direkt auf den Wert, eine \u00c4nderung dieses Wertes hat keinen Einfluss auf den Parameter",
          "id": 17,
          "aspects": [
            {
              "text": "nn wir einen einfachen Datentypen aufrufen, schauen wir direkt auf den Wert",
              "elements": [
                [
                  2,
                  77
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "eine \u00c4nderung dieses Wertes hat keinen Einfluss auf den Parameter",
              "elements": [
                [
                  79,
                  144
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Wenn wir einen einfachen Datentypen aufrufen, schauen wir direkt auf den Wert, eine \u00c4nderung dieses Wertes hat keinen Einfluss auf den Parameter",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "dcv",
          "id": 18,
          "aspects": [],
          "correctionOrComment": "dcv",
          "userId": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Das Prinzip findet bei Methoden statt. In Java werden beispielsweise Int-Werte mithilfe von Call-by-Value aufgerufen. Es wird quasi eine Kopie von dem Parameter erstellt.",
          "id": 19,
          "aspects": [
            {
              "text": "Es wird quasi eine Kopie von dem Parameter erstellt",
              "elements": [
                [
                  118,
                  169
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Das Prinzip findet bei Methoden statt. In Java werden beispielsweise Int-Werte mithilfe von Call-by-Value aufgerufen. Es wird quasi eine Kopie von dem Parameter erstellt.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Parameter werden durch einfaches Kopieren des Inhalt der Variable (primitiver Datentyp) intitialisiert.",
          "id": 20,
          "aspects": [
            {
              "text": "Parameter werden durch einfaches Kopieren des Inhalt der Variable (primitiver Datentyp) intitialisiert",
              "elements": [
                [
                  0,
                  102
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Parameter werden durch einfaches Kopieren des Inhalt der Variable (primitiver Datentyp) intitialisiert.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Das Prinzip von call by value ist, dass ein konkreter Wert \u00fcbergeben wird.",
          "id": 21,
          "aspects": [
            {
              "text": "Das Prinzip von call by value ist, dass ein konkreter Wert \u00fcbergeben wird",
              "elements": [
                [
                  0,
                  73
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Das Prinzip von call by value ist, dass ein konkreter Wert \u00fcbergeben wird.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Wert wurde kopiert und \u00fcbergeben",
          "id": 22,
          "aspects": [
            {
              "text": "Der Wert wurde kopiert und \u00fcbergeben",
              "elements": [
                [
                  0,
                  36
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Der Wert wurde kopiert und \u00fcbergeben",
          "userId": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "primitive Datentypen speichern den Inhalt an sich",
          "id": 23,
          "aspects": [],
          "correctionOrComment": "primitive Datentypen speichern den Inhalt an sich",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das Aufrufen einer Varibale gibt den Wert zur\u00fcck.",
          "id": 24,
          "aspects": [
            {
              "text": "Das Aufrufen einer Varibale gibt den Wert zur\u00fcck",
              "elements": [
                [
                  0,
                  48
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Das Aufrufen einer Varibale gibt den Wert zur\u00fcck.",
          "userId": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "es wird eine variable an eine methode \u00fcbergeben, jedoch nur der Wert dieser, somit hat die Methode keinen Einfluss auf die Variable direkt.",
          "id": 25,
          "aspects": [
            {
              "text": "Es wird eine Variable an eine Methode \u00fcbergeben, jedoch nur der Wert dieser",
              "elements": [],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": " somit hat die Methode keinen Einfluss auf die Variable direkt",
              "elements": [
                [
                  77,
                  138
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Es wird eine Variable an eine Methode \u00fcbergeben, jedoch nur der Wert dieser, somit hat die Methode keinen Einfluss auf die Variable direkt.",
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "der wert wird wiedergegeben",
          "id": 26,
          "aspects": [],
          "correctionOrComment": "der Wert wird wiedergegeben",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird eine Kopie der Variable an die Operation \u00fcbergeben, so das der urspr\u00fcngliche Wert nicht ver\u00e4ndert wird.",
          "id": 27,
          "aspects": [
            {
              "text": "Es wird eine Kopie der Variable an die Operation \u00fcbergeben",
              "elements": [
                [
                  0,
                  58
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "so das der urspr\u00fcngliche Wert nicht ver\u00e4ndert wird",
              "elements": [
                [
                  60,
                  110
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Es wird eine Kopie der Variable an die Operation \u00fcbergeben, so das der urspr\u00fcngliche Wert nicht ver\u00e4ndert wird.",
          "userId": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Bei call-by-value wird auf einen direkten Wert im Speicher zugegriffen.",
          "id": 28,
          "aspects": [],
          "correctionOrComment": "Bei call-by-value wird auf einen direkten Wert im Speicher zugegriffen.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "es wird eine Kopie erzeugt, der Originalwert wird nicht ver\u00e4ndert, die Methode arbeitet mit der Kopie",
          "id": 29,
          "aspects": [
            {
              "text": "es wird eine Kopie erzeugt",
              "elements": [
                [
                  0,
                  26
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "der Originalwert wird nicht ver\u00e4ndert",
              "elements": [
                [
                  28,
                  65
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "es wird eine Kopie erzeugt, der Originalwert wird nicht ver\u00e4ndert, die Methode arbeitet mit der Kopie",
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Nur der Wert wird kopiert und \u00fcbergeben, \u00c4nderungen haben keinen weiteren Einfluss",
          "id": 30,
          "aspects": [
            {
              "text": "Nur der Wert wird kopiert und \u00fcbergeben",
              "elements": [
                [
                  0,
                  39
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "\u00c4nderungen haben keinen weiteren Einfluss",
              "elements": [
                [
                  41,
                  82
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Nur der Wert wird kopiert und \u00fcbergeben, \u00c4nderungen haben keinen weiteren Einfluss",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Wert wird kopiert.",
          "id": 31,
          "aspects": [
            {
              "text": "Der Wert wird kopiert",
              "elements": [
                [
                  0,
                  21
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Der Wert wird kopiert.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was ist das Prinzip von 'call by reference'?",
      "id": "50818",
      "title": "'Call by reference'",
      "type": "definition",
      "aspects": [
        {
          "text": "bei der Parameter\u00fcbergabe wird die Referenz auf den Wert \u00fcbergeben"
        },
        {
          "text": "Ver\u00e4nderungen des Parameters innerhalb der Operation beeinflussen auch den Wert der beim Funktionsaufruf \u00fcbergebenen Variablen"
        }
      ],
      "assignedWeights": {
        "'Call by reference'": 1,
        "bedeuten": 1,
        "Parameter\u00fcbergabe": 5,
        "Referenz": 5,
        "auf": 3,
        "Wert": 1,
        "\u00fcbergeben": 2,
        "werden": 2,
        "so": 3,
        "beeinflussen": 2,
        "Ver\u00e4nderung": 3,
        "Parameter": 5,
        "innerhalb": 4,
        "Operation": 5,
        "auch": 4,
        "Funktionsaufruf": 5,
        "Variable": 2
      },
      "referenceAnswers": [
        {
          "id": "ref1",
          "text": "'Call by reference' bedeutet, dass bei der Parameter\u00fcbergabe eine Referenz auf einen Wert \u00fcbergeben wird. So beeinflussen Ver\u00e4nderungen des Parameters innerhalb der Operation auch den Wert der beim Funktionsaufruf \u00fcbergebenen Variablen.",
          "aspects": [
            {
              "text": "'Call by reference' bedeutet, dass bei der Parameter\u00fcbergabe eine Referenz auf einen Wert \u00fcbergeben wird",
              "aIdx": 0,
              "elements": [
                [
                  0,
                  104
                ]
              ]
            },
            {
              "text": "So beeinflussen Ver\u00e4nderungen des Parameters innerhalb der Operation auch den Wert der beim Funktionsaufruf \u00fcbergebenen Variablen",
              "aIdx": 1,
              "elements": [
                [
                  106,
                  235
                ]
              ]
            }
          ]
        }
      ],
      "studentAnswers": [
        {
          "text": "bei der \u00fcbergabe werden referenzen \u00fcbergeben, sodass \u00e4nderungen auch die urspr\u00fcnglich variable betreffen",
          "id": 0,
          "aspects": [
            {
              "text": "Bei der \u00dcbergabe werden Referenzen \u00fcbergeben",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "sodass \u00c4nderungen auch die urspr\u00fcnglich Variable betreffen",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Bei der \u00dcbergabe werden Referenzen \u00fcbergeben, sodass \u00c4nderungen auch die urspr\u00fcnglich Variable betreffen",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "'Call by reference' bedeutet, dass bei der Parameter\u00fcbergabe die Kopie der Referenz einer Variablen \u00fcbergeben wird.",
          "id": 1,
          "aspects": [
            {
              "text": "'Call by reference' bedeutet, dass bei der Parameter\u00fcbergabe die Kopie der Referenz einer Variablen \u00fcbergeben wird",
              "elements": [
                [
                  0,
                  114
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "'Call by reference' bedeutet, dass bei der Parameter\u00fcbergabe die Kopie der Referenz einer Variablen \u00fcbergeben wird.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Referenz auf den Wert wird als Parameter \u00fcbergeben. Somit kann der Wert \u00fcberall ver\u00e4ndert werden.",
          "id": 2,
          "aspects": [
            {
              "text": "Die Referenz auf den Wert wird als Parameter \u00fcbergeben",
              "elements": [
                [
                  0,
                  54
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Somit kann der Wert \u00fcberall ver\u00e4ndert werden",
              "elements": [
                [
                  56,
                  100
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Referenz auf den Wert wird als Parameter \u00fcbergeben. Somit kann der Wert \u00fcberall ver\u00e4ndert werden.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird die Referenz \u00fcbergeben, sodass \u00c4nderungen sich auf beide auswirken.",
          "id": 3,
          "aspects": [
            {
              "text": "Es wird die Referenz \u00fcbergeben",
              "elements": [
                [
                  0,
                  30
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "sodass \u00c4nderungen sich auf beide auswirken",
              "elements": [
                [
                  32,
                  74
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Es wird die Referenz \u00fcbergeben, sodass \u00c4nderungen sich auf beide auswirken.",
          "userId": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Das Prinzip von call by reference ist, dass bei der \u00dcbergabe von Werten die Referenz \u00fcbergeben wird, Ver\u00e4nderungen sich also auf den urspr\u00fcnglichen Wert auswirken.",
          "id": 4,
          "aspects": [
            {
              "text": "Das Prinzip von call by reference ist, dass bei der \u00dcbergabe von Werten die Referenz \u00fcbergeben wir",
              "elements": [
                [
                  0,
                  98
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "er\u00e4nderungen sich also auf den urspr\u00fcnglichen Wert auswirken",
              "elements": [
                [
                  102,
                  162
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Das Prinzip von call by reference ist, dass bei der \u00dcbergabe von Werten die Referenz \u00fcbergeben wird, Ver\u00e4nderungen sich also auf den urspr\u00fcnglichen Wert auswirken.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "die Referenz einer variablen, also der Speicherort wird \u00fcbergeben",
          "id": 5,
          "aspects": [
            {
              "text": "Die Referenz einer Variablen, also der Speicherort wird \u00fcbergeben",
              "elements": [],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Referenz einer Variablen, also der Speicherort wird \u00fcbergeben",
          "userId": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Call by reference bedeutet, dass bei der Parameter\u00fcbergabe die Referenz der durch die Funktion aufgerufenen und ver\u00e4nderten Variablen kopiert und \u00fcbergeben wird.",
          "id": 6,
          "aspects": [
            {
              "text": "Call by reference bedeutet, dass bei der Parameter\u00fcbergabe die Referenz der durch die Funktion aufgerufenen und ver\u00e4nderten Variablen kopiert und \u00fcbergeben wird",
              "elements": [
                [
                  0,
                  160
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Call by reference bedeutet, dass bei der Parameter\u00fcbergabe die Referenz der durch die Funktion aufgerufenen und ver\u00e4nderten Variablen kopiert und \u00fcbergeben wird.",
          "userId": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Das Prinzip call by reference bedeutet, dass beim Aufrufen einer Operation die Parameter als Verweis \u00fcbergeben werden. Dadurch werden \u00c4nderungen innerhalb der Operation sich auf die urspr\u00fcnglichen Werte auswirken.",
          "id": 7,
          "aspects": [
            {
              "text": "Das Prinzip call by reference bedeutet, dass beim Aufrufen einer Operation die Parameter als Verweis \u00fcbergeben werden",
              "elements": [
                [
                  0,
                  117
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Dadurch werden \u00c4nderungen innerhalb der Operation sich auf die urspr\u00fcnglichen Werte auswirken",
              "elements": [
                [
                  119,
                  212
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Das Prinzip call by reference bedeutet, dass beim Aufrufen einer Operation die Parameter als Verweis \u00fcbergeben werden. Dadurch werden \u00c4nderungen innerhalb der Operation sich auf die urspr\u00fcnglichen Werte auswirken.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Das bei einem Parameter die Referenz \u00fcbergeben wird und eine \u00c4nderung dieser Referenz Auswirkungen auf die ursprungsvariable hat.",
          "id": 8,
          "aspects": [
            {
              "text": "Dass bei einem Parameter die Referenz \u00fcbergeben wird",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "eine \u00c4nderung dieser Referenz Auswirkungen auf die Ursprungsvariable hat",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Dass bei einem Parameter die Referenz \u00fcbergeben wird und eine \u00c4nderung dieser Referenz Auswirkungen auf die Ursprungsvariable hat.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "bei call by reference wird nicht der Wert sondern die Referenz kopiert",
          "id": 9,
          "aspects": [
            {
              "text": "Bei call by reference wird nicht der Wert sondern die Referenz kopiert",
              "elements": [],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Bei call by reference wird nicht der Wert sondern die Referenz kopiert",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ruft eine Referenz auf.",
          "id": 10,
          "aspects": [
            {
              "text": "Ruft eine Referenz auf",
              "elements": [
                [
                  0,
                  22
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Ruft eine Referenz auf.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Wenn ein Array als Parameter \u00fcbergeben wird, haben die \u00c4nderungen des Parameters auswirkung auf das Array.",
          "id": 11,
          "aspects": [
            {
              "text": "haben die \u00c4nderungen des Parameters Auswirkung auf das Array",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Wenn ein Array als Parameter \u00fcbergeben wird, haben die \u00c4nderungen des Parameters Auswirkung auf das Array.",
          "userId": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "zugriff auf die kopie",
          "id": 12,
          "aspects": [
            {
              "text": "Zugriff auf die Kopie",
              "elements": [],
              "aIdx": 0,
              "label": 2
            }
          ],
          "correctionOrComment": "Zugriff auf die Kopie",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Referenz der Variablen wird \u00fcbergeben",
          "id": 13,
          "aspects": [
            {
              "text": "Die Referenz der Variablen wird \u00fcbergeben",
              "elements": [
                [
                  0,
                  41
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Referenz der Variablen wird \u00fcbergeben",
          "userId": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "Man \u00fcbergibt einen Pointer auf die Variable, die man dann beliebig \u00e4ndern kann.",
          "id": 14,
          "aspects": [
            {
              "text": "Man \u00fcbergibt einen Pointer auf die Variable",
              "elements": [
                [
                  0,
                  43
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Man \u00fcbergibt einen Pointer auf die Variable, die man dann beliebig \u00e4ndern kann.",
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Call by reference bedeutet, dass die Referenz und nicht die eigentlichen Daten abgerufen werden. Bei der Parameter\u00fcbergabe einer Operation bedeutet das dann, dass die in der Referenz stehenden Daten im Laufe der Operation ver\u00e4ndert werden k\u00f6nnten.",
          "id": 15,
          "aspects": [
            {
              "text": "Call by reference bedeutet, dass die Referenz und nicht die eigentlichen Daten abgerufen werden",
              "elements": [
                [
                  0,
                  95
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Bei der Parameter\u00fcbergabe einer Operation bedeutet das dann, dass die in der Referenz stehenden Daten im Laufe der Operation ver\u00e4ndert werden k\u00f6nnten",
              "elements": [
                [
                  97,
                  246
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Call by reference bedeutet, dass die Referenz und nicht die eigentlichen Daten abgerufen werden. Bei der Parameter\u00fcbergabe einer Operation bedeutet das dann, dass die in der Referenz stehenden Daten im Laufe der Operation ver\u00e4ndert werden k\u00f6nnten.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Bei call by reference wird die Referenz auf einen Wert \u00fcbergeben, urspr\u00fcnglicher Wert\\/Objekt wird ver\u00e4ndert, es geht nicht nur um Inhalt",
          "id": 16,
          "aspects": [
            {
              "text": "Bei call by reference wird die Referenz auf einen Wert \u00fcbergeben",
              "elements": [
                [
                  0,
                  64
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "urspr\u00fcnglicher Wert\\ Objekt wird ver\u00e4ndert",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Bei call by reference wird die Referenz auf einen Wert \u00fcbergeben, urspr\u00fcnglicher Wert\\ Objekt wird ver\u00e4ndert, es geht nicht nur um Inhalt",
          "userId": "53750c72b7bb26cb6ff7115e383ca150d5a632a909a7f79e2f5274a4"
        },
        {
          "text": "Wir \u00fcber geben nur die Referenz auf ein Objekt (zB bei Strings, Arrays, Objekten), dadurch ver\u00e4ndern wir auch das in den Parametern gespeicherte",
          "id": 17,
          "aspects": [
            {
              "text": "Wir \u00fcber geben nur die Referenz auf ein Objekt",
              "elements": [
                [
                  0,
                  46
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "dadurch ver\u00e4ndern wir auch das in den Parametern gespeicherte",
              "elements": [
                [
                  83,
                  144
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Wir \u00fcber geben nur die Referenz auf ein Objekt (zB bei Strings, Arrays, Objekten), dadurch ver\u00e4ndern wir auch das in den Parametern gespeicherte",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "kml",
          "id": 18,
          "aspects": [],
          "correctionOrComment": "kml",
          "userId": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Ist bei der Parameter\u00fcbergabe von Objekten der Fall. Hier ist es keine Kopie, wie bei dem Prinzip Call-by-Value, sondern es verweist auf die Referenz des Objekts.",
          "id": 19,
          "aspects": [
            {
              "text": "Hier ist es keine Kopie, wie bei dem Prinzip Call-by-Value, sondern es verweist auf die Referenz des Objekts",
              "elements": [
                [
                  53,
                  161
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Ist bei der Parameter\u00fcbergabe von Objekten der Fall. Hier ist es keine Kopie, wie bei dem Prinzip Call-by-Value, sondern es verweist auf die Referenz des Objekts.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Hier wird die Referenz \u00fcbergeben. \u00c4nderungen innerhalb der Funktion wirken sich nun auch auf den urspr\u00fcnglichen Wert aus.",
          "id": 20,
          "aspects": [
            {
              "text": "Hier wird die Referenz \u00fcbergeben",
              "elements": [
                [
                  0,
                  32
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": " \u00c4nderungen innerhalb der Funktion wirken sich nun auch auf den urspr\u00fcnglichen Wert aus",
              "elements": [
                [
                  34,
                  120
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Hier wird die Referenz \u00fcbergeben. \u00c4nderungen innerhalb der Funktion wirken sich nun auch auf den urspr\u00fcnglichen Wert aus.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Bei der Parameter\u00fcbergabe wird eine Kopie der Referenz auf ein Objekt \u00fcbergeben.",
          "id": 21,
          "aspects": [
            {
              "text": "Bei der Parameter\u00fcbergabe wird eine Kopie der Referenz auf ein Objekt \u00fcbergeben",
              "elements": [
                [
                  0,
                  79
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Bei der Parameter\u00fcbergabe wird eine Kopie der Referenz auf ein Objekt \u00fcbergeben.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Bei der Parameter\u00fcbergabe wird eine Kopie der Referenz der Variable \u00fcbergeben. Die Ver\u00e4nderung des Parameters hat somit Auswirkungen auf den Inhalt der Variable",
          "id": 22,
          "aspects": [
            {
              "text": "Bei der Parameter\u00fcbergabe wird eine Kopie der Referenz auf ein Objekt \u00fcbergeben",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Die Ver\u00e4nderung des Parameters hat somit Auswirkungen auf den Inhalt der Variable",
              "elements": [
                [
                  79,
                  160
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Bei der Parameter\u00fcbergabe wird eine Kopie der Referenz der Variable \u00fcbergeben. Die Ver\u00e4nderung des Parameters hat somit Auswirkungen auf den Inhalt der Variable",
          "userId": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "variable h\u00e4lt als wert eine Referenz auf den Inhalt im speicher",
          "id": 23,
          "aspects": [],
          "correctionOrComment": "Die Variable h\u00e4lt als Wert eine Referenz auf den Inhalt im Speicher",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Beim \u00dcbergeben einer Variable wird die Referenz kopiert.",
          "id": 24,
          "aspects": [
            {
              "text": "Beim \u00dcbergeben einer Variable wird die Referenz kopiert",
              "elements": [
                [
                  0,
                  55
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Beim \u00dcbergeben einer Variable wird die Referenz kopiert.",
          "userId": "f09265efb456b0336079ad5b238daa1e38a11b1d71cc0e1a4e8edd56"
        },
        {
          "text": "call bei refernce \u00fcbergibt die Referenz der variablen also die Adresse im Speicher wodurch eine methode auf diese zugreifen kann und diese \u00e4ndern kann.",
          "id": 25,
          "aspects": [
            {
              "text": "Call bei refernce \u00fcbergibt die Referenz der Variablen, also die Adresse im Speicher",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "wodurch eine Methode auf diese zugreifen kann und diese \u00e4ndern kann",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Call bei refernce \u00fcbergibt die Referenz der Variablen, also die Adresse im Speicher, wodurch eine Methode auf diese zugreifen kann und diese \u00e4ndern kann.",
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "die referenz wird kopiert",
          "id": 26,
          "aspects": [
            {
              "text": "die Referenz wird kopiert",
              "elements": [],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "die Referenz wird kopiert",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird der urspr\u00fcngliche Wert an die Operation \u00fcbergeben, sodass \u00c4nderungen innerhalb der Operation Auswirkungen auf den urspr\u00fcnglichen Wert haben.",
          "id": 27,
          "aspects": [
            {
              "text": "Es wird der urspr\u00fcngliche Wert an die Operation \u00fcbergeben",
              "elements": [
                [
                  0,
                  57
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "sodass \u00c4nderungen innerhalb der Operation Auswirkungen auf den urspr\u00fcnglichen Wert haben",
              "elements": [
                [
                  59,
                  147
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Es wird der urspr\u00fcngliche Wert an die Operation \u00fcbergeben, sodass \u00c4nderungen innerhalb der Operation Auswirkungen auf den urspr\u00fcnglichen Wert haben.",
          "userId": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "hier wird die Referenz auf eine Variable \u00fcbergeben und von der Operation auch der Originalwert ge\u00e4ndert",
          "id": 28,
          "aspects": [
            {
              "text": "Hier wird die Referenz auf eine Variable \u00fcbergeben ",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Hier wird ;; von der Operation auch der Originalwert ge\u00e4ndert",
              "elements": [
                [
                  55,
                  103
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Hier wird die Referenz auf eine Variable \u00fcbergeben und von der Operation auch der Originalwert ge\u00e4ndert",
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Die Feferen wird \u00fcbergeben, Ver\u00e4nderungen bleiben auch au\u00dferhalb der Operation erhalten",
          "id": 29,
          "aspects": [
            {
              "text": "Die Referenz wird \u00fcbergeben",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Ver\u00e4nderungen bleiben auch au\u00dferhalb der Operation erhalten",
              "elements": [
                [
                  28,
                  87
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Referenz wird \u00fcbergeben, Ver\u00e4nderungen bleiben auch au\u00dferhalb der Operation erhalten",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Wie werden Klassen in Java einem Paket zugeordnet?",
      "id": "50820",
      "title": "Paketzuordnung",
      "type": "procedure",
      "aspects": [
        {
          "text": "Die Dateien m\u00fcssen im selben Verzeichnis liegen"
        },
        {
          "text": "Der Dateiinhalt muss mit der Anweisung 'package <Verzeichnispfad>' dem Paket hinzugef\u00fcgt werden"
        }
      ],
      "assignedWeights": {
        "Dateien": 5,
        "Paket": 1,
        "zugeh\u00f6rig": 1,
        "Klasse": 1,
        "m\u00fcssen": 4,
        "im": 2,
        "selben": 5,
        "Verzeichnis": 5,
        "liegen": 4,
        "Anweisung": 4,
        "'package <Verzeichnispfad>'": 5,
        "hinzuf\u00fcgen": 2,
        "werden": 0
      },
      "referenceAnswers": [
        {
          "id": "ref1",
          "text": "Die Dateien der zum Paket zugeh\u00f6rigen Klassen m\u00fcssen im selben Verzeichnis liegen und dem Paket mit der Anweisung 'package <Verzeichnispfad>' hinzugef\u00fcgt werden.",
          "aspects": [
            {
              "text": "Die Dateien der zum Paket zugeh\u00f6rigen Klassen m\u00fcssen im selben Verzeichnis liegen",
              "aIdx": 0,
              "elements": [
                [
                  0,
                  91
                ]
              ]
            },
            {
              "text": "und dem Paket mit der Anweisung 'package <Verzeichnispfad>' hinzugef\u00fcgt werden",
              "aIdx": 1,
              "elements": [
                [
                  92,
                  160
                ]
              ]
            }
          ]
        }
      ],
      "studentAnswers": [
        {
          "text": "\u00dcber den methodenkopf, public oder private bspw",
          "id": 0,
          "aspects": [],
          "correctionOrComment": "\u00dcber den methodenkopf, public oder private bspw",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Klassen werden in einem Ordner gespeichert.",
          "id": 1,
          "aspects": [
            {
              "text": "Die Klassen werden in einem Ordner gespeichert",
              "elements": [
                [
                  0,
                  46
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Klassen werden in einem Ordner gespeichert.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Durch den Befehl package.",
          "id": 2,
          "aspects": [
            {
              "text": "Durch den Befehl package",
              "elements": [
                [
                  0,
                  24
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Durch den Befehl package.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "semantik",
          "id": 3,
          "aspects": [],
          "correctionOrComment": "semantik",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "j",
          "id": 4,
          "aspects": [],
          "correctionOrComment": "j",
          "userId": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Die Klasse muss in einem Verzeichnis sein, dass dem Paketnamen entspricht.",
          "id": 5,
          "aspects": [
            {
              "text": "Die Klasse muss in einem Verzeichnis sein",
              "elements": [
                [
                  0,
                  41
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "dass dem Paketnamen entspricht",
              "elements": [
                [
                  43,
                  73
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Die Klasse muss in einem Verzeichnis sein, dass dem Paketnamen entspricht.",
          "userId": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Klassen in Java werden zu einem Paket durch ihren Ordner zugeordnet.",
          "id": 6,
          "aspects": [
            {
              "text": "Klassen in Java werden zu einem Paket durch ihren Ordner zugeordnet",
              "elements": [
                [
                  0,
                  67
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Klassen in Java werden zu einem Paket durch ihren Ordner zugeordnet.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "In dem sie in so einem Paket abgespeichert werden.",
          "id": 7,
          "aspects": [],
          "correctionOrComment": "In dem sie in so einem Paket abgespeichert werden.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "mit der Definition package am Anfang des Codes.",
          "id": 8,
          "aspects": [
            {
              "text": "mit der Definition package am Anfang des Codes",
              "elements": [
                [
                  0,
                  46
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "mit der Definition package am Anfang des Codes.",
          "userId": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "import",
          "id": 9,
          "aspects": [],
          "correctionOrComment": "import",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Indem sie \u00fcber den Pfad zugeordnet werden",
          "id": 10,
          "aspects": [
            {
              "text": "Indem sie \u00fcber den Pfad zugeordnet werden",
              "elements": [
                [
                  0,
                  41
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "Indem sie \u00fcber den Pfad zugeordnet werden",
              "elements": [
                [
                  0,
                  41
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Indem sie \u00fcber den Pfad zugeordnet werden",
          "userId": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "paket.klasse.java",
          "id": 11,
          "aspects": [],
          "correctionOrComment": "paket.klasse.java",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Man packt diese in eine Datei, welche via package XY zu einem solchen zugeh\u00f6rig erkl\u00e4rt wurde.",
          "id": 12,
          "aspects": [
            {
              "text": "welche via package XY zu einem solchen zugeh\u00f6rig erkl\u00e4rt wurde",
              "elements": [
                [
                  31,
                  93
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Man packt diese in eine Datei, welche via package XY zu einem solchen zugeh\u00f6rig erkl\u00e4rt wurde.",
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Dadurch in welchem Ordner sie gespeichert sind. Klassen im gleichen Ordner bilden ein Paket.",
          "id": 13,
          "aspects": [
            {
              "text": "Dadurch in welchem Ordner sie gespeichert sind. Klassen im gleichen Ordner bilden ein Paket",
              "elements": [
                [
                  0,
                  91
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Dadurch in welchem Ordner sie gespeichert sind. Klassen im gleichen Ordner bilden ein Paket.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "package.NameDesPackets",
          "id": 14,
          "aspects": [
            {
              "text": "package.NameDesPackets",
              "elements": [
                [
                  0,
                  22
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "package.NameDesPackets",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "l,l,",
          "id": 15,
          "aspects": [],
          "correctionOrComment": "l,l,",
          "userId": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Das ist dann der jeweilige Ordnername.",
          "id": 16,
          "aspects": [
            {
              "text": "Das ist dann der jeweilige Ordnername",
              "elements": [
                [
                  0,
                  37
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Das ist dann der jeweilige Ordnername.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Klassen m\u00fcssen sich in einem Verzeichnis befinden, dass dem Namen des Pakets entspricht.",
          "id": 17,
          "aspects": [
            {
              "text": "Klassen m\u00fcssen sich in einem Verzeichnis befinden, dass dem Namen des Pakets entspricht",
              "elements": [
                [
                  0,
                  87
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Klassen m\u00fcssen sich in einem Verzeichnis befinden, dass dem Namen des Pakets entspricht",
              "elements": [
                [
                  0,
                  87
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Klassen m\u00fcssen sich in einem Verzeichnis befinden, dass dem Namen des Pakets entspricht.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Um einen Klasse einem Paket zuzuordnen, muss die Klasse in einem Verzeichnis sein, das dem Paketnamen entspricht. In der Java Daten muss zu Beginn das Paket angegeben werden.",
          "id": 18,
          "aspects": [
            {
              "text": "Um einen Klasse einem Paket zuzuordnen, muss die Klasse in einem Verzeichnis sein, das dem Paketnamen entspricht",
              "elements": [
                [
                  0,
                  112
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "In der Java Daten muss zu Beginn das Paket angegeben werden",
              "elements": [
                [
                  114,
                  173
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Um einen Klasse einem Paket zuzuordnen, muss die Klasse in einem Verzeichnis sein, das dem Paketnamen entspricht. In der Java Daten muss zu Beginn das Paket angegeben werden.",
          "userId": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "ordner",
          "id": 19,
          "aspects": [
            {
              "text": "ordner",
              "elements": [
                [
                  0,
                  6
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "ordner",
          "userId": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Mit dem Schl\u00fcsselwort package",
          "id": 20,
          "aspects": [
            {
              "text": "Mit dem Schl\u00fcsselwort package",
              "elements": [
                [
                  0,
                  29
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Mit dem Schl\u00fcsselwort package",
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Ein Verzeichnis packag'Dateipfad'",
          "id": 21,
          "aspects": [
            {
              "text": "Ein Verzeichnis packag'Dateipfad'",
              "elements": [
                [
                  0,
                  33
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "Ein Verzeichnis packag'Dateipfad'",
              "elements": [
                [
                  0,
                  33
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Ein Verzeichnis packag'Dateipfad'",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "import dies.ist.mein.pakage.Klasse;",
          "id": 22,
          "aspects": [],
          "correctionOrComment": "import dies.ist.mein.pakage.Klasse;",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Warum sind Sortierverfahren die darauf beruhen Fehlstellungen von Nachbarn zu beheben im best-case besser als n*log(n)?",
      "id": "50888",
      "title": "BubbleSort",
      "type": "reason",
      "aspects": [
        {
          "text": "Bei einem sortierten Array gibt es keine Fehlstellungen"
        },
        {
          "text": "Das Array muss nur einmal durchlaufen werden"
        }
      ],
      "assignedWeights": {
        "sortiert": 5,
        "Array": 3,
        "geben": 3,
        "kein": 5,
        "Fehlstellungen": 5,
        "m\u00fcssen": 2,
        "nur": 3,
        "einmal": 5,
        "durchlaufen": 5,
        "werden": 1
      },
      "referenceAnswers": [
        {
          "id": "ref1",
          "text": "Bei einem sortierten Array gibt es keine Fehlstellungen. Das Array muss deshalb nur einmal durchlaufen werden.",
          "aspects": [
            {
              "text": "Bei einem sortierten Array gibt es keine Fehlstellungen",
              "aIdx": 0,
              "elements": [
                [
                  0,
                  55
                ]
              ]
            },
            {
              "text": "Das Array muss deshalb nur einmal durchlaufen werden",
              "aIdx": 1,
              "elements": [
                [
                  57,
                  109
                ]
              ]
            }
          ]
        }
      ],
      "studentAnswers": [
        {
          "text": "Best case: Schon sortiert. Nach n-1 Vergleichen ist man dann fertig.",
          "id": 0,
          "aspects": [
            {
              "text": "Schon sortiert",
              "elements": [
                [
                  11,
                  25
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Nach n-1 Vergleichen ist man dann fertig",
              "elements": [
                [
                  27,
                  67
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Best case: Schon sortiert. Nach n-1 Vergleichen ist man dann fertig.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil ein sortiertes Array nur genau n Vergleiche und somit eine Laufzeit von O(n) ben\u00f6tigt.",
          "id": 1,
          "aspects": [
            {
              "text": "ein sortiertes Array",
              "elements": [
                [
                  5,
                  25
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Weil ein sortiertes Array nur genau n Vergleiche ;; ben\u00f6tigt",
              "elements": [
                [
                  0,
                  48
                ],
                [
                  82,
                  90
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Weil ein sortiertes Array nur genau n Vergleiche und somit eine Laufzeit von O(n) ben\u00f6tigt.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Im Best-Case ist das Array schon sortiert. Der Algorithmus kann abbrechen, wenn das Array einmal durchgegangen wurde. Damit ist die Laufzeit n.",
          "id": 2,
          "aspects": [
            {
              "text": "Im Best-Case ist das Array schon sortiert",
              "elements": [
                [
                  0,
                  41
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Der Algorithmus kann abbrechen, wenn das Array einmal durchgegangen wurde",
              "elements": [
                [
                  43,
                  116
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Im Best-Case ist das Array schon sortiert. Der Algorithmus kann abbrechen, wenn das Array einmal durchgegangen wurde. Damit ist die Laufzeit n.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Da viele Fehlstellung bereits beim ersten Durchlauf korrigiert werden.",
          "id": 3,
          "aspects": [
            {
              "text": "Da viele Fehlstellung bereits beim ersten Durchlauf korrigiert werden",
              "elements": [
                [
                  0,
                  69
                ]
              ],
              "aIdx": 0,
              "label": 2
            }
          ],
          "correctionOrComment": "Da viele Fehlstellung bereits beim ersten Durchlauf korrigiert werden.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil im best case die Laufzeit n ist, da nur einmal durchgelaufen werden muss.",
          "id": 4,
          "aspects": [
            {
              "text": "da nur einmal durchgelaufen werden muss",
              "elements": [
                [
                  38,
                  77
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Weil im best case die Laufzeit n ist, da nur einmal durchgelaufen werden muss.",
          "userId": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Da sie im best-case nur das Array durchlaufen und alle Nachbarn einmal vergleichen, also eine Laufzeit von O(n) haben.",
          "id": 5,
          "aspects": [
            {
              "text": "Da sie im best-case nur das Array durchlaufen",
              "elements": [
                [
                  0,
                  45
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Da sie im best-case nur das Array durchlaufen und alle Nachbarn einmal vergleichen, also eine Laufzeit von O(n) haben.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das array wird nur einmal durchgelaufen dh die Laufzeit ist n",
          "id": 6,
          "aspects": [
            {
              "text": "Das Array wird nur einmal durchgelaufen",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Das Array wird nur einmal durchgelaufen dh die Laufzeit ist n",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil im besten Fall das Array schon vorsortiert ist und nur einmal durchlaufen werden muss (um festzustellen dass jede einzelne Position passt).",
          "id": 7,
          "aspects": [
            {
              "text": "Weil im besten Fall das Array schon vorsortiert ist",
              "elements": [
                [
                  0,
                  51
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Weil im besten Fall das Array ;; nur einmal durchlaufen werden muss ",
              "elements": [
                [
                  0,
                  29
                ],
                [
                  56,
                  90
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Weil im besten Fall das Array schon vorsortiert ist und nur einmal durchlaufen werden muss (um festzustellen dass jede einzelne Position passt).",
          "userId": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Falls die Menge vorsortiert ist, wird dies durch ein einmaliges durchlaufen sofort festgestellt.",
          "id": 8,
          "aspects": [
            {
              "text": "Falls die Menge vorsortiert ist",
              "elements": [
                [
                  0,
                  31
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "wird dies durch ein einmaliges durchlaufen sofort festgestellt",
              "elements": [
                [
                  33,
                  95
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Falls die Menge vorsortiert ist, wird dies durch ein einmaliges durchlaufen sofort festgestellt.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Weil sie dann in einem bereits sortierten Array nur die Laufzeit O(n) ben\u00f6tigen.",
          "id": 9,
          "aspects": [
            {
              "text": "in einem bereits sortierten Array",
              "elements": [
                [
                  14,
                  47
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Weil sie dann in einem bereits sortierten Array nur die Laufzeit O(n) ben\u00f6tigen.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil in dem best-case, d.h. wenn das Array schon vorsortiert war, laufen sie nur einmal durch. Wenn richtig implementiert, kommt ein One-Way-Flag - nichts zu tauschen - und der Algorithmus ist fertig. O(n)",
          "id": 10,
          "aspects": [
            {
              "text": "wenn das Array schon vorsortiert war",
              "elements": [
                [
                  28,
                  64
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": " laufen sie nur einmal durch",
              "elements": [
                [
                  66,
                  93
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Weil in dem best-case, d.h. wenn das Array schon vorsortiert war, laufen sie nur einmal durch. Wenn richtig implementiert, kommt ein One-Way-Flag - nichts zu tauschen - und der Algorithmus ist fertig. O(n)",
          "userId": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "dann ist es schon sortiert",
          "id": 11,
          "aspects": [
            {
              "text": "dann ist es schon sortiert",
              "elements": [
                [
                  0,
                  26
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "dann ist es schon sortiert",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil das Array so immer in geordneterer Reihenfolge auftaucht",
          "id": 12,
          "aspects": [],
          "correctionOrComment": "Weil das Array so immer in geordneterer Reihenfolge auftaucht",
          "userId": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "im best case liegt das array bereits sortiert vor und muss deshalb nur einmal durchlaufen werden",
          "id": 13,
          "aspects": [
            {
              "text": "im best case liegt das array bereits sortiert vor",
              "elements": [
                [
                  0,
                  49
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "muss deshalb nur einmal durchlaufen werden",
              "elements": [
                [
                  54,
                  96
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "im best case liegt das array bereits sortiert vor und muss deshalb nur einmal durchlaufen werden",
          "userId": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Bei vorsortierten Arrays muss das Array nur einmal durchlaufen werden. Daher O(n)",
          "id": 14,
          "aspects": [
            {
              "text": "Bei vorsortierten Arrays",
              "elements": [
                [
                  0,
                  24
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "muss das Array nur einmal durchlaufen werden",
              "elements": [
                [
                  25,
                  69
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Bei vorsortierten Arrays muss das Array nur einmal durchlaufen werden. Daher O(n)",
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "kjkjk",
          "id": 15,
          "aspects": [],
          "correctionOrComment": "kjkjk",
          "userId": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Weil sie, wenn alles schon sortiert ist nicht korrigieren m\u00fcssen, d.h. sie m\u00fcssen nur einmal das Array durchlaufen, was O(n) ben\u00f6tigt.",
          "id": 16,
          "aspects": [
            {
              "text": "Weil sie, wenn alles schon sortiert ist nicht korrigieren m\u00fcssen",
              "elements": [
                [
                  0,
                  64
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "sie m\u00fcssen nur einmal das Array durchlaufen",
              "elements": [
                [
                  71,
                  114
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Weil sie, wenn alles schon sortiert ist nicht korrigieren m\u00fcssen, d.h. sie m\u00fcssen nur einmal das Array durchlaufen, was O(n) ben\u00f6tigt.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil das Array im besten Fall nur einmal durchlaufen werden muss.",
          "id": 17,
          "aspects": [
            {
              "text": "Weil das Array im besten Fall nur einmal durchlaufen werden muss",
              "elements": [
                [
                  0,
                  64
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Weil das Array im besten Fall nur einmal durchlaufen werden muss.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Solche Verahren werden abgebrochen, wenn kein Tausch durchgef\u00fchrt wurde. Wenn das Array sortiert war, passiert das in der Zeit n.",
          "id": 18,
          "aspects": [
            {
              "text": "Solche Verahren werden abgebrochen, wenn kein Tausch durchgef\u00fchrt wurde",
              "elements": [
                [
                  0,
                  71
                ]
              ],
              "aIdx": 1,
              "label": 1
            },
            {
              "text": "wenn das Array sortiert war",
              "elements": [],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Solche Verahren werden abgebrochen, wenn kein Tausch durchgef\u00fchrt wurde. Wenn das Array sortiert war, passiert das in der Zeit n.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Weil sie nur einmal das Array durchlaufen und sofort erkennen (au\u00dfer unoptimiertes SelectionSort), wenn im gesamten Array keine Fehlstellung vorliegt. Die Laufzeit betr\u00e4gt dann O(n).",
          "id": 19,
          "aspects": [
            {
              "text": "und sofort erkennen ;;  wenn im gesamten Array keine Fehlstellung vorliegt",
              "elements": [
                [
                  42,
                  61
                ],
                [
                  99,
                  149
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Weil sie nur einmal das Array durchlaufen",
              "elements": [
                [
                  0,
                  41
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Weil sie nur einmal das Array durchlaufen und sofort erkennen (au\u00dfer unoptimiertes SelectionSort), wenn im gesamten Array keine Fehlstellung vorliegt. Die Laufzeit betr\u00e4gt dann O(n).",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil din dem Fall das Array im Best case vorsortiert ist, es also keine Fehlstellung gibt, die man beheben muss",
          "id": 20,
          "aspects": [
            {
              "text": "Weil in dem Fall das Array im Best case vorsortiert ist, es also keine Fehlstellung gibt, die man beheben muss",
              "elements": [],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Weil in dem Fall das Array im Best case vorsortiert ist, es also keine Fehlstellung gibt, die man beheben muss",
          "userId": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "das Array muss wenn es vorsortiert ist nur einmal durchlaufen werden",
          "id": 21,
          "aspects": [
            {
              "text": "das Array muss wenn es vorsortiert",
              "elements": [
                [
                  0,
                  34
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "das Array muss ;; nur einmal durchlaufen werden",
              "elements": [
                [
                  0,
                  14
                ],
                [
                  39,
                  68
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "das Array muss wenn es vorsortiert ist nur einmal durchlaufen werden",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil im besten Fall schon eine sortierte Menge vorliegt und die Menge nur einmal durchlaufen werden muss um herauszufinden dass keine Fehlstellung vorliegt.",
          "id": 22,
          "aspects": [
            {
              "text": "Weil im besten Fall schon eine sortierte Menge vorliegt ;; um herauszufinden dass keine Fehlstellung vorliegt",
              "elements": [
                [
                  0,
                  55
                ],
                [
                  105,
                  155
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": " und die Menge nur einmal durchlaufen werden muss",
              "elements": [
                [
                  56,
                  104
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Weil im besten Fall schon eine sortierte Menge vorliegt und die Menge nur einmal durchlaufen werden muss um herauszufinden dass keine Fehlstellung vorliegt.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "weil im Best Case, nur maximal ein durchlauf n\u00f6tig isst und somit nur O(n)",
          "id": 23,
          "aspects": [
            {
              "text": "weil im Best Case, nur maximal ein Durchlauf n\u00f6tig ist",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "weil im Best Case, nur maximal ein Durchlauf n\u00f6tig ist und somit nur O(n)",
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Bei sortierten daten brauch man nur 1 durchlauf",
          "id": 24,
          "aspects": [
            {
              "text": "Bei sortierten daten",
              "elements": [
                [
                  0,
                  20
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "brauch man nur 1 Durchlauf",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Bei sortierten daten brauch man nur 1 Durchlauf",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Vergleichsbasierend",
          "id": 25,
          "aspects": [],
          "correctionOrComment": "Vergleichsbasierend",
          "userId": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Im besten Fall muss der Datensatz nur einmal durchlaufen werden (O(n)).",
          "id": 26,
          "aspects": [
            {
              "text": "Im besten Fall muss der Datensatz nur einmal durchlaufen werden",
              "elements": [
                [
                  0,
                  63
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Im besten Fall muss der Datensatz nur einmal durchlaufen werden (O(n)).",
          "userId": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Der best case ist, wenn das Array bereits sortiert ist. Dann werden n Vergleiche gemacht und kein Mal getauscht. Der Algorithmus bricht ab, wenn nict getauscht wurde in einem Durchgang.",
          "id": 27,
          "aspects": [
            {
              "text": "Der best case ist, wenn das Array bereits sortiert ist",
              "elements": [
                [
                  0,
                  54
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Der Algorithmus bricht ab, wenn nicht getauscht wurde in einem Durchgang",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Der best case ist, wenn das Array bereits sortiert ist. Dann werden n Vergleiche gemacht und kein Mal getauscht. Der Algorithmus bricht ab, wenn nicht getauscht wurde in einem Durchgang.",
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Da ein bereits richtig sortiertes Array in einem Durchlauf abgearbeitet werden kann",
          "id": 28,
          "aspects": [
            {
              "text": "ein bereits richtig sortiertes Array",
              "elements": [
                [
                  3,
                  39
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "in einem Durchlauf abgearbeitet werden kann",
              "elements": [
                [
                  40,
                  83
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Da ein bereits richtig sortiertes Array in einem Durchlauf abgearbeitet werden kann",
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Nur ein Durchlauf erforderlich, wenn das Array bereits sortiert ist",
          "id": 29,
          "aspects": [
            {
              "text": "wenn das Array bereits sortiert ist",
              "elements": [
                [
                  32,
                  67
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Nur ein Durchlauf erforderlich",
              "elements": [
                [
                  0,
                  30
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Nur ein Durchlauf erforderlich, wenn das Array bereits sortiert ist",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Da dass Array nur einmal durchlaufen werden muss",
          "id": 30,
          "aspects": [
            {
              "text": "Da dass Array nur einmal durchlaufen werden muss",
              "elements": [
                [
                  0,
                  48
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Da dass Array nur einmal durchlaufen werden muss",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Was ist die Idee von Heapsort?",
      "id": "50889",
      "title": "Idee HeapSort",
      "type": "procedure",
      "aspects": [
        {
          "text": "Die durch Vergleiche erlangten Informationen in einem Bin\u00e4rbaum zu speichern"
        },
        {
          "text": "Alle V\u00e4ter des Bin\u00e4rbaumes sind gr\u00f6\u00dfer ist als seine S\u00f6hne"
        },
        {
          "text": "Das gr\u00f6\u00dfte Element befindet in der Wurzel",
          "implied": true
        },
        {
          "text": "Die Wurzel wird iterativ entfernt und der Baum wird wiederhergestellt"
        }
      ],
      "assignedWeights": {
        "Grundidee": 1,
        "sein": 1,
        "durch": 3,
        "Vergleich": 5,
        "erlangen": 2,
        "Information": 5,
        "Bin\u00e4rbaum": 4,
        "speichern": 4,
        "Element": 2,
        "werden": 1,
        "\u00fcbertragen": 2,
        "Baum": 3,
        "Vater": 5,
        "gro\u00df": 4,
        "als": 4,
        "Sohn": 5,
        "befinden": 4,
        "somit": 1,
        "Wurzel": 5,
        "iterativ": 5,
        "entfernen": 5,
        "wiederherstellen": 5
      },
      "referenceAnswers": [
        {
          "id": "ref1",
          "text": "Die Grundidee ist es die durch Vergleiche erlangten Informationen in einem Bin\u00e4rbaum zu speichern. Die Elemente werden so in den Baum \u00fcbertragen, dass der Vater gr\u00f6\u00dfer ist als seine S\u00f6hne. Das gr\u00f6\u00dfte Element befindet sich somit in der Wurzel. Es wird iterativ entfernt und der Baum wird wiederhergestellt.",
          "aspects": [
            {
              "text": "Die Grundidee ist es die durch Vergleiche erlangten Informationen in einem Bin\u00e4rbaum zu speichern",
              "aIdx": 0,
              "elements": [
                [
                  0,
                  97
                ]
              ]
            },
            {
              "text": "Die Elemente werden so in den Baum \u00fcbertragen, dass der Vater gr\u00f6\u00dfer ist als seine S\u00f6hne",
              "aIdx": 1,
              "elements": [
                [
                  99,
                  187
                ]
              ]
            },
            {
              "text": "Das gr\u00f6\u00dfte Element befindet sich somit in der Wurzel",
              "aIdx": 2,
              "elements": [
                [
                  189,
                  241
                ]
              ]
            },
            {
              "text": "Es wird iterativ entfernt und der Baum wird wiederhergestellt",
              "aIdx": 3,
              "elements": [
                [
                  243,
                  304
                ]
              ]
            }
          ]
        }
      ],
      "studentAnswers": [
        {
          "text": "M\u00f6glichst viele der gewonnen Daten zu verwenden, es wird ein Bin\u00e4rbaum konstruiert",
          "id": 0,
          "aspects": [
            {
              "text": "M\u00f6glichst viele der gewonnen Daten zu verwenden, es wird ein Bin\u00e4rbaum konstruiert",
              "elements": [
                [
                  0,
                  82
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "M\u00f6glichst viele der gewonnen Daten zu verwenden, es wird ein Bin\u00e4rbaum konstruiert",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Bin\u00e4rbaum wird erstellt, das Maximum\\/Minimum wird zum 0. Knoten, darunter sind die jeweiligen Kinder, welche aufsteigend bis zum 0. Knoten sortiert werden, danach wird dieser abgeschnitten.",
          "id": 1,
          "aspects": [
            {
              "text": "Ein Bin\u00e4rbaum wird erstellt",
              "elements": [
                [
                  0,
                  27
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "darunter sind die jeweiligen Kinder, welche aufsteigend bis zum 0. Knoten sortiert werden",
              "elements": [
                [
                  70,
                  159
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": " das Maximum oder Minimum wird zum 0. Knoten",
              "elements": [],
              "aIdx": 2,
              "label": 0
            },
            {
              "text": "danach wird dieser abgeschnitten",
              "elements": [
                [
                  161,
                  193
                ]
              ],
              "aIdx": 3,
              "label": 1
            }
          ],
          "correctionOrComment": "Ein Bin\u00e4rbaum wird erstellt, das Maximum oder Minimum wird zum 0. Knoten, darunter sind die jeweiligen Kinder, welche aufsteigend bis zum 0. Knoten sortiert werden, danach wird dieser abgeschnitten.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Man strukturiert die Vergleiche so, dass eine Ver\u00e4nderung m\u00f6glichste viele Informationen erh\u00e4lt.",
          "id": 2,
          "aspects": [
            {
              "text": "Man strukturiert die Vergleiche so, dass eine Ver\u00e4nderung m\u00f6glichste viele Informationen erh\u00e4lt",
              "elements": [
                [
                  0,
                  95
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Man strukturiert die Vergleiche so, dass eine Ver\u00e4nderung m\u00f6glichste viele Informationen erh\u00e4lt.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "In einem Bin\u00e4rbaum wird der Vater als gr\u00f6\u00dferes Element mit seinen kleineren Kindern dargestellt.",
          "id": 3,
          "aspects": [
            {
              "text": "In einem Bin\u00e4rbaum wird der Vater als gr\u00f6\u00dferes Element",
              "elements": [
                [
                  0,
                  54
                ]
              ],
              "aIdx": 2,
              "label": 0
            }
          ],
          "correctionOrComment": "In einem Bin\u00e4rbaum wird der Vater als gr\u00f6\u00dferes Element mit seinen kleineren Kindern dargestellt.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "DIe Elemente werden in einem bin\u00e4rbaum dargestellt und nacheinander ausgelesen.",
          "id": 4,
          "aspects": [
            {
              "text": "DIe Elemente werden in einem bin\u00e4rbaum dargestellt ",
              "elements": [
                [
                  0,
                  50
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "DIe Elemente werden in einem bin\u00e4rbaum dargestellt und nacheinander ausgelesen.",
          "userId": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Mit einem Bin\u00e4rbaum suchen.",
          "id": 5,
          "aspects": [
            {
              "text": "Mit einem Bin\u00e4rbaum suchen",
              "elements": [
                [
                  0,
                  26
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Mit einem Bin\u00e4rbaum suchen.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Man interpretiert die Daten in einem Baum. Mit heapify() wird dieser zu einem Heap gemacht und die Wurzel entfernt. Durch eine weitere Anwendung von heapify() wird der Baum wieder zu einem heap gemacht.",
          "id": 6,
          "aspects": [
            {
              "text": "Man interpretiert die Daten in einem Baum",
              "elements": [
                [
                  0,
                  41
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Man interpretiert die Daten in einem Baum. Mit heapify() wird dieser zu einem Heap gemacht und die Wurzel entfernt. Durch eine weitere Anwendung von heapify() wird der Baum wieder zu einem heap gemacht.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Alle Vergleiche werden genutzt. Die Beziehung des Vaters zu seinen Kindern ist stets, dass der Vater gr\u00f6\u00dfer als seine Kinder ist. Das Maximum ist die Wurzel d.h. immer bekannt in einem Heap. Die Wurzel wird abgeschnitten und in ein Array gepackt, anschlie\u00dfend das letzte Blatt an den Platz der Wurzel gesetzt und der Baum wird zu einem Heap repariert, woraufhin das Maximum wieder bekannt ist und wieder abgeschnitten werden kann...",
          "id": 7,
          "aspects": [
            {
              "text": "Alle Vergleiche werden genutzt",
              "elements": [
                [
                  0,
                  30
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": " Die Beziehung des Vaters zu seinen Kindern ist stets, dass der Vater gr\u00f6\u00dfer als seine Kinder ist",
              "elements": [
                [
                  32,
                  128
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Das Maximum ist die Wurzel",
              "elements": [
                [
                  130,
                  156
                ]
              ],
              "aIdx": 2,
              "label": 0
            },
            {
              "text": "Die Wurzel wird abgeschnitten und in ein Array gepackt, anschlie\u00dfend das letzte Blatt an den Platz der Wurzel gesetzt und der Baum wird zu einem Heap repariert, woraufhin das Maximum wieder bekannt ist und wieder abgeschnitten werden kann",
              "elements": [
                [
                  191,
                  429
                ]
              ],
              "aIdx": 3,
              "label": 0
            }
          ],
          "correctionOrComment": "Alle Vergleiche werden genutzt. Die Beziehung des Vaters zu seinen Kindern ist stets, dass der Vater gr\u00f6\u00dfer als seine Kinder ist. Das Maximum ist die Wurzel d.h. immer bekannt in einem Heap. Die Wurzel wird abgeschnitten und in ein Array gepackt, anschlie\u00dfend das letzte Blatt an den Platz der Wurzel gesetzt und der Baum wird zu einem Heap repariert, woraufhin das Maximum wieder bekannt ist und wieder abgeschnitten werden kann...",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Heapsort schreibt alle Positionen eines Arrays in einen Baum, wo immer die Wurzel den gr\u00f6\u00dften Wert hat und immer die Wurzel eines Teilbaums den gr\u00f6\u00dften Wert des Teilbaums.",
          "id": 8,
          "aspects": [
            {
              "text": "Heapsort schreibt alle Positionen eines Arrays in einen Baum",
              "elements": [
                [
                  0,
                  60
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "immer die Wurzel eines Teilbaums den gr\u00f6\u00dften Wert des Teilbaums",
              "elements": [
                [
                  107,
                  170
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "wo immer die Wurzel den gr\u00f6\u00dften Wert hat",
              "elements": [
                [
                  62,
                  102
                ]
              ],
              "aIdx": 2,
              "label": 0
            }
          ],
          "correctionOrComment": "Heapsort schreibt alle Positionen eines Arrays in einen Baum, wo immer die Wurzel den gr\u00f6\u00dften Wert hat und immer die Wurzel eines Teilbaums den gr\u00f6\u00dften Wert des Teilbaums.",
          "userId": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Bei dem Heapsort wird zun\u00e4chst aus der gegebenen Menge ein heap erstellt. Bei dem Heap ist die Wurzel das gr\u00f6\u00dfte Element. Nun nimmt man die Wurzel hinaus und setzt das letzte Element des Heaps als neue Wurzel und stellt erneut den heap durch heapify wieder her. Dies wird solange wiederholt bis der heap leer ist.",
          "id": 9,
          "aspects": [
            {
              "text": "Bei dem Heapsort wird zun\u00e4chst aus der gegebenen Menge ein heap erstellt",
              "elements": [
                [
                  0,
                  72
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": " Bei dem Heap ist die Wurzel das gr\u00f6\u00dfte Element",
              "elements": [
                [
                  74,
                  120
                ]
              ],
              "aIdx": 2,
              "label": 0
            },
            {
              "text": "Nun nimmt man die Wurzel hinaus und setzt das letzte Element des Heaps als neue Wurzel und stellt erneut den heap durch heapify wieder her. Dies wird solange wiederholt bis der heap leer ist",
              "elements": [
                [
                  122,
                  312
                ]
              ],
              "aIdx": 3,
              "label": 0
            }
          ],
          "correctionOrComment": "Bei dem Heapsort wird zun\u00e4chst aus der gegebenen Menge ein heap erstellt. Bei dem Heap ist die Wurzel das gr\u00f6\u00dfte Element. Nun nimmt man die Wurzel hinaus und setzt das letzte Element des Heaps als neue Wurzel und stellt erneut den heap durch heapify wieder her. Dies wird solange wiederholt bis der heap leer ist.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Die Menge wird als ein Heap betrachtet, bei dem der Vater immer gr\u00f6\u00dfer als seine Kinder ist. Dann entspricht die Wurzel immer dem Maximum und dieses kann mehrmals herausgelesen werden.",
          "id": 10,
          "aspects": [
            {
              "text": "Die Menge wird als ein Heap betrachtet",
              "elements": [
                [
                  0,
                  38
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "bei dem der Vater immer gr\u00f6\u00dfer als seine Kinder ist",
              "elements": [
                [
                  40,
                  91
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Dann entspricht die Wurzel immer dem Maximum",
              "elements": [
                [
                  93,
                  137
                ]
              ],
              "aIdx": 2,
              "label": 0
            },
            {
              "text": "dieses kann mehrmals herausgelesen werden",
              "elements": [
                [
                  142,
                  183
                ]
              ],
              "aIdx": 3,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Menge wird als ein Heap betrachtet, bei dem der Vater immer gr\u00f6\u00dfer als seine Kinder ist. Dann entspricht die Wurzel immer dem Maximum und dieses kann mehrmals herausgelesen werden.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "die Idee ist das in einem Heap alles unter einem Knoten sortiert ist",
          "id": 11,
          "aspects": [
            {
              "text": "die Idee ist das in einem Heap alles unter einem Knoten sortiert ist",
              "elements": [
                [
                  0,
                  68
                ]
              ],
              "aIdx": 2,
              "label": 1
            }
          ],
          "correctionOrComment": "die Idee ist das in einem Heap alles unter einem Knoten sortiert ist",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Array als Baum zu definieren und dann die gr\u00f6\u00dften Elemente sortiert in ein neues Array zu \u00fcbertragen.",
          "id": 12,
          "aspects": [
            {
              "text": "Ein Array als Baum zu definieren",
              "elements": [
                [
                  0,
                  32
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "die gr\u00f6\u00dften Elemente sortiert in ein neues Array zu \u00fcbertragen",
              "elements": [
                [
                  42,
                  104
                ]
              ],
              "aIdx": 3,
              "label": 1
            }
          ],
          "correctionOrComment": "Ein Array als Baum zu definieren und dann die gr\u00f6\u00dften Elemente sortiert in ein neues Array zu \u00fcbertragen.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das Array als Bin\u00e4rbaum zu betrachten und den so zu sortieren, dass Vater gr\u00f6\u00dfer als jedes Kind ist.",
          "id": 13,
          "aspects": [
            {
              "text": "Das Array als Bin\u00e4rbaum zu betrachten",
              "elements": [
                [
                  0,
                  37
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "dass Vater gr\u00f6\u00dfer als jedes Kind ist",
              "elements": [
                [
                  63,
                  99
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Das Array als Bin\u00e4rbaum zu betrachten und dann so zu sortieren, dass Vater gr\u00f6\u00dfer als jedes Kind ist.",
          "userId": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Suchen in form von b\u00e4umen",
          "id": 14,
          "aspects": [],
          "correctionOrComment": "Suchen in form von b\u00e4umen",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "die idee ist es, das array in einen bin\u00e4rbaum zu sortieren, der voraussetzt, dass der Knoten immer gr\u00f6\u00dfer als die Kinder ist. Mit dieser Information kann man immer die Wurzel rausziehen und nach und nach den Heap abbauen",
          "id": 15,
          "aspects": [
            {
              "text": "Die Idee ist es, das Array in einen Bin\u00e4rbaum zu sortieren",
              "elements": [],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "dass der Knoten immer gr\u00f6\u00dfer als die Kinder ist",
              "elements": [
                [
                  77,
                  124
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Mit dieser Information kann man immer die Wurzel rausziehen und nach und nach den Heap abbauen",
              "elements": [
                [
                  126,
                  220
                ]
              ],
              "aIdx": 3,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Idee ist es, das Array in einen Bin\u00e4rbaum zu sortieren, der voraussetzt, dass der Knoten immer gr\u00f6\u00dfer als die Kinder ist. Mit dieser Information kann man immer die Wurzel rausziehen und nach und nach den Heap abbauen",
          "userId": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Die zu sortierenden Elemente werden in einem Bin\u00e4rbaum angeordnet und mithilfe der Operation heapify () sortiert",
          "id": 16,
          "aspects": [
            {
              "text": "Die zu sortierenden Elemente werden in einem Bin\u00e4rbaum angeordnet ",
              "elements": [
                [
                  0,
                  65
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Die zu sortierenden Elemente werden in einem Bin\u00e4rbaum angeordnet und mithilfe der Operation heapify () sortiert",
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "kjk",
          "id": 17,
          "aspects": [],
          "correctionOrComment": "kjk",
          "userId": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Das Array wird in einen Bin\u00e4rbaum mit der Eigenschaft, dass alle V\u00e4ter gr\u00f6\u00dfer als ihre Kinder sind, umgewandelt. Dadurch ist die Wurzel der gr\u00f6\u00dfte Eintrag. Diese wird rausgenommen, das letzte Blatt hochgetauscht und dann wird das Ganze mit dem verbleibenden Teilarray gemacht.",
          "id": 18,
          "aspects": [
            {
              "text": "Das Array wird in einen Bin\u00e4rbaum ;; umgewandelt",
              "elements": [
                [
                  0,
                  33
                ],
                [
                  100,
                  111
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "alle V\u00e4ter gr\u00f6\u00dfer als ihre Kinder sind",
              "elements": [
                [
                  60,
                  98
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Dadurch ist die Wurzel der gr\u00f6\u00dfte Eintrag",
              "elements": [
                [
                  113,
                  154
                ]
              ],
              "aIdx": 2,
              "label": 0
            },
            {
              "text": "Es wird iterativ entfernt und der Baum wird wiederhergestellt",
              "elements": [],
              "aIdx": 3,
              "label": 0
            }
          ],
          "correctionOrComment": "Das Array wird in einen Bin\u00e4rbaum mit der Eigenschaft, dass alle V\u00e4ter gr\u00f6\u00dfer als ihre Kinder sind, umgewandelt. Dadurch ist die Wurzel der gr\u00f6\u00dfte Eintrag. Diese wird rausgenommen, das letzte Blatt hochgetauscht und dann wird das Ganze mit dem verbleibenden Teilarray gemacht.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Bin\u00e4rbaum mit Vater-Kind-Beziehung.",
          "id": 19,
          "aspects": [],
          "correctionOrComment": "Ein Bin\u00e4rbaum mit Vater-Kind-Beziehung.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Ein Array wird als bin\u00e4rer Baum interpretiert, der die Heapbedingung erf\u00fcllt. Die Maximumssuche kann jetzt n mal in der Zeit logn  durchgef\u00fchrt werden.",
          "id": 20,
          "aspects": [
            {
              "text": "Ein Array wird als bin\u00e4rer Baum interpretiert",
              "elements": [
                [
                  0,
                  45
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Ein Array wird als bin\u00e4rer Baum interpretiert, der die Heapbedingung erf\u00fcllt. Die Maximumssuche kann jetzt n mal in der Zeit logn durchgef\u00fchrt werden.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Ein Array wird als Bin\u00e4rbaum interpretiert, wodurch man bei jedem Vergleich Informationen speichert und somit wiederverwerten kann.",
          "id": 21,
          "aspects": [
            {
              "text": "Ein Array wird als Bin\u00e4rbaum interpretiert, wodurch man bei jedem Vergleich Informationen speichert und somit wiederverwerten kann",
              "elements": [
                [
                  0,
                  130
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Ein Array wird als Bin\u00e4rbaum interpretiert, wodurch man bei jedem Vergleich Informationen speichert und somit wiederverwerten kann.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Elemente werden in einem Bin\u00e4rbaum angeordnet. Der Vater ist hierbei immer gr\u00f6\u00dfer als die Kinder. Um diese Bedingung zu erf\u00fcllen muss heapify auf jeder der Teilb\u00e4ume angewendet werden.",
          "id": 22,
          "aspects": [
            {
              "text": "Die Elemente werden in einem Bin\u00e4rbaum angeordnet",
              "elements": [
                [
                  0,
                  49
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "Der Vater ist hierbei immer gr\u00f6\u00dfer als die Kinder",
              "elements": [
                [
                  51,
                  100
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Elemente werden in einem Bin\u00e4rbaum angeordnet. Der Vater ist hierbei immer gr\u00f6\u00dfer als die Kinder. Um diese Bedingung zu erf\u00fcllen muss heapify auf jeder der Teilb\u00e4ume angewendet werden.",
          "userId": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Die Elemente werden so in einem Bin\u00e4rbaum arrangiert, dass eine Kante immer einen Vergleich zwischen zwei Elementen darstellt, bei welchem der Vater das gr\u00f6\u00dfere Element ist. Die so gespeicherten Vergleichsinformationen verschnellern die Suche nach dem gr\u00f6\u00dften Element.",
          "id": 23,
          "aspects": [
            {
              "text": "bei welchem der Vater das gr\u00f6\u00dfere Element is; Die so gespeicherten Vergleichsinformationen verschnellern die Suche nach dem gr\u00f6\u00dften Element",
              "elements": [],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Die Elemente werden so in einem Bin\u00e4rbaum arrangiert, dass eine Kante immer einen Vergleich zwischen zwei Elementen darstellt ;",
              "elements": [],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Elemente werden so in einem Bin\u00e4rbaum arrangiert, dass eine Kante immer einen Vergleich zwischen zwei Elementen darstellt, bei welchem der Vater das gr\u00f6\u00dfere Element ist. Die so gespeicherten Vergleichsinformationen verschnellern die Suche nach dem gr\u00f6\u00dften Element.",
          "userId": "8416c38cc898f1ac7cc9d64e89dab1f70f5ddab002a5b2a1713f93f5"
        },
        {
          "text": "Wir bauen einen Bin\u00e4rbaum wo der Vater gr\u00f6\u00dfer ist als seine Kinder (Heap) und ersetzen die Wurzel (das gr\u00f6\u00dfte Element ) immer mit einem Blatt und tauschen dann durch bis die Heapbedinngung wieder erf\u00fcllt ist",
          "id": 24,
          "aspects": [
            {
              "text": "Wir bauen einen Bin\u00e4rbaum",
              "elements": [
                [
                  0,
                  25
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "wo der Vater gr\u00f6\u00dfer ist als seine Kinder",
              "elements": [
                [
                  26,
                  66
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "ersetzen die Wurzel, das gr\u00f6\u00dfte Element,",
              "elements": [],
              "aIdx": 2,
              "label": 0
            },
            {
              "text": "und ersetzen die Wurzel, das gr\u00f6\u00dfte Element, immer mit einem Blatt und tauschen dann durch bis die Heapbedinngung wieder erf\u00fcllt ist",
              "elements": [],
              "aIdx": 3,
              "label": 0
            }
          ],
          "correctionOrComment": "Wir bauen einen Bin\u00e4rbaum wo der Vater gr\u00f6\u00dfer ist als seine Kinder (Heap) und ersetzen die Wurzel, das gr\u00f6\u00dfte Element, immer mit einem Blatt und tauschen dann durch bis die Heapbedinngung wieder erf\u00fcllt ist",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "heapsort nutzt einen Baum um die Werte zu speichern mit der Bedingung Kinder sind kleiner als Eltern",
          "id": 25,
          "aspects": [
            {
              "text": "Heapsort nutzt einen Baum um die Werte zu speichern ",
              "elements": [],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "mit der Bedingung Kinder sind kleiner als Eltern",
              "elements": [
                [
                  52,
                  100
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Heapsort nutzt einen Baum um die Werte zu speichern mit der Bedingung Kinder sind kleiner als Eltern",
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Ein Baum verwenden um so immer den gr\u00f6\u00dften ans ende zu packen",
          "id": 26,
          "aspects": [],
          "correctionOrComment": "Ein Baum verwenden um so immer den gr\u00f6\u00dften ans ende zu packen",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Baum",
          "id": 27,
          "aspects": [],
          "correctionOrComment": "Baum",
          "userId": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Die Menge wird als Baum darestellt. Die Kanten bilden dabei jeweils Vergleiche, wobei der Knoten jeweils Gr\u00f6\u00dfer als seine Kinder ist.",
          "id": 28,
          "aspects": [
            {
              "text": "Die Menge wird als Baum darestellt. Die Kanten bilden dabei jeweils Vergleiche",
              "elements": [
                [
                  0,
                  78
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "wobei der Knoten jeweils Gr\u00f6\u00dfer als seine Kinder ist",
              "elements": [
                [
                  80,
                  132
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Menge wird als Baum darestellt. Die Kanten bilden dabei jeweils Vergleiche, wobei der Knoten jeweils Gr\u00f6\u00dfer als seine Kinder ist.",
          "userId": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Wir interpretieren das Array als Baum, bei dem jeder Knoten im Wert gr\u00f6\u00dfer ist als seine Kinder. Beim Aufbau eines Heaps merken wir uns an den Kanten die schon erfolgten Vergleiche und nutzen diese sp\u00e4ter wieder. Wenn der Heap aufgebaut ist, steht auf jeden Fall das gr\u00f6\u00dfte Element in der Wurzel. Diese wird dann abgeschnitten und an die letzte Stelle im Array geschrieben. Das letzte Blatt (also der vorletzte Wert im Array) wird dann in die Wurzel geschrieben. Dann werden solange T\u00e4usche vorgenommen bis diese neue Zahl an der richtigen Stelle steht du somit der Baum wieder ein heap ist. dann steht wieder das gr\u00f6\u00dfte Element in der Wurzel und kann ins zweitletzte Element des Arrays geschrieben werden.",
          "id": 29,
          "aspects": [
            {
              "text": "Wir interpretieren das Array als Baum ;;  Beim Aufbau eines Heaps merken wir uns an den Kanten die schon erfolgten Vergleiche und nutzen diese sp\u00e4ter wieder",
              "elements": [
                [
                  0,
                  37
                ],
                [
                  97,
                  211
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "bei dem jeder Knoten im Wert gr\u00f6\u00dfer ist als seine Kinder",
              "elements": [
                [
                  39,
                  95
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Wenn der Heap aufgebaut ist, steht auf jeden Fall das gr\u00f6\u00dfte Element in der Wurzel",
              "elements": [
                [
                  213,
                  295
                ]
              ],
              "aIdx": 2,
              "label": 0
            },
            {
              "text": "Diese wird dann abgeschnitten und an die letzte Stelle im Array geschrieben. Das letzte Blatt (also der vorletzte Wert im Array) wird dann in die Wurzel geschrieben. Dann werden solange T\u00e4usche vorgenommen bis diese neue Zahl an der richtigen Stelle steht du somit der Baum wieder ein heap ist. dann steht wieder das gr\u00f6\u00dfte Element in der Wurzel und kann ins zweitletzte Element des Arrays geschrieben werden",
              "elements": [
                [
                  297,
                  705
                ]
              ],
              "aIdx": 3,
              "label": 0
            }
          ],
          "correctionOrComment": "Wir interpretieren das Array als Baum, bei dem jeder Knoten im Wert gr\u00f6\u00dfer ist als seine Kinder. Beim Aufbau eines Heaps merken wir uns an den Kanten die schon erfolgten Vergleiche und nutzen diese sp\u00e4ter wieder. Wenn der Heap aufgebaut ist, steht auf jeden Fall das gr\u00f6\u00dfte Element in der Wurzel. Diese wird dann abgeschnitten und an die letzte Stelle im Array geschrieben. Das letzte Blatt (also der vorletzte Wert im Array) wird dann in die Wurzel geschrieben. Dann werden solange T\u00e4usche vorgenommen bis diese neue Zahl an der richtigen Stelle steht du somit der Baum wieder ein heap ist. dann steht wieder das gr\u00f6\u00dfte Element in der Wurzel und kann ins zweitletzte Element des Arrays geschrieben werden.",
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Bin\u00e4rer Baum, Kanten repr\u00e4sintieren Vergleiche, Vater gr\u00f6\u00dfer als Kinder",
          "id": 30,
          "aspects": [
            {
              "text": "Bin\u00e4rer Baum, Kanten repr\u00e4sintieren Vergleiche",
              "elements": [
                [
                  0,
                  46
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Vater gr\u00f6\u00dfer als Kinder",
              "elements": [
                [
                  48,
                  71
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Bin\u00e4rer Baum, Kanten repr\u00e4sintieren Vergleiche, Vater gr\u00f6\u00dfer als Kinder",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein bin\u00e4rer Baum, bei dem jeder Vater gr\u00f6\u00dfer als seine beiden Kinder ist",
          "id": 31,
          "aspects": [
            {
              "text": "bei dem jeder Vater gr\u00f6\u00dfer als seine beiden Kinder ist",
              "elements": [
                [
                  18,
                  72
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Ein bin\u00e4rer Baum, bei dem jeder Vater gr\u00f6\u00dfer als seine beiden Kinder ist",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Welche Eigenschaften eines Heaps sind essentiell f\u00fcr das Sortieren?",
      "id": "50890",
      "title": "Eigenschaften eines Heaps",
      "type": "procedure",
      "aspects": [
        {
          "text": "Jeder Vater ist gr\u00f6\u00dfer als seine S\u00f6hne"
        },
        {
          "text": "Der gr\u00f6\u00dfte Wert ist in der Wurzel",
          "implied": true
        },
        {
          "text": "maximale Tiefe von log(n)"
        }
      ],
      "assignedWeights": {
        "Heap": 1,
        "sein": 1,
        "jeder": 4,
        "Vater": 5,
        "gro\u00df": 4,
        "als": 4,
        "Sohn": 5,
        "Wert": 4,
        "Wurzel": 5,
        "haben": 3,
        "maximal": 4,
        "Tiefe": 5,
        "log(n)": 5
      },
      "referenceAnswers": [
        {
          "id": "ref1",
          "text": "In einem Heap ist jeder Vater gr\u00f6\u00dfer als seine S\u00f6hne, der gr\u00f6\u00dfte Wert ist in der Wurzel und er hat maximale Tiefe von log(n).",
          "aspects": [
            {
              "text": "In einem Heap ist jeder Vater gr\u00f6\u00dfer als seine S\u00f6hne",
              "aIdx": 0,
              "elements": [
                [
                  0,
                  52
                ]
              ]
            },
            {
              "text": "der gr\u00f6\u00dfte Wert ist in der Wurzel",
              "aIdx": 1,
              "elements": [
                [
                  54,
                  87
                ]
              ]
            },
            {
              "text": "er hat maximale Tiefe von log(n)",
              "aIdx": 2,
              "elements": [
                [
                  92,
                  124
                ]
              ]
            }
          ]
        }
      ],
      "studentAnswers": [
        {
          "text": "Der Vater ist gr\u00f6\u00dfer als die Kinder",
          "id": 0,
          "aspects": [
            {
              "text": "Der Vater ist gr\u00f6\u00dfer als die Kinder",
              "elements": [
                [
                  0,
                  35
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Der Vater ist gr\u00f6\u00dfer als die Kinder",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Bin\u00e4rbaum, also nur zwei Kinder pro Vater.",
          "id": 1,
          "aspects": [
            {
              "text": "Bin\u00e4rbaum, also nur zwei Kinder pro Vater",
              "elements": [
                [
                  0,
                  41
                ]
              ],
              "aIdx": 2,
              "label": 1
            }
          ],
          "correctionOrComment": "Bin\u00e4rbaum, also nur zwei Kinder pro Vater.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Heap ist ein Bin\u00e4rbaum, in dem jeder Vater gr\u00f6\u00dfer oder gleich den Kindern ist.",
          "id": 2,
          "aspects": [
            {
              "text": "in dem jeder Vater gr\u00f6\u00dfer oder gleich den Kindern ist",
              "elements": [
                [
                  28,
                  81
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Ein Heap ist ein Bin\u00e4rbaum",
              "elements": [
                [
                  0,
                  26
                ]
              ],
              "aIdx": 2,
              "label": 1
            }
          ],
          "correctionOrComment": "Ein Heap ist ein Bin\u00e4rbaum, in dem jeder Vater gr\u00f6\u00dfer oder gleich den Kindern ist.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Kinder sind kleiner als der Vater. Darstellung in einem Bin\u00e4rbaum. Wurzel ist das gr\u00f6\u00dfte Element.",
          "id": 3,
          "aspects": [
            {
              "text": "Kinder sind kleiner als der Vater",
              "elements": [
                [
                  0,
                  33
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Wurzel ist das gr\u00f6\u00dfte Element",
              "elements": [
                [
                  67,
                  96
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Darstellung in einem Bin\u00e4rbaum",
              "elements": [
                [
                  35,
                  65
                ]
              ],
              "aIdx": 2,
              "label": 1
            }
          ],
          "correctionOrComment": "Kinder sind kleiner als der Vater. Darstellung in einem Bin\u00e4rbaum. Wurzel ist das gr\u00f6\u00dfte Element.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die V\u00e4ter sind gr\u00f6\u00dfer als die Kinder",
          "id": 4,
          "aspects": [
            {
              "text": "Die V\u00e4ter sind gr\u00f6\u00dfer als die Kinder",
              "elements": [
                [
                  0,
                  36
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Die V\u00e4ter sind gr\u00f6\u00dfer als die Kinder",
          "userId": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Die Eigenschaft, dass er ein Bin\u00e4rbaum ist, also jeder Vater nur zwei Kinder hat, und dass der Vater immer gr\u00f6\u00dfer als die Kinder ist.",
          "id": 5,
          "aspects": [
            {
              "text": "und dass der Vater immer gr\u00f6\u00dfer als die Kinder ist",
              "elements": [
                [
                  82,
                  132
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "ie Eigenschaft, dass er ein Bin\u00e4rbaum ist, also jeder Vater nur zwei Kinder hat",
              "elements": [
                [
                  1,
                  80
                ]
              ],
              "aIdx": 2,
              "label": 1
            }
          ],
          "correctionOrComment": "Die Eigenschaft, dass er ein Bin\u00e4rbaum ist, also jeder Vater nur zwei Kinder hat, und dass der Vater immer gr\u00f6\u00dfer als die Kinder ist.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der vater ist gr\u00f6\u00dfer als das kind un ddas maximum ist die wurzel also bekannt!",
          "id": 6,
          "aspects": [
            {
              "text": "Der Vater ist gr\u00f6\u00dfer als das Kind",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "das Maximum ist die Wurzel",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Der Vater ist gr\u00f6\u00dfer als das Kind und das Maximum ist die Wurzel also bekannt!",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Dass die Wurzel jedes Teilbaums immer der gr\u00f6\u00dfte Wert des Teilbaums ist.",
          "id": 7,
          "aspects": [
            {
              "text": "Dass die Wurzel jedes Teilbaums immer der gr\u00f6\u00dfte Wert des Teilbaums ist",
              "elements": [
                [
                  0,
                  71
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Dass die Wurzel jedes Teilbaums immer der gr\u00f6\u00dfte Wert des Teilbaums ist.",
          "userId": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Das gr\u00f6\u00dfte Element des Heaps steht in der Wurzel.",
          "id": 8,
          "aspects": [
            {
              "text": "Das gr\u00f6\u00dfte Element des Heaps steht in der Wurzel",
              "elements": [
                [
                  0,
                  48
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Das gr\u00f6\u00dfte Element des Heaps steht in der Wurzel.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Der Vater ist immer gr\u00f6\u00dfer als seine Kinder, die Wurzel ist immer das Maximum.",
          "id": 9,
          "aspects": [
            {
              "text": "er Vater ist immer gr\u00f6\u00dfer als seine Kinder",
              "elements": [
                [
                  1,
                  43
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "die Wurzel ist immer das Maximum",
              "elements": [
                [
                  45,
                  77
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Der Vater ist immer gr\u00f6\u00dfer als seine Kinder, die Wurzel ist immer das Maximum.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "das jeder Teilbaum ein Heap ist",
          "id": 10,
          "aspects": [],
          "correctionOrComment": "das jeder Teilbaum ein Heap ist",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Wurzel muss den gr\u00f6\u00dften Wert haben und die Kinder immer kleiner sein als ihre V\u00e4ter.",
          "id": 11,
          "aspects": [
            {
              "text": " die Kinder immer kleiner sein als ihre V\u00e4ter",
              "elements": [
                [
                  43,
                  87
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Die Wurzel muss den gr\u00f6\u00dften Wert haben",
              "elements": [
                [
                  0,
                  38
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Wurzel muss den gr\u00f6\u00dften Wert haben und die Kinder immer kleiner sein als ihre V\u00e4ter.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das linke Kind = 2i+1, das rechte Kind 2i+2, Vater (i-1)\\/2 ist gr\u00f6\u00dfer als Kinder",
          "id": 12,
          "aspects": [
            {
              "text": " Vater ist gr\u00f6\u00dfer als Kinder",
              "elements": [],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": " Vater ist gr\u00f6\u00dfer als Kinder",
          "userId": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Dass der Vater und die Kinder bekannt sind",
          "id": 13,
          "aspects": [],
          "correctionOrComment": "Dass der Vater und die Kinder bekannt sind",
          "userId": "271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
        },
        {
          "text": "muss ein bin\u00e4rbaum mit tiefe log(n) sein und die V\u00e4ter gr\u00f6\u00dfer als ihre kinder.",
          "id": 14,
          "aspects": [
            {
              "text": " die V\u00e4ter gr\u00f6\u00dfer als ihre kinder",
              "elements": [
                [
                  45,
                  77
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Muss ein Bin\u00e4rbaum mit tiefe log(n) sein",
              "elements": [],
              "aIdx": 2,
              "label": 0
            }
          ],
          "correctionOrComment": "Muss ein Bin\u00e4rbaum mit tiefe log(n) sein und die V\u00e4ter gr\u00f6\u00dfer als ihre kinder.",
          "userId": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "Die Wurzel ist das gr\u00f6\u00dfte Element. Die Kindsknoten bzw. Bl\u00e4tter sind kleiner als der Vater.",
          "id": 15,
          "aspects": [
            {
              "text": "Die Kindsknoten bzw. Bl\u00e4tter sind kleiner als der Vater",
              "elements": [
                [
                  35,
                  90
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Die Wurzel ist das gr\u00f6\u00dfte Element",
              "elements": [
                [
                  0,
                  33
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Wurzel ist das gr\u00f6\u00dfte Element. Die Kindsknoten bzw. Bl\u00e4tter sind kleiner als der Vater.",
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "lm,lm",
          "id": 16,
          "aspects": [],
          "correctionOrComment": "lm,lm",
          "userId": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Dass der Vater gr\u00f6\u00dfer ist als seine Kinder, dass nur die letzte Ebene (die Bl\u00e4tter) und evtl. ein Teil der vorletzten Ebene keine Kinder hat.",
          "id": 17,
          "aspects": [
            {
              "text": "Dass der Vater gr\u00f6\u00dfer ist als seine Kinder,",
              "elements": [
                [
                  0,
                  43
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Dass der Vater gr\u00f6\u00dfer ist als seine Kinder, dass nur die letzte Ebene (die Bl\u00e4tter) und evtl. ein Teil der vorletzten Ebene keine Kinder hat.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Vater-Kind-Beziehung",
          "id": 18,
          "aspects": [],
          "correctionOrComment": "Die Vater-Kind-Beziehung",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Die Heapbedingung ist erf\u00fcllt, die Wurzel jedes Teilbaums ist gr\u00f6\u00dfer als die Kinder.",
          "id": 19,
          "aspects": [
            {
              "text": "die Wurzel jedes Teilbaums ist gr\u00f6\u00dfer als die Kinder",
              "elements": [
                [
                  31,
                  83
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "die Wurzel jedes Teilbaums ist gr\u00f6\u00dfer als die Kinder",
              "elements": [
                [
                  31,
                  83
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Heapbedingung ist erf\u00fcllt, die Wurzel jedes Teilbaums ist gr\u00f6\u00dfer als die Kinder.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Dass der Vater immer gr\u00f6\u00dfer ist als seine Kinder, somit die Wurzel der gr\u00f6\u00dfte Wert des gesamten Arrays ist.",
          "id": 20,
          "aspects": [
            {
              "text": "Dass der Vater immer gr\u00f6\u00dfer ist als seine Kinder",
              "elements": [
                [
                  0,
                  48
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": " somit die Wurzel der gr\u00f6\u00dfte Wert des gesamten Arrays ist",
              "elements": [
                [
                  50,
                  106
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Dass der Vater immer gr\u00f6\u00dfer ist als seine Kinder, somit die Wurzel der gr\u00f6\u00dfte Wert des gesamten Arrays ist.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Wurzel ist das Maximum",
          "id": 21,
          "aspects": [
            {
              "text": "Die Wurzel ist das Maximum",
              "elements": [
                [
                  0,
                  26
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Wurzel ist das Maximum",
          "userId": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Dass in der Wurzel immer das gr\u00f6\u00dfte Element steht",
          "id": 22,
          "aspects": [
            {
              "text": "Dass in der Wurzel immer das gr\u00f6\u00dfte Element steht",
              "elements": [
                [
                  0,
                  49
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Dass in der Wurzel immer das gr\u00f6\u00dfte Element steht",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Bedingung dass die Kinder immer kleiner sind als die Eltern",
          "id": 23,
          "aspects": [
            {
              "text": "Die Bedingung dass die Kinder immer kleiner sind als die Eltern",
              "elements": [
                [
                  0,
                  63
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Bedingung dass die Kinder immer kleiner sind als die Eltern",
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Vater gr\u00f6\u00dfer als Kinder",
          "id": 24,
          "aspects": [
            {
              "text": "Vater gr\u00f6\u00dfer als Kinder",
              "elements": [
                [
                  0,
                  23
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Vater gr\u00f6\u00dfer als Kinder",
          "userId": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Alle Ebenen bis auf die letzte m\u00fcssen vollst\u00e4ndig gef\u00fcllt sein.",
          "id": 25,
          "aspects": [],
          "correctionOrComment": "Alle Ebenen bis auf die letzte m\u00fcssen vollst\u00e4ndig gef\u00fcllt sein.",
          "userId": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Der Bin\u00e4rbaum muss vorsortiert sein",
          "id": 26,
          "aspects": [],
          "correctionOrComment": "Der Bin\u00e4rbaum muss vorsortiert sein",
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "F\u00fcr jeden Knoten gilt dass seine Kinder kleiner sind als er selbst. Wenn Kinder da sind.",
          "id": 27,
          "aspects": [
            {
              "text": "F\u00fcr jeden Knoten gilt dass seine Kinder kleiner sind als er selbst",
              "elements": [
                [
                  0,
                  66
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "F\u00fcr jeden Knoten gilt dass seine Kinder kleiner sind als er selbst. Wenn Kinder da sind.",
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Die Kanten stelllen einen Vergleich da, der Vater ist gr\u00f6\u00dfer als seine beiden Kinder",
          "id": 28,
          "aspects": [
            {
              "text": "der Vater ist gr\u00f6\u00dfer als seine beiden Kinder",
              "elements": [
                [
                  40,
                  84
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Kanten stelllen einen Vergleich da, der Vater ist gr\u00f6\u00dfer als seine beiden Kinder",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Wie muss ein Bin\u00e4rbaum strukturiert sein um ihn in einer Laufzeit von n*log(n) in einen Heap transformiert werden zu k\u00f6nnen? Die Bin\u00e4rb\u00e4ume in den folgenden Aufgaben weisen stets diese Struktur auf.",
      "id": "50891",
      "title": "Struktur eines Heap",
      "type": "procedure",
      "aspects": [
        {
          "text": "Alle Ebenen des Baumes, bis auf die letzte, m\u00fcssen vollst\u00e4ndig bef\u00fcllt sein"
        },
        {
          "text": "Auf der vorletzten Ebene darf maximal ein Teilbaum nicht voll besetzt sein."
        }
      ],
      "assignedWeights": {
        "alle": 4,
        "Ebenen": 5,
        "Baum": 3,
        "m\u00fcssen": 3,
        "bis": 2,
        "auf": 2,
        "letzte": 5,
        "vollst\u00e4ndig": 5,
        "be\u00fcllen": 4,
        "sein": 2,
        "vorletzte": 4,
        "d\u00fcrfen": 3,
        "maximal": 2,
        "Teilbaum": 1,
        "nicht": 3,
        "voll": 4
      },
      "referenceAnswers": [
        {
          "id": "ref1",
          "text": "Alle Ebenen des Baumes, bis auf die letzte, m\u00fcssen vollst\u00e4ndig bef\u00fcllt sein. Auf der vorletzten Ebene darf maximal ein Teilbaum nicht voll besetzt sein.",
          "aspects": [
            {
              "text": "Alle Ebenen des Baumes, bis auf die letzte, m\u00fcssen vollst\u00e4ndig bef\u00fcllt sein",
              "aIdx": 0,
              "elements": [
                [
                  0,
                  75
                ]
              ]
            },
            {
              "text": "Auf der vorletzten Ebene darf maximal ein Teilbaum nicht voll besetzt sein",
              "aIdx": 1,
              "elements": [
                [
                  77,
                  151
                ]
              ]
            }
          ]
        }
      ],
      "studentAnswers": [
        {
          "text": "er muss sortiert sein der gr\u00f6\u00dfte wert in der wurzel die kleinsten in den Bl\u00e4tter, es muss ein bin\u00e4rbaum sein",
          "id": 0,
          "aspects": [],
          "correctionOrComment": "Er muss sortiert sein, der gr\u00f6\u00dfte Wert in der Wurzel die Kleinsten in den Bl\u00e4ttern, es muss ein Bin\u00e4rbaum sein",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Alle Ebenen des Baumes, bis auf die letzte, m\u00fcssen vollst\u00e4ndig bef\u00fcllt sein. Die letzte Ebene muss vom linken Ende bis zum rechtesten Element vollst\u00e4ndig bef\u00fcllt sein.",
          "id": 1,
          "aspects": [
            {
              "text": "Alle Ebenen des Baumes, bis auf die letzte, m\u00fcssen vollst\u00e4ndig bef\u00fcllt sein",
              "elements": [
                [
                  0,
                  75
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Die letzte Ebene muss vom linken Ende bis zum rechtesten Element vollst\u00e4ndig bef\u00fcllt sein",
              "elements": [
                [
                  77,
                  166
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Alle Ebenen des Baumes, bis auf die letzte, m\u00fcssen vollst\u00e4ndig bef\u00fcllt sein. Die letzte Ebene muss vom linken Ende bis zum rechtesten Element vollst\u00e4ndig bef\u00fcllt sein.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Ein Knoten hat maximal zwei Kinder.",
          "id": 2,
          "aspects": [],
          "correctionOrComment": "Ein Knoten hat maximal zwei Kinder.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "geht das nicht bei jedem?",
          "id": 3,
          "aspects": [],
          "correctionOrComment": "geht das nicht bei jedem?",
          "userId": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Er muss eine Tiefe von maximal n*log(n) haben.",
          "id": 4,
          "aspects": [
            {
              "text": "Er muss eine Tiefe von maximal n*log(n) haben",
              "elements": [
                [
                  0,
                  45
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Er muss eine Tiefe von maximal n*log(n) haben.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "er muss die maximale tiefe log(n) haben. Alle m\u00f6glichen Positionen sind besetzt. geringst m\u00f6gliche tiefe. Jeder Vater hat zwangsl\u00e4ufig 2 kinder au\u00dfer der letzte.",
          "id": 5,
          "aspects": [
            {
              "text": "er muss die maximale tiefe log(n) haben",
              "elements": [
                [
                  0,
                  39
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Jeder Vater hat zwangsl\u00e4ufig 2 kinder au\u00dfer der letzte",
              "elements": [
                [
                  106,
                  160
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "er muss die maximale tiefe log(n) haben. Alle m\u00f6glichen Positionen sind besetzt. geringst m\u00f6gliche tiefe. Jeder Vater hat zwangsl\u00e4ufig 2 kinder au\u00dfer der letzte.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Er muss schon vorsortiert sein.",
          "id": 6,
          "aspects": [],
          "correctionOrComment": "Er muss schon vorsortiert sein.",
          "userId": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Der Bin\u00e4rbaum muss in den beiden Kindern der Wurzel Heaps besitzen.",
          "id": 7,
          "aspects": [],
          "correctionOrComment": "Der Bin\u00e4rbaum muss in den beiden Kindern der Wurzel Heaps besitzen.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Die Ebenen m\u00fcssen soweit aufgef\u00fcllt werden, wie es m\u00f6glich ist.",
          "id": 8,
          "aspects": [
            {
              "text": "Die Ebenen m\u00fcssen soweit aufgef\u00fcllt werden, wie es m\u00f6glich ist",
              "elements": [
                [
                  0,
                  62
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Ebenen m\u00fcssen soweit aufgef\u00fcllt werden, wie es m\u00f6glich ist.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "unsortiert",
          "id": 9,
          "aspects": [],
          "correctionOrComment": "unsortiert",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "darf nur 2 kinder haben, muss tiefe log(n) haben",
          "id": 10,
          "aspects": [
            {
              "text": "muss tiefe log(n) haben",
              "elements": [
                [
                  25,
                  48
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "darf nur 2 kinder haben, muss tiefe log(n) haben",
          "userId": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "klkl",
          "id": 11,
          "aspects": [],
          "correctionOrComment": "klkl",
          "userId": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Egal wie.",
          "id": 12,
          "aspects": [],
          "correctionOrComment": "Egal wie.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Er muss konstanz gef\u00fcllt sein.",
          "id": 13,
          "aspects": [
            {
              "text": "Er muss konstant gef\u00fcllt sein",
              "elements": [],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Er muss konstant gef\u00fcllt sein.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Wir f\u00fcllen die Knoten von oben nach unten und von links nach rechts auf, anschlie\u00dfend \u00fcberpr\u00fcfen wir jeden Knoten, ob er die Bedinngungen erf\u00fcllt",
          "id": 14,
          "aspects": [
            {
              "text": "Wir f\u00fcllen die Knoten von oben nach unten ",
              "elements": [
                [
                  0,
                  41
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Wir f\u00fcllen die Knoten ;; von links nach rechts auf",
              "elements": [
                [
                  0,
                  21
                ],
                [
                  46,
                  71
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Wir f\u00fcllen die Knoten von oben nach unten und von links nach rechts auf, anschlie\u00dfend \u00fcberpr\u00fcfen wir jeden Knoten, ob er die Bedinngungen erf\u00fcllt",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "geringe TIefe",
          "id": 15,
          "aspects": [],
          "correctionOrComment": "geringe TIefe",
          "userId": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Er muss als Suchbaum strukturiert sein.",
          "id": 16,
          "aspects": [],
          "correctionOrComment": "Er muss als Suchbaum strukturiert sein.",
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Bis auf die letzte Ebene vollst\u00e4ndig gef\u00fcllt, diese soweit wie m\u00f6glich von links nach rechts gef\u00fcllt",
          "id": 17,
          "aspects": [
            {
              "text": "Bis auf die letzte Ebene vollst\u00e4ndig gef\u00fcllt",
              "elements": [
                [
                  0,
                  44
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "diese soweit wie m\u00f6glich von links nach rechts gef\u00fcllt",
              "elements": [
                [
                  46,
                  100
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Bis auf die letzte Ebene vollst\u00e4ndig gef\u00fcllt, diese soweit wie m\u00f6glich von links nach rechts gef\u00fcllt",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "alle Ebenen muss vollst\u00e4ndig gef\u00fcllt sein",
          "id": 18,
          "aspects": [
            {
              "text": "alle Ebenen muss vollst\u00e4ndig gef\u00fcllt sein",
              "elements": [
                [
                  0,
                  41
                ]
              ],
              "aIdx": 0,
              "label": 2
            }
          ],
          "correctionOrComment": "alle Ebenen muss vollst\u00e4ndig gef\u00fcllt sein",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    },
    {
      "text": "Wie wird aus einem Bin\u00e4rbaum dessen beiden Teilb\u00e4ume selber Heaps sind ein Heap erstellt? Wieso ben\u00f6tigt diese Operation eine log(n) Schritte?",
      "id": "50892",
      "title": "Heap reparieren",
      "type": "procedure",
      "aspects": [
        {
          "text": "Das Element in der Wurzel tauscht immer wieder die Position mit dem gr\u00f6\u00dferen seiner Kinder bis der Heap wiederhergestellt ist"
        },
        {
          "text": "Der Bin\u00e4rbaum besitzt maximal log(n) Ebenen"
        }
      ],
      "assignedWeights": {
        "Element": 4,
        "in": 3,
        "Wurzel": 5,
        "tauschen": 5,
        "immer": 4,
        "wieder": 4,
        "Position": 5,
        "gro\u00df": 5,
        "Kinder": 5,
        "bis": 3,
        "Heap": 1,
        "wiederherstellen": 4,
        "Bin\u00e4rbaum": 2,
        "maximal": 2,
        "besitzen": 3,
        "log(n)": 5,
        "Ebenen": 5
      },
      "referenceAnswers": [
        {
          "id": "ref1",
          "text": "Das Element in der Wurzel tauscht immer wieder die Position mit dem gr\u00f6\u00dferen seiner Kinder bis der Heap wiederhergestellt ist. Der Bin\u00e4rbaum besitzt maximal log(n) Ebenen.",
          "aspects": [
            {
              "text": "Das Element in der Wurzel tauscht immer wieder die Position mit dem gr\u00f6\u00dferen seiner Kinder bis der Heap wiederhergestellt ist",
              "aIdx": 0,
              "elements": [
                [
                  0,
                  125
                ]
              ]
            },
            {
              "text": "Der Bin\u00e4rbaum besitzt maximal log(n) Ebenen",
              "aIdx": 1,
              "elements": [
                [
                  127,
                  170
                ]
              ]
            }
          ]
        }
      ],
      "studentAnswers": [
        {
          "text": "das letzte (rechteste) Blatt wird die neue Wurzel und solange nach unten getauscht bis der heap wieder sortiert ist",
          "id": 0,
          "aspects": [
            {
              "text": "das letzte (rechteste) Blatt wird die neue Wurzel und solange nach unten getauscht bis der heap wieder sortiert ist",
              "elements": [
                [
                  0,
                  115
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "das letzte (rechteste) Blatt wird die neue Wurzel und solange nach unten getauscht bis der heap wieder sortiert ist",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das Element in der Wurzel tauscht immer wieder die Position mit dem gr\u00f6\u00dferen seiner Kinder, bis es selber wieder ein Blatt ist oder gr\u00f6\u00dfer ist als beide Kinder. Der Bin\u00e4rbaum besitzt maximal log(n) Ebenen.",
          "id": 1,
          "aspects": [
            {
              "text": "Das Element in der Wurzel tauscht immer wieder die Position mit dem gr\u00f6\u00dferen seiner Kinder, bis es selber wieder ein Blatt ist oder gr\u00f6\u00dfer ist als beide Kinder",
              "elements": [
                [
                  0,
                  159
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Der Bin\u00e4rbaum besitzt maximal log(n) Ebenen",
              "elements": [
                [
                  161,
                  204
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Das Element in der Wurzel tauscht immer wieder die Position mit dem gr\u00f6\u00dferen seiner Kinder, bis es selber wieder ein Blatt ist oder gr\u00f6\u00dfer ist als beide Kinder. Der Bin\u00e4rbaum besitzt maximal log(n) Ebenen.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Heapify auf die Teilb\u00e4ume anwenden.",
          "id": 2,
          "aspects": [],
          "correctionOrComment": "Heapify auf die Teilb\u00e4ume anwenden.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das Letzte Blatt wird zur Wurzel und danach wird dieses mit dem jeweils gr\u00f6\u00dften Kind getauscht solange das Kinde gr\u00f6\u00dfer ist. Die Laufzeit ergibt sich daraus, dass die Tiefe des Baumes maximal log(n) ist.",
          "id": 3,
          "aspects": [
            {
              "text": "Das Letzte Blatt wird zur Wurzel und danach wird dieses mit dem jeweils gr\u00f6\u00dften Kind getauscht solange das Kinde gr\u00f6\u00dfer ist",
              "elements": [
                [
                  0,
                  123
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Die Laufzeit ergibt sich daraus, dass die Tiefe des Baumes maximal log(n) ist",
              "elements": [
                [
                  125,
                  202
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Das Letzte Blatt wird zur Wurzel und danach wird dieses mit dem jeweils gr\u00f6\u00dften Kind getauscht solange das Kinde gr\u00f6\u00dfer ist. Die Laufzeit ergibt sich daraus, dass die Tiefe des Baumes maximal log(n) ist.",
          "userId": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "die zwei kinder werden verglichen und das gr\u00f6\u00dfte der kinder wird mit dem vater getauscht wenn es gr\u00f6\u00dfer als der vater ist. diese operation wird durchgef\u00fchrt solange v kinder hat, dh es werden alle knoten auf der strecke auf der getausht wurde \u00fcberpr\u00fcft, bis man bei einem blatt ankommt. Die strecke bis man bei einem Blatt ankommt ist die tiefe eines baums, die maximal log(n ) ist. Dh es werden maximal log(n) tauschs durchgef\u00fchrt.",
          "id": 4,
          "aspects": [
            {
              "text": "Die zwei Kinder werden verglichen und das Gr\u00f6\u00dfte der Kinder wird mit dem Vater getauscht, wenn es gr\u00f6\u00dfer als der Vater ist. diese Operation wird durchgef\u00fchrt solange der Vater Kinder hat ;; bis man bei einem Blatt ankommt",
              "elements": [
                [
                  299,
                  330
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Die Strecke bis man bei einem Blatt ankommt ist die Tiefe eines Baums, die maximal log(n ) ist",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Die zwei Kinder werden verglichen und das Gr\u00f6\u00dfte der Kinder wird mit dem Vater getauscht, wenn es gr\u00f6\u00dfer als der Vater ist. diese Operation wird durchgef\u00fchrt solange der Vater Kinder hat, dh es werden alle Knoten auf der Strecke auf der getauscht wurde \u00fcberpr\u00fcft, bis man bei einem Blatt ankommt. Die Strecke bis man bei einem Blatt ankommt ist die Tiefe eines Baums, die maximal log(n ) ist. Es werden maximal log(n) Tausche durchgef\u00fchrt.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Heapify wird auf jeden Knoten der Teilb\u00e4ume angewandt. Weil man f\u00fcr jede Reparatur die Kanten entlang gehen muss, also dauert es die Tiefe des Baumes lang und die ist log(n).",
          "id": 5,
          "aspects": [
            {
              "text": "also dauert es die Tiefe des Baumes lang und die ist log(n)",
              "elements": [
                [
                  114,
                  173
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Heapify wird auf jeden Knoten der Teilb\u00e4ume angewandt. Weil man f\u00fcr jede Reparatur die Kanten entlang gehen muss, also dauert es die Tiefe des Baumes lang und die ist log(n).",
          "userId": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "Bei einem Bin\u00e4rbaum, dessen Teilb\u00e4ume selber Heaps sind muss nur die Wurzel kontrolliert werden, dass f\u00fcr diese die Bedingung gilt.",
          "id": 6,
          "aspects": [],
          "correctionOrComment": "Bei einem Bin\u00e4rbaum, dessen Teilb\u00e4ume selber Heaps sind muss nur die Wurzel kontrolliert werden, dass f\u00fcr diese die Bedingung gilt.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Man tauscht die Wurzel mit dem gr\u00f6\u00dften Kind und wiederholt dies bis es gr\u00f6\u00dfer ist als beide Kinder.",
          "id": 7,
          "aspects": [
            {
              "text": "Man tauscht die Wurzel mit dem gr\u00f6\u00dften Kind und wiederholt dies bis es gr\u00f6\u00dfer ist als beide Kinder.",
              "elements": [
                [
                  0,
                  99
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Man tauscht die Wurzel mit dem gr\u00f6\u00dften Kind und wiederholt dies bis es gr\u00f6\u00dfer ist als beide Kinder.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "heapify",
          "id": 8,
          "aspects": [],
          "correctionOrComment": "heapify",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Weil log(n) ist die maximale Tiefe des Baumes. Die Wurzel (der Vater) wird mit beiden Kindern verglichen. Wenn kleiner, wird er mit dem gr\u00f6\u00dferen Kind vertauscht. und dann wieder mit den n\u00e4chsten Kindern usw. bis die Kinder Bl\u00e4tter sind.",
          "id": 9,
          "aspects": [
            {
              "text": "Weil log(n) ist die maximale Tiefe des Baume",
              "elements": [
                [
                  0,
                  44
                ]
              ],
              "aIdx": 1,
              "label": 0
            },
            {
              "text": "Die Wurzel (der Vater) wird mit beiden Kindern verglichen. Wenn kleiner, wird er mit dem gr\u00f6\u00dferen Kind vertauscht. und dann wieder mit den n\u00e4chsten Kindern usw.",
              "elements": [
                [
                  47,
                  207
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Weil log(n) ist die maximale Tiefe des Baumes. Die Wurzel (der Vater) wird mit beiden Kindern verglichen. Wenn kleiner, wird er mit dem gr\u00f6\u00dferen Kind vertauscht. und dann wieder mit den n\u00e4chsten Kindern usw. bis die Kinder Bl\u00e4tter sind.",
          "userId": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Das gr\u00f6\u00dfte Kind des obersten Knotens (bsp die Wurzel) wird mit dem Koten getauscht",
          "id": 10,
          "aspects": [
            {
              "text": "Das gr\u00f6\u00dfte Kind des obersten Knotens (bsp die Wurzel) wird mit dem Koten getauscht",
              "elements": [
                [
                  0,
                  82
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Das gr\u00f6\u00dfte Kind des obersten Knotens (bsp die Wurzel) wird mit dem Koten getauscht",
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "die wurzel wird durch heapify mit dem gr\u00f6\u00dferen kind vertauscht, dadurch muss der komplette heap nochmals \u00fcberpr\u00fcft werden nach fehlstellungen",
          "id": 11,
          "aspects": [
            {
              "text": "Die Wurzel wird durch heapify mit dem gr\u00f6\u00dferen Kind vertauscht",
              "elements": [],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Die Wurzel wird durch heapify mit dem gr\u00f6\u00dferen Kind vertauscht, dadurch muss der komplette Heap nochmals \u00fcberpr\u00fcft werden nach Fehlstellungen",
          "userId": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "mkm",
          "id": 12,
          "aspects": [],
          "correctionOrComment": "mkm",
          "userId": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Falls das gr\u00f6\u00dfere Kind gr\u00f6\u00dfer ist als der Vater werden diese getauscht. Das runtertauschen einer ung\u00fcltigen Wurzel ben\u00f6tigt h\u00f6chstens log(n) Schritte, weil es h\u00f6chstens f\u00fcr jede Ebene einmal gemacht werden muss und der Baum log(n) viele Ebenen hat.",
          "id": 13,
          "aspects": [
            {
              "text": "Falls das gr\u00f6\u00dfere Kind gr\u00f6\u00dfer ist als der Vater werden diese getauscht",
              "elements": [
                [
                  0,
                  70
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "Das runtertauschen einer ung\u00fcltigen Wurzel ben\u00f6tigt h\u00f6chstens log(n) Schritte, weil es h\u00f6chstens f\u00fcr jede Ebene einmal gemacht werden muss und der Baum log(n) viele Ebenen hat",
              "elements": [
                [
                  72,
                  247
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Falls das gr\u00f6\u00dfere Kind gr\u00f6\u00dfer ist als der Vater werden diese getauscht. Das runtertauschen einer ung\u00fcltigen Wurzel ben\u00f6tigt h\u00f6chstens log(n) Schritte, weil es h\u00f6chstens f\u00fcr jede Ebene einmal gemacht werden muss und der Baum log(n) viele Ebenen hat.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Es wird die Operation heapify() genutzt.",
          "id": 14,
          "aspects": [],
          "correctionOrComment": "Es wird die Operation heapify() genutzt.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Die Wurzel muss mit den Kindern verglichen werden und m\u00f6glicherweise, mit dem gr\u00f6\u00dferen getsucht werden. Dieser Schritt muss iterativ, logn mal passieren (entspricht der Tiefe des Tielbaums).",
          "id": 15,
          "aspects": [
            {
              "text": "Die Wurzel muss mit den Kindern verglichen werden und m\u00f6glicherweise, mit dem gr\u00f6\u00dferen getauscht werden. Dieser Schritt muss iterativ, logn mal passieren",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Dieser Schritt muss iterativ, log(n) mal passieren. Dies entspricht der Tiefe des Teilbaums",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Wurzel muss mit den Kindern verglichen werden und m\u00f6glicherweise, mit dem gr\u00f6\u00dferen getauscht werden. Dieser Schritt muss iterativ, log(n) mal passieren. Dies entspricht der Tiefe des Teilbaums.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Indem die Wurzel des Baumes die gr\u00f6\u00dften Kinder entlang nach unten wandert. Wenn oben einer der kleinsten Wert des ganzen Arrays stand, muss der Knoten die komplette Tiefe des Baumes nach unten wandern. Diese betr\u00e4gt log(n).",
          "id": 16,
          "aspects": [
            {
              "text": "Indem die Wurzel des Baumes die gr\u00f6\u00dften Kinder entlang nach unten wandert",
              "elements": [
                [
                  0,
                  73
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Wenn oben einer der kleinsten Wert des ganzen Arrays stand, muss der Knoten die komplette Tiefe des Baumes nach unten wandern. Diese betr\u00e4gt log(n)",
              "elements": [
                [
                  75,
                  222
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Indem die Wurzel des Baumes die gr\u00f6\u00dften Kinder entlang nach unten wandert. Wenn oben einer der kleinsten Wert des ganzen Arrays stand, muss der Knoten die komplette Tiefe des Baumes nach unten wandern. Diese betr\u00e4gt log(n).",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Wir wissen bereits, dass beide Teilb\u00e4ume ein Heap sind. Nun muss sichergestellt werden, dass die Wurzel unser Maximum ist. Ist dies nicht der Fall muss die Reparatur durchgef\u00fchrt werden und somit k\u00f6nnen wieder Fehler in den einzelnen Teilb\u00e4umen entstehen. Wir m\u00fcssen nach der \u00c4nderung der Wurzel f\u00fcr den ganzen Baum kontrollieren ob jeder Teilbaum noch ein Heap ist. Dies ben\u00f6tigt eine Zeit von log n",
          "id": 17,
          "aspects": [],
          "correctionOrComment": "Wir wissen bereits, dass beide Teilb\u00e4ume ein Heap sind. Nun muss sichergestellt werden, dass die Wurzel unser Maximum ist. Ist dies nicht der Fall muss die Reparatur durchgef\u00fchrt werden und somit k\u00f6nnen wieder Fehler in den einzelnen Teilb\u00e4umen entstehen. Wir m\u00fcssen nach der \u00c4nderung der Wurzel f\u00fcr den ganzen Baum kontrollieren ob jeder Teilbaum noch ein Heap ist. Dies ben\u00f6tigt eine Zeit von log n",
          "userId": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Max. Log(n) ebenen Die Wurzel wandert runter bis sie gr\u00f6\u00dfer ist als ihre Kinder oder sie ein Blatt ist",
          "id": 18,
          "aspects": [
            {
              "text": "Die Wurzel wandert runter bis sie gr\u00f6\u00dfer ist als ihre Kinder oder sie ein Blatt ist",
              "elements": [
                [
                  19,
                  102
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "Der Baum hat maximal log(n) Ebenen",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Der Baum hat maximal log(n) Ebenen. Die Wurzel wandert runter bis sie gr\u00f6\u00dfer ist als ihre Kinder oder sie ein Blatt ist",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "es muss ein heapify durchgef\u00fchrt werden, welcher sich ggf bis zu einem Blatt durchziehen kann",
          "id": 19,
          "aspects": [],
          "correctionOrComment": "es muss ein heapify durchgef\u00fchrt werden, welcher sich ggf bis zu einem Blatt durchziehen kann",
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "kp",
          "id": 20,
          "aspects": [],
          "correctionOrComment": "kp",
          "userId": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Das Element an der Wurzel wird mit dem letzten Kind getauscht. Daf\u00fcr wird es immer wieder mit dem rechten Kind getauscht. D ein Baum log(n) Tiefe hat, ben\u00f6tigt die Operation log(n) Schritte.",
          "id": 21,
          "aspects": [
            {
              "text": "Daf\u00fcr wird es immer wieder mit dem rechten Kind getauscht",
              "elements": [
                [
                  63,
                  120
                ]
              ],
              "aIdx": 0,
              "label": 2
            },
            {
              "text": "Da ein Baum log(n) Tiefe hat, ben\u00f6tigt die Operation log(n) Schritte",
              "elements": [],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Das Element an der Wurzel wird mit dem letzten Kind getauscht. Daf\u00fcr wird es immer wieder mit dem rechten Kind getauscht. Da ein Baum log(n) Tiefe hat, ben\u00f6tigt die Operation log(n) Schritte.",
          "userId": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Die heapify Funktion muss auf den Bin\u00e4rbaum angewendet werden.",
          "id": 22,
          "aspects": [],
          "correctionOrComment": "Die heapify Funktion muss auf den Bin\u00e4rbaum angewendet werden.",
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Die Wurzel wird durch sinnvolles Tauschen an die richtige Stelle gebracht. Immer am gr\u00f6\u00dften Kind entlang.",
          "id": 23,
          "aspects": [
            {
              "text": "Die Wurzel wird durch sinnvolles Tauschen an die richtige Stelle gebracht. Immer am gr\u00f6\u00dften Kind entlang",
              "elements": [
                [
                  0,
                  104
                ]
              ],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Wurzel wird durch sinnvolles Tauschen an die richtige Stelle gebracht. Immer am gr\u00f6\u00dften Kind entlang.",
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        }
      ]
    },
    {
      "text": "Was ist die Idee des rekursiven MergeSort Algorithmus?",
      "id": "50895",
      "title": "Idee MergeSort",
      "type": "procedure",
      "aspects": [
        {
          "text": "Die Problemgr\u00f6\u00dfe wird durch das halbieren der Menge immer wieder reduziert bis das Sortieren einer H\u00e4lften trivial ist"
        },
        {
          "text": "Alle sortierten H\u00e4lften werden sortiert wieder zusammengef\u00fcgt"
        }
      ],
      "assignedWeights": {
        "Problemgr\u00f6\u00dfe": 4,
        "werden": 3,
        "durch": 3,
        "halbieren": 5,
        "Menge": 4,
        "immer": 4,
        "wieder": 4,
        "reduzieren": 5,
        "bis": 4,
        "Sortieren": 4,
        "H\u00e4lfte": 4,
        "trivial": 4,
        "sein": 2,
        "alle": 3,
        "sortiert": 4,
        "dann": 3,
        "zusammenf\u00fcgen": 5
      },
      "referenceAnswers": [
        {
          "id": "ref1",
          "text": "Die Problemgr\u00f6\u00dfe wird durch das halbieren der Menge immer wieder zu reduzieren bis das Sortieren der H\u00e4lften trivial ist. Alle sortierten H\u00e4lften werden dann sortiert wieder zusammengef\u00fcgt.",
          "aspects": [
            {
              "text": "Die Problemgr\u00f6\u00dfe wird durch das halbieren der Menge immer wieder zu reduzieren bis das Sortieren der H\u00e4lften trivial ist",
              "aIdx": 0,
              "elements": [
                [
                  0,
                  120
                ]
              ]
            },
            {
              "text": "Alle sortierten H\u00e4lften werden dann sortiert wieder zusammengef\u00fcgt",
              "aIdx": 1,
              "elements": [
                [
                  122,
                  188
                ]
              ]
            }
          ]
        }
      ],
      "studentAnswers": [
        {
          "text": "die menge wird solange geteilt bis sie fertig sortiert ist",
          "id": 0,
          "aspects": [
            {
              "text": "Die Menge wird solange geteilt, bis sie fertig sortiert ist",
              "elements": [],
              "aIdx": 0,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Menge wird solange geteilt, bis sie fertig sortiert ist",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Das Intervall einer Menge wird halbiert und vergleicht, wenn es bis auf zwei bzw. ein Element immer weiter rekursiv halbiert wurde die Elemente und vertauscht sie, falls n\u00f6tig. Danach werden die Intervalle (Stapel) wieder zusammengemischt (eigentlich eher wieder aneinandergelegt).",
          "id": 1,
          "aspects": [
            {
              "text": "Das Intervall einer Menge wird halbiert und vergleicht, wenn es bis auf zwei bzw. ein Element immer weiter rekursiv halbiert wurde",
              "elements": [
                [
                  0,
                  130
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "Danach werden die Intervalle (Stapel) wieder zusammengemischt",
              "elements": [
                [
                  177,
                  238
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Das Intervall einer Menge wird halbiert und vergleicht, wenn es bis auf zwei bzw. ein Element immer weiter rekursiv halbiert wurde die Elemente und vertauscht sie, falls n\u00f6tig. Danach werden die Intervalle (Stapel) wieder zusammengemischt (eigentlich eher wieder aneinandergelegt).",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Devide and Conquer",
          "id": 2,
          "aspects": [
            {
              "text": "Devide and Conquer",
              "elements": [
                [
                  0,
                  18
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Devide and Conquer",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Operation ruft sich solange selbst auf, bis nur noch 2 Zahlen zu vergleichen sind. Danach gibt sie diese sortiert wieder zur\u00fcck.",
          "id": 3,
          "aspects": [
            {
              "text": "Die Operation ruft sich solange selbst auf, bis nur noch 2 Zahlen zu vergleichen sind. Danach gibt sie diese sortiert wieder zur\u00fcck.",
              "elements": [
                [
                  0,
                  132
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Die Operation ruft sich solange selbst auf, bis nur noch 2 Zahlen zu vergleichen sind. Danach gibt sie diese sortiert wieder zur\u00fcck.",
          "userId": "7ba019a2553e1137a4bbb8d3c779a48e5ceb2ca3a162e6e0a945ef0f"
        },
        {
          "text": "Bei MergeSort werden die zu sortierenden Elemente immer wieder in der H\u00e4lfte geteilt, bis jeweils nur noch zwei Elemente \u00fcbrig sind. Diese werden sortiert und mit einem anderen sortierten Stapel vermischt (sodass es insgesamt sortiert ist, nicht irgendwie mischen).",
          "id": 4,
          "aspects": [
            {
              "text": "Bei MergeSort werden die zu sortierenden Elemente immer wieder in der H\u00e4lfte geteilt, bis jeweils nur noch zwei Elemente \u00fcbrig sind",
              "elements": [
                [
                  0,
                  131
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Diese werden sortiert und mit einem anderen sortierten Stapel vermischt, sodass es insgesamt sortiert ist, nicht irgendwie mischen",
              "elements": [],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Bei MergeSort werden die zu sortierenden Elemente immer wieder in der H\u00e4lfte geteilt, bis jeweils nur noch zwei Elemente \u00fcbrig sind. Diese werden sortiert und mit einem anderen sortierten Stapel vermischt, sodass es insgesamt sortiert ist, nicht irgendwie mischen.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Duvide and conquer. Ein Array wird so lange aufgeteilt bis es nur 1 element hat. Dann werden 2 sortierte teile des arrays in einem neu angelegten array gemischt dh sortiert und in das urspr\u00fcngliche array \u00fcbertragen.",
          "id": 5,
          "aspects": [
            {
              "text": "Ein Array wird so lange aufgeteilt bis es nur 1 element hat",
              "elements": [
                [
                  20,
                  79
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": "Dann werden 2 sortierte Teile des Arrays in einem neu angelegten Array gemischt dh sortiert und in das urspr\u00fcngliche Array \u00fcbertragen",
              "elements": [],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Divide and conquer. Ein Array wird so lange aufgeteilt bis es nur 1 element hat. Dann werden 2 sortierte Teile des Arrays in einem neu angelegten Array gemischt dh sortiert und in das urspr\u00fcngliche Array \u00fcbertragen.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die gegebene Menge wird immer wieder aufgeteilt in zwei Mengen und rekursiv selbst weitergegeben. Hat man eine Menge von nur zwei Elementen sortiert man diese und gibt sie zur\u00fcck.",
          "id": 6,
          "aspects": [
            {
              "text": "Die gegebene Menge wird immer wieder aufgeteilt in zwei Mengen und rekursiv selbst weitergegeben. Hat man eine Menge von nur zwei Elementen",
              "elements": [
                [
                  0,
                  139
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Hat man eine Menge von nur zwei Elementen sortiert man diese und gibt sie zur\u00fcck",
              "elements": [
                [
                  98,
                  178
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Die gegebene Menge wird immer wieder aufgeteilt in zwei Mengen und rekursiv selbst weitergegeben. Hat man eine Menge von nur zwei Elementen sortiert man diese und gibt sie zur\u00fcck.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Das eine Menge immer wieder aufgeteilt wird bis nur noch <= 2 Elemente vorhanden sind, die einfach sortiert werden k\u00f6nnen. Somit wird die Menge in kleinere Probleme aufgeteilt und sobald diese kleinsten Probleme gel\u00f6st sind wieder zusammengef\u00fcgt.",
          "id": 7,
          "aspects": [
            {
              "text": "Das eine Menge immer wieder aufgeteilt wird bis nur noch <= 2 Elemente vorhanden sind, die einfach sortiert werden k\u00f6nnen",
              "elements": [
                [
                  0,
                  121
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Somit wird die Menge in kleinere Probleme aufgeteilt und sobald diese kleinsten Probleme gel\u00f6st sind wieder zusammengef\u00fcgt",
              "elements": [
                [
                  123,
                  245
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Das eine Menge immer wieder aufgeteilt wird bis nur noch <= 2 Elemente vorhanden sind, die einfach sortiert werden k\u00f6nnen. Somit wird die Menge in kleinere Probleme aufgeteilt und sobald diese kleinsten Probleme gel\u00f6st sind wieder zusammengef\u00fcgt.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Die Idee ist Divide and Conquer, dazu wird der zu sortierende Stapel immer wieder in zwei H\u00e4lften aufgeteilt und diese jeweils sortiert und sortiert wieder zusammengemischt.",
          "id": 8,
          "aspects": [
            {
              "text": "Die Idee ist Divide and Conquer, dazu wird der zu sortierende Stapel immer wieder in zwei H\u00e4lften aufgeteilt und diese jeweils sortiert",
              "elements": [
                [
                  0,
                  135
                ]
              ],
              "aIdx": 0,
              "label": 1
            },
            {
              "text": " und sortiert wieder zusammengemischt",
              "elements": [
                [
                  136,
                  172
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Die Idee ist Divide and Conquer, dazu wird der zu sortierende Stapel immer wieder in zwei H\u00e4lften aufgeteilt und diese jeweils sortiert und sortiert wieder zusammengemischt.",
          "userId": "0ce8152aa92136af039b687c01c7dccfcb271f3db2d0ddcb3cfdd3e6"
        },
        {
          "text": "bei Merge Sort wird das Array in Teilarrays unterteilt und dann wieder geteilt und wieder geteilt bis die Elemente einzeln vorliegen. Diese werden dann mit den anderen Teilarrays gemergt und dabei sortiert",
          "id": 9,
          "aspects": [
            {
              "text": "bei Merge Sort wird das Array in Teilarrays unterteilt und dann wieder geteilt und wieder geteilt bis die Elemente einzeln vorliegen",
              "elements": [
                [
                  0,
                  132
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Diese werden dann mit den anderen Teilarrays gemergt und dabei sortiert",
              "elements": [
                [
                  134,
                  205
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "bei Merge Sort wird das Array in Teilarrays unterteilt und dann wieder geteilt und wieder geteilt bis die Elemente einzeln vorliegen. Diese werden dann mit den anderen Teilarrays gemergt und dabei sortiert",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "MergeSort sortiert immer weiter geteilte Stapel erst, wenn diese h\u00f6chstens zwei Elemente besitzen. Dann werden die einzelnen Elemente zusammengemischt und so sortiert.",
          "id": 10,
          "aspects": [
            {
              "text": "MergeSort sortiert immer weiter geteilte Stapel erst, wenn diese h\u00f6chstens zwei Elemente besitzen",
              "elements": [
                [
                  0,
                  97
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": " Dann werden die einzelnen Elemente zusammengemischt und so sortiert",
              "elements": [
                [
                  99,
                  166
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "MergeSort sortiert immer weiter geteilte Stapel erst, wenn diese h\u00f6chstens zwei Elemente besitzen. Dann werden die einzelnen Elemente zusammengemischt und so sortiert.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "teile und herrsche",
          "id": 11,
          "aspects": [
            {
              "text": "Teile und Herrsche",
              "elements": [],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Teile und Herrsche",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Divide & Conquer. Die Menge wird auf zwei geteilt und rekursiv wieder und wieder, bis jede Teilmenge nur ein Element enth\u00e4lt und dann je nach Gr\u00f6\u00dfe wieder zusammen geklebt.",
          "id": 12,
          "aspects": [
            {
              "text": "Die Menge wird auf zwei geteilt und rekursiv wieder und wieder, bis jede Teilmenge nur ein Element enth\u00e4lt ",
              "elements": [
                [
                  18,
                  124
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "und dann je nach Gr\u00f6\u00dfe wieder zusammen geklebt",
              "elements": [
                [
                  125,
                  171
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Divide & Conquer. Die Menge wird auf zwei geteilt und rekursiv wieder und wieder, bis jede Teilmenge nur ein Element enth\u00e4lt und dann je nach Gr\u00f6\u00dfe wieder zusammen geklebt.",
          "userId": "408f0afbe2440a4383a1e75b7d5b0b4202c7f7131a9acf9bd70492f3"
        },
        {
          "text": "Divide & conquer Das zu sortierende Array wird solange in zwei Teilarrays aufgeteilt, bis die Teilarrays nur noch aus einem Element bestehen. Daraufhin geht die Rekursion r\u00fcckw\u00e4rts und f\u00fcgt dabei die Teilarrays so zusammen, dass sie sortiert sind. Das geschieht solange, bis das Array vollst\u00e4ndig sortiert ist.",
          "id": 13,
          "aspects": [
            {
              "text": "Das zu sortierende Array wird solange in zwei Teilarrays aufgeteilt, bis die Teilarrays nur noch aus einem Element bestehen",
              "elements": [
                [
                  17,
                  140
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Daraufhin geht die Rekursion r\u00fcckw\u00e4rts und f\u00fcgt dabei die Teilarrays so zusammen, dass sie sortiert sind. Das geschieht solange, bis das Array vollst\u00e4ndig sortiert ist",
              "elements": [
                [
                  142,
                  309
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Divide & conquer Das zu sortierende Array wird solange in zwei Teilarrays aufgeteilt, bis die Teilarrays nur noch aus einem Element bestehen. Daraufhin geht die Rekursion r\u00fcckw\u00e4rts und f\u00fcgt dabei die Teilarrays so zusammen, dass sie sortiert sind. Das geschieht solange, bis das Array vollst\u00e4ndig sortiert ist.",
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "das array rekursiv in arrays der l\u00e4nge 2 oder 1 und diese zu sortieren und dann nach und nach die kurzen arrays mit anderen arrays zusammensortieren",
          "id": 14,
          "aspects": [
            {
              "text": "Das Array rekursiv in Arrays der L\u00e4nge 2 oder 1 teilen",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "diese Sortieren und dann nach und nach die kurzen Arrays mit anderen Arrays zusammensortiere",
              "elements": [],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Das Array rekursiv in Arrays der L\u00e4nge 2 oder 1 teilen und diese Sortieren und dann nach und nach die kurzen Arrays mit anderen Arrays zusammensortieren",
          "userId": "c1b8144ee1a30244a571c3d9b48b2c394a7489065d2565968f521645"
        },
        {
          "text": "ml,l,",
          "id": 15,
          "aspects": [],
          "correctionOrComment": "ml,l,",
          "userId": "192f56eb9bd894a72b30c303247b107be2c4591f310dd69a67927f48"
        },
        {
          "text": "Devide and Conquer",
          "id": 16,
          "aspects": [
            {
              "text": "Devide and Conquer",
              "elements": [
                [
                  0,
                  18
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Devide and Conquer",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Ein (Teil-)Array wird so oft halbiert bis es nurnoch aus zwei Elementen besteht, diese werden dann sortiert. Dieses Teilarray wird mit einem anderen gemergt also so zusammengef\u00fchrt, dass es immernoch sortiert ist. Das macht man dann so oft bis man wieder beim urspr\u00fcnglichen Array angekommen ist.",
          "id": 17,
          "aspects": [
            {
              "text": "Ein (Teil-)Array wird so oft halbiert bis es nurnoch aus zwei Elementen besteht",
              "elements": [
                [
                  0,
                  79
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "diese werden dann sortiert. Dieses Teilarray wird mit einem anderen gemergt also so zusammengef\u00fchrt, dass es immernoch sortiert ist. Das macht man dann so oft bis man wieder beim urspr\u00fcnglichen Array angekommen ist",
              "elements": [
                [
                  81,
                  295
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Ein (Teil-)Array wird so oft halbiert bis es nurnoch aus zwei Elementen besteht, diese werden dann sortiert. Dieses Teilarray wird mit einem anderen gemergt also so zusammengef\u00fchrt, dass es immernoch sortiert ist. Das macht man dann so oft bis man wieder beim urspr\u00fcnglichen Array angekommen ist.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Divide and conquer. Ein Problem wird in Teilprobleme aufgeteilt, die delegiert werden (auf denen die sort-operation rekursiv aufgerufen wird). Wenn die Probleme klein genug sind, k\u00f6nnen sie gel\u00f6st werden und die L\u00f6sungen k\u00f6nnen zur Probleml\u00f6sung kombiniert werden.",
          "id": 18,
          "aspects": [
            {
              "text": "Ein Problem wird in Teilprobleme aufgeteilt, die delegiert werden, das hei\u00dft auf denen die sort-operation rekursiv aufgerufen wird. Wenn die Probleme klein genug sind, k\u00f6nnen sie gel\u00f6st werden",
              "elements": [],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "und die L\u00f6sungen k\u00f6nnen zur Probleml\u00f6sung kombiniert werden",
              "elements": [
                [
                  204,
                  263
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Divide and conquer. Ein Problem wird in Teilprobleme aufgeteilt, die delegiert werden, das hei\u00dft auf denen die sort-operation rekursiv aufgerufen wird. Wenn die Probleme klein genug sind, k\u00f6nnen sie gel\u00f6st werden und die L\u00f6sungen k\u00f6nnen zur Probleml\u00f6sung kombiniert werden.",
          "userId": "31da1a042dc910775ed8b487afbdafd929a7afdeaadc660cb963bd26"
        },
        {
          "text": "Man teilt ein gegebenes Array so lange in der H\u00e4lfte, bis es maximal aus 2 Werten besteht, diese kann man leicht sortieren, danach werden die Teilarrays zusammengemischt.",
          "id": 19,
          "aspects": [
            {
              "text": "Man teilt ein gegebenes Array so lange in der H\u00e4lfte, bis es maximal aus 2 Werten besteht, diese kann man leicht sortieren",
              "elements": [
                [
                  0,
                  122
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "danach werden die Teilarrays zusammengemischt",
              "elements": [
                [
                  124,
                  169
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Man teilt ein gegebenes Array so lange in der H\u00e4lfte, bis es maximal aus 2 Werten besteht, diese kann man leicht sortieren, danach werden die Teilarrays zusammengemischt.",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Der Datensatz mit n Elementen wird so h\u00e4ufig halbiert bis jeweils nur noch 1 Element da ist. dann wird er sortiert wieder zusammengef\u00fcgt",
          "id": 20,
          "aspects": [
            {
              "text": "Der Datensatz mit n Elementen wird so h\u00e4ufig halbiert bis jeweils nur noch 1 Element da ist",
              "elements": [
                [
                  0,
                  91
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "dann wird er sortiert wieder zusammengef\u00fcgt",
              "elements": [
                [
                  93,
                  136
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Der Datensatz mit n Elementen wird so h\u00e4ufig halbiert bis jeweils nur noch 1 Element da ist. dann wird er sortiert wieder zusammengef\u00fcgt",
          "userId": "b51d18b551043c1f145f22dbde6f8531faeaf68c54ed9dd79ce24d17"
        },
        {
          "text": "Wir Teilen das was wir bekommen in zwei Teile, die jeweils wieder zerteilt werden, bis nur noch ein einzelnes element \u00fcbrig ist, dann werden sie wieder zusammen gemischt, so dass immer die obersten elemente Zweier Teile verglichen werden und der Kleinere zu erst auf den Zusammenf\u00fcgestapel kommt, bis alle Einzelteile wieder zusammengef\u00fcgt wurden",
          "id": 21,
          "aspects": [
            {
              "text": "Wir Teilen das was wir bekommen in zwei Teile, die jeweils wieder zerteilt werden, bis nur noch ein einzelnes element \u00fcbrig ist",
              "elements": [
                [
                  0,
                  127
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "dann werden sie wieder zusammen gemischt, so dass immer die obersten elemente Zweier Teile verglichen werden und der Kleinere zu erst auf den Zusammenf\u00fcgestapel kommt, bis alle Einzelteile wieder zusammengef\u00fcgt wurden",
              "elements": [
                [
                  129,
                  346
                ]
              ],
              "aIdx": 1,
              "label": 0
            }
          ],
          "correctionOrComment": "Wir Teilen das was wir bekommen in zwei Teile, die jeweils wieder zerteilt werden, bis nur noch ein einzelnes element \u00fcbrig ist, dann werden sie wieder zusammen gemischt, so dass immer die obersten elemente Zweier Teile verglichen werden und der Kleinere zu erst auf den Zusammenf\u00fcgestapel kommt, bis alle Einzelteile wieder zusammengef\u00fcgt wurden",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Divide and Conquer",
          "id": 22,
          "aspects": [
            {
              "text": "Divide and Conquer",
              "elements": [
                [
                  0,
                  18
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Divide and Conquer",
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Divide and Conquer",
          "id": 23,
          "aspects": [
            {
              "text": "Divide and Conquer",
              "elements": [
                [
                  0,
                  18
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Divide and Conquer",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Divide and Conquer",
          "id": 24,
          "aspects": [
            {
              "text": "Divide and Conquer",
              "elements": [
                [
                  0,
                  18
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Divide and Conquer",
          "userId": "ae8820303e493738a211ebb2ae3a2f90b286f20f767609beb77522c0"
        },
        {
          "text": "Der Datensatz wird so lange rekursiv aufgeteilt, bis er nur noch zwei Elemente miteinander vergleichen muss. Anschlie\u00dfend werden die Elemente wieder ebenenweise zusammengef\u00fcgt.",
          "id": 25,
          "aspects": [
            {
              "text": "Der Datensatz wird so lange rekursiv aufgeteilt, bis er nur noch zwei Elemente miteinander vergleichen muss",
              "elements": [
                [
                  0,
                  107
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Anschlie\u00dfend werden die Elemente wieder ebenenweise zusammengef\u00fcgt",
              "elements": [
                [
                  109,
                  175
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Der Datensatz wird so lange rekursiv aufgeteilt, bis er nur noch zwei Elemente miteinander vergleichen muss. Anschlie\u00dfend werden die Elemente wieder ebenenweise zusammengef\u00fcgt.",
          "userId": "b8607e0369fbf3e33bc0e358f840915d8c085d1496097351913c0122"
        },
        {
          "text": "Die Menge wird rekursiv immer weiter geteilt, bis nur noch zwei Elemente vorhanden sind. Diese und die zur\u00fcckgegebenen Mengen werden dann entsprechend wieder sortiert.",
          "id": 26,
          "aspects": [
            {
              "text": "Die Menge wird rekursiv immer weiter geteilt, bis nur noch zwei Elemente vorhanden sind",
              "elements": [
                [
                  0,
                  87
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Diese und die zur\u00fcckgegebenen Mengen werden dann entsprechend wieder sortiert",
              "elements": [
                [
                  89,
                  166
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Die Menge wird rekursiv immer weiter geteilt, bis nur noch zwei Elemente vorhanden sind. Diese und die zur\u00fcckgegebenen Mengen werden dann entsprechend wieder sortiert.",
          "userId": "9cbcb7142c0ba8e0acabe63fa0665db839f24ed7f11f2b8e2e8f47b6"
        },
        {
          "text": "Die zu sortierende Menge wird immer weiter aufgeteilt, bis nur noch zwei oder weniger Objekte \u00fcbrig sind, diese werden dann zur\u00fcckgebeben und mit den anderen zusammengef\u00fcgt",
          "id": 27,
          "aspects": [
            {
              "text": "ie zu sortierende Menge wird immer weiter aufgeteilt, bis nur noch zwei oder weniger Objekte \u00fcbrig sind",
              "elements": [
                [
                  1,
                  104
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "diese werden dann zur\u00fcckgebeben und mit den anderen zusammengef\u00fcgt",
              "elements": [
                [
                  106,
                  172
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Die zu sortierende Menge wird immer weiter aufgeteilt, bis nur noch zwei oder weniger Objekte \u00fcbrig sind, diese werden dann zur\u00fcckgebeben und mit den anderen zusammengef\u00fcgt",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        },
        {
          "text": "Wir brauchen nur einen Vergleich zu programmieren, da wir von Beginn an die zu sortierende Menge teilen und dann f\u00fcr beide H\u00e4lften das Sort aufrufen, m Sort dann wieder teilen und f\u00fcr beide H\u00e4lften Sort aufrufen. Das passiert so lange, bis die zu sortierende Menge nur noch 2 Elemente hat. die sind ganz leicht zu sortieren. Bein R\u00fcckkehren werden die beiden Mengen zusamengemischt und wieder zur\u00fcckgegeben.",
          "id": 28,
          "aspects": [
            {
              "text": "da wir von Beginn an die zu sortierende Menge teilen und dann f\u00fcr beide H\u00e4lften das Sort aufrufen ;; Das passiert so lange, bis die zu sortierende Menge nur noch 2 Elemente hat. die sind ganz leicht zu sortieren",
              "elements": [
                [
                  51,
                  148
                ],
                [
                  213,
                  323
                ]
              ],
              "aIdx": 0,
              "label": 0
            },
            {
              "text": "Bein R\u00fcckkehren werden die beiden Mengen zusamengemischt und wieder zur\u00fcckgegeben",
              "elements": [
                [
                  325,
                  406
                ]
              ],
              "aIdx": 1,
              "label": 1
            }
          ],
          "correctionOrComment": "Wir brauchen nur einen Vergleich zu programmieren, da wir von Beginn an die zu sortierende Menge teilen und dann f\u00fcr beide H\u00e4lften das Sort aufrufen, m Sort dann wieder teilen und f\u00fcr beide H\u00e4lften Sort aufrufen. Das passiert so lange, bis die zu sortierende Menge nur noch 2 Elemente hat. die sind ganz leicht zu sortieren. Bein R\u00fcckkehren werden die beiden Mengen zusamengemischt und wieder zur\u00fcckgegeben.",
          "userId": "525ab75c928c6fac98a0f62e4da5316b7247ccd704c967ef9142925c"
        },
        {
          "text": "Das zu sortierende Array wird immer weiter verkleinert",
          "id": 29,
          "aspects": [
            {
              "text": "Das zu sortierende Array wird immer weiter verkleinert",
              "elements": [
                [
                  0,
                  54
                ]
              ],
              "aIdx": 0,
              "label": 1
            }
          ],
          "correctionOrComment": "Das zu sortierende Array wird immer weiter verkleinert",
          "userId": "dfd5f9139a820075df69d7895015360b76d0360f3d4b77a845689614"
        }
      ]
    }
  ]
}